[
  {
    "id": 401,
    "title": "jq group by example",
    "created": "2022-10-12T16:53:23Z",
    "modified": "2022-10-12T16:53:23Z",
    "code": [
      "jq 'group_by(.language)| map( {\"\\(.[0].language)\":length}) |add'",
      ""
    ],
    "example": [
      "$ curl -s https://api.github.com/users/nntrn/repos | jq 'group_by(.language)| map( {\"\\(.[0].language)\":length}) |add'",
      "{",
      "  \"null\": 7,",
      "  \"HTML\": 4,",
      "  \"Java\": 1,",
      "  \"JavaScript\": 11,",
      "  \"Jinja\": 2,",
      "  \"R\": 1,",
      "  \"SCSS\": 1",
      "}"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "jq"
    ]
  },
  {
    "id": 400,
    "title": "jq - recursively slice array values to get first child only",
    "created": "2022-09-30T04:49:10Z",
    "modified": "2022-09-30T04:49:10Z",
    "code": [
      "jq 'walk(if type == \"array\" then (.[0]) else . end)'"
    ],
    "example": [
      "cat array-of-objects.json | jq '.[]|walk(if type == \"array\" then (if length > 10 then (.|join(\", \")) else . end) else . end)'"
    ],
    "output": "",
    "description": [
      "definition of builtin walk function: ",
      "# Apply f to composite entities recursively, and to atoms",
      "def walk(f):",
      "  . as $in",
      "  | if type == \"object\" then",
      "      reduce keys_unsorted[] as $key",
      "        ( {}; . + { ($key):  ($in[$key] | walk(f)) } ) | f",
      "  elif type == \"array\" then map( walk(f) ) | f",
      "  else f",
      "  end;"
    ],
    "language": "bash",
    "tags": [
      "jq"
    ],
    "url": "https://raw.githubusercontent.com/stedolan/jq/master/src/builtin.jq"
  },
  {
    "id": 399,
    "title": "jq - merge files ",
    "created": "2022-09-29T22:21:53Z",
    "modified": "2022-09-29T22:26:13Z",
    "code": [
      "jq -s '.[0] + .[1]' file1.json file2.json"
    ],
    "example": [
      "EXAMPLE 1: Merging Objects",
      "",
      "$ echo '{\"a\":1,\"b\":2,\"c\":3}' >obj1.json",
      "",
      "$ echo '{\"d\":4,\"e\":5,\"f\":6}' >obj2.json",
      "",
      "$ jq -c -s '.[0] + .[1]' file*",
      "{\"a\":1,\"b\":2,\"c\":3,\"d\":4,\"e\":5,\"f\":6}",
      "",
      "EXAMPLE 2: Merging Arrays",
      "",
      "$ echo '[1,2,3,5,6]' > arr1.json",
      "",
      "$ echo '[\"a\",\"b\",\"c\",\"d\",\"e\"]' > arr2.json",
      "",
      "$ jq -c -s '.[0] + .[1]' arr*",
      "[1,2,3,5,6,\"a\",\"b\",\"c\",\"d\",\"e\"]"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "jq"
    ],
    "url": "https://stackoverflow.com/a/22121168"
  },
  {
    "id": 398,
    "title": "jq - filter dates",
    "created": "2022-09-27T16:30:54Z",
    "modified": "2022-09-27T16:30:54Z",
    "code": [
      "jq '[.[] | select(.date_field> (now | strftime(\"%Y-%m-%d\")))]'"
    ],
    "example": [
      "$ curl -s https://endoflife.date/api/nodejs.json | jq '[.[] | select(.eol > (now | strftime(\"%Y-%m-%d\")))]'",
      "[",
      "  {",
      "    \"cycle\": \"18\",",
      "    \"lts\": \"2022-10-25\",",
      "    \"support\": \"2023-10-18\",",
      "    \"eol\": \"2025-04-30\",",
      "    \"latest\": \"18.9.1\",",
      "    \"latestReleaseDate\": \"2022-09-23\",",
      "    \"releaseDate\": \"2022-04-19\"",
      "  },",
      "  {",
      "    \"cycle\": \"16\",",
      "    \"lts\": \"2021-10-26\",",
      "    \"support\": \"2022-10-18\",",
      "    \"eol\": \"2023-09-11\",",
      "    \"latest\": \"16.17.1\",",
      "    \"latestReleaseDate\": \"2022-09-23\",",
      "    \"releaseDate\": \"2021-04-20\"",
      "  },",
      "  {",
      "    \"cycle\": \"14\",",
      "    \"lts\": \"2020-10-27\",",
      "    \"support\": \"2021-10-19\",",
      "    \"eol\": \"2023-04-30\",",
      "    \"latest\": \"14.20.1\",",
      "    \"latestReleaseDate\": \"2022-09-23\",",
      "    \"releaseDate\": \"2020-04-21\"",
      "  }",
      "]"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "jq"
    ],
    "url": "https://michaelheap.com/jq-select-date-before-today/"
  },
  {
    "id": 397,
    "title": "hex/ascii text conversion",
    "created": "2022-09-20T20:18:26Z",
    "modified": "2022-09-20T20:19:00Z",
    "code": [
      "HEX_TEXT=68656c6c6f20776f726c64",
      "ASCII_TEXT=\"hello world\"",
      "",
      "# hex to ascii",
      "echo -n \"$HEX_TEXT\" | sed 's/\\([0-9A-F]\\{2\\}\\)/\\\\\\\\\\\\x\\1/gI' | xargs printf && echo ''",
      "",
      "# ascii to hex",
      "echo -n \"$ASCII_TEXT\" | od -A n -t x1 | tr -d ' '",
      ""
    ],
    "example": [
      "$ echo -n \"hello world\" | od -A n -t x1 | tr -d ' '",
      "68656c6c6f20776f726c64",
      "",
      "$ echo '68656c6c6f20776f726c64'|sed 's/\\([0-9A-F]\\{2\\}\\)/\\\\\\\\\\\\x\\1/gI' | xargs printf && echo ''",
      "hello world",
      ""
    ],
    "output": "",
    "description": [
      "- https://www.commandlinefu.com/commands/view/6081/convert-ascii-string-to-hex",
      "- https://www.linuxshelltips.com/convert-hex-to-ascii-characters-linux/"
    ],
    "language": "bash",
    "tags": [],
    "url": "https://www.linuxshelltips.com/convert-hex-to-ascii-characters-linux/"
  },
  {
    "id": 396,
    "title": "cvtsudoers - get all configured sudo policies",
    "created": "2022-09-16T23:44:46Z",
    "modified": "2022-09-16T23:44:46Z",
    "code": [
      "cp /etc/sudoers . ",
      "",
      "# json",
      "cvtsudoers -f json -o sudoers.json sudoers",
      "",
      "# combines all /etc/sudoers.d/* and /etc/sudoers",
      "cvtsudoers -f sudoers -o sudoers.txt sudoers",
      "",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "permissions",
      "sudo"
    ],
    "url": "https://www.sudo.ws/docs/man/cvtsudoers.man/"
  },
  {
    "id": 395,
    "title": "get machine architecture.",
    "created": "2022-09-16T23:12:19Z",
    "modified": "2022-09-16T23:12:19Z",
    "code": [
      "architecture=\"\"",
      "case $(uname -m) in",
      "    i386)   architecture=\"386\" ;;",
      "    i686)   architecture=\"386\" ;;",
      "    x86_64) architecture=\"amd64\" ;;",
      "    arm)    dpkg --print-architecture | grep -q \"arm64\" && architecture=\"arm64\" || architecture=\"arm\" ;;",
      "esac"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "arm",
      "posix"
    ],
    "url": "https://stackoverflow.com/a/48679640"
  },
  {
    "id": 394,
    "title": "jq - select objects with given key name",
    "created": "2022-09-16T00:57:53Z",
    "modified": "2022-09-16T00:57:53Z",
    "code": [
      "jq '..|objects|select(has(\"updateDate\"))|.updateDate'"
    ],
    "example": [
      "$ curl -s 'https://api.github.com/repos/ansible/awx/commits?per_page=3' | jq -r '..|objects|select(has(\"committer\"))|([.author.date,.author.name,.message]|join(\"\\t\"))'",
      "",
      "2022-09-15T20:28:56Z    Sarah Akus  Merge pull request #12778 from keithjgrant/12542-schedule-exceptions",
      "2022-09-15T16:37:03Z    Keith J. Grant  adjust DetailList spacing when two appear in succession",
      "2022-09-14T22:33:00Z    Keith J. Grant  improve frequency validation performance"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://stackoverflow.com/a/53676048"
  },
  {
    "id": 393,
    "title": "rpm - get scripts used during install/uninstall processes",
    "created": "2022-09-14T18:59:04Z",
    "modified": "2022-09-14T18:59:04Z",
    "code": [
      "rpm -q  --scripts <PACKAGE_NAME>"
    ],
    "example": [
      "$ rpm -q  --scripts docker-engine",
      "preinstall scriptlet (using /bin/sh):",
      "if [ $1 -gt 0 ] ; then",
      "    # package upgrade scenario, before new files are installed",
      "",
      "    # clear any old state",
      "    rm -f /var/lib/rpm-state/docker-is-active > /dev/null 2>&1 || :",
      "",
      "    # check if docker service is running",
      "    if systemctl is-active docker > /dev/null 2>&1; then",
      "        systemctl stop docker > /dev/null 2>&1 || :",
      "        touch /var/lib/rpm-state/docker-is-active > /dev/null 2>&1 || :",
      "    fi",
      "fi",
      "postinstall scriptlet (using /bin/sh):",
      "",
      "if [ $1 -eq 1 ] ; then",
      "        # Initial installation",
      "        systemctl preset docker >/dev/null 2>&1 || :",
      "fi",
      "",
      "if ! getent group docker > /dev/null; then",
      "    groupadd --system docker",
      "fi",
      "if [ $1 -eq 1 ]; then",
      "    # For a new install only, if /var/lib/docker is (or will be) mounted on",
      "    # xfs with ftype == 0 then force 'devicemapper' (orabug: 25995797)",
      "    for m in /var/lib/docker /var/lib ; do",
      "        if [ -d $m ] ; then",
      "            if [ $(stat -f -c %T $m) == xfs ] && /sbin/xfs_info $m | grep --quiet 'ftype=0' ; then",
      "                cat << EOF >> //etc/sysconfig/docker-storage",
      "DOCKER_STORAGE_OPTIONS= --storage-driver devicemapper --storage-opt dm.basesize=25G",
      "EOF",
      "            fi",
      "            break",
      "        fi",
      "    done",
      "fi",
      "preuninstall scriptlet (using /bin/sh):",
      "",
      "if [ $1 -eq 0 ] ; then",
      "        # Package removal, not upgrade",
      "        systemctl --no-reload disable docker > /dev/null 2>&1 || :",
      "        systemctl stop docker > /dev/null 2>&1 || :",
      "fi",
      "postuninstall scriptlet (using /bin/sh):",
      "",
      "systemctl daemon-reload >/dev/null 2>&1 || :",
      "if [ $1 -ge 1 ] ; then",
      "        # Package upgrade, not uninstall",
      "        systemctl try-restart docker >/dev/null 2>&1 || :",
      "fi",
      "posttrans scriptlet (using /bin/sh):",
      "if [ $1 -ge 0 ] ; then",
      "    # package upgrade scenario, after new files are installed",
      "    # check if docker was running before upgrade",
      "    if [ -f /var/lib/rpm-state/docker-is-active ]; then",
      "        systemctl start docker > /dev/null 2>&1 || :",
      "        rm -f /var/lib/rpm-state/docker-is-active > /dev/null 2>&1 || :",
      "    fi",
      "fi",
      ""
    ],
    "output": "",
    "description": [
      "List the package specific scriptlet(s) that are used as part of the installation and uninstallation processes."
    ],
    "language": "bash",
    "tags": [
      "package"
    ]
  },
  {
    "id": 392,
    "title": "echo text N times ",
    "created": "2022-08-31T06:24:56Z",
    "modified": "2022-08-31T06:24:56Z",
    "code": [
      "echo text{,,,,,,,,,,}"
    ],
    "example": [
      "$ echo boo{,,,,,,,,,,}",
      "boo boo boo boo boo boo boo boo boo boo boo"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 391,
    "title": "draw honeycomb",
    "created": "2022-08-31T01:54:38Z",
    "modified": "2022-08-31T01:54:38Z",
    "code": [
      "yes \"\\\\__/ \" | tr \"\\n\" \" \" | fold -$((($COLUMNS-3)/6*6+3)) | head -$LINES"
    ],
    "example": [
      "$ yes \"\\\\__/ \" | tr \"\\n\" \" \" | fold -$((($COLUMNS-3)/6*6+3)) | head -$LINES",
      "\\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__",
      "/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/",
      "\\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__",
      "/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/",
      "\\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__",
      "/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/",
      "\\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__",
      "/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/",
      "\\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__",
      "/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/",
      "\\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__/  \\__"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 390,
    "title": "get current time in seconds ",
    "created": "2022-08-30T22:58:30Z",
    "modified": "2022-08-30T22:58:30Z",
    "code": [
      "printf '%(%s)T\\n' -1"
    ],
    "example": [
      "$ printf '%(%s)T\\n' -1",
      "1661900157",
      "",
      "$ date --date @1661900157",
      "Tue, Aug 30, 2022  5:55:57 PM"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "date"
    ],
    "url": "https://stackoverflow.com/a/26804450"
  },
  {
    "id": 389,
    "title": "create and delete temp directory",
    "created": "2022-08-30T19:36:32Z",
    "modified": "2022-08-30T19:36:32Z",
    "code": [
      "dir=$(mktemp -d dist.XXXXXX)",
      "trap 'rm -r \"$dir\"' EXIT"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 388,
    "title": "Display all established ssh connections",
    "created": "2022-08-30T18:56:59Z",
    "modified": "2022-08-30T18:58:07Z",
    "code": [
      "ss -o state established '( dport = :ssh or sport = :ssh )'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "network"
    ]
  },
  {
    "id": 387,
    "title": "netsh - loop over ip4 to display network information",
    "created": "2022-08-24T15:50:15Z",
    "modified": "2022-08-27T16:29:15Z",
    "code": [
      "netsh interface ipv4 show | grep show awk '{print $2}' | xargs -I %  netsh interface ipv4 show %"
    ],
    "example": "",
    "output": "",
    "description": [
      "Netsh interacts with other operating system components by using dynamic-link library (DLL) files.",
      "",
      "Each netsh helper DLL provides an extensive set of features called a context, which is a group of commands specific to a networking server role or feature. These contexts extend the functionality of netsh by providing configuration and monitoring support for one or more services, utilities, or protocols. For example, Dhcpmon.dll provides netsh with the context and set of commands necessary to configure and manage DHCP servers."
    ],
    "language": "cmd",
    "tags": [
      "windows"
    ],
    "url": "https://docs.microsoft.com/en-us/windows-server/networking/technologies/netsh/netsh-contexts"
  },
  {
    "id": 386,
    "title": "yum update security",
    "created": "2022-08-23T09:43:16Z",
    "modified": "2022-08-23T09:43:16Z",
    "code": [
      "YUM_OPTIONS=\"--disablerepo=* --enablerepo=OEL*,*KernelCare*,AppStream*\"",
      "yum ${YUM_OPTIONS}  check-update",
      "",
      "yum ${YUM_OPTIONS} repolist",
      "yum ${YUM_OPTIONS} updateinfo list installed cves",
      "yum ${YUM_OPTIONS} updateinfo list installed",
      "",
      "yum ${YUM_OPTIONS} update --security"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 385,
    "title": "example showing locale set between \"C\" and en_US.UTF-8",
    "created": "2022-08-23T00:00:00Z",
    "modified": "2022-08-23T00:00:00Z",
    "code": [
      "$ cat letters.txt",
      "b",
      "B",
      "A",
      "c",
      "a",
      "C",
      "D",
      "d",
      "",
      "$ LC_ALL=en_US.UTF-8 sort letters.txt",
      "a",
      "A",
      "b",
      "B",
      "c",
      "C",
      "d",
      "D",
      "",
      "$ LC_ALL=\"C\" sort letters.txt",
      "A",
      "B",
      "C",
      "D",
      "a",
      "b",
      "c",
      "d",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://www.baeldung.com/linux/locale-environment-variables"
  },
  {
    "id": 384,
    "title": "simple token generator ",
    "created": "2022-08-16T20:26:00Z",
    "modified": "2022-08-16T20:26:00Z",
    "code": [
      "$ SALTSTRING=cheeseburger",
      "$ openssl dgst -sha256 -hex <<<$(date +\"%F %R $SALTSTRING\") | awk '{print $NF}' | tr -d '[:alpha:]' | fold -w 8"
    ],
    "example": [
      "$ SALTSTRING=cheeseburger",
      "",
      "$ openssl dgst -sha256 -hex <<<\"2022-08-16 15:01 $SALTSTRING\" | awk '{print $NF}' | tr -d '[:alpha:]' | fold -w 8",
      "73816926",
      "43397403",
      "41100632",
      "13609020",
      "0645",
      "",
      "$ openssl dgst -sha256 -hex <<<\"2022-08-16 15:02 $SALTSTRING\" | awk '{print $NF}' | tr -d '[:alpha:]' | fold -w 8",
      "22925011",
      "82509108",
      "66225886",
      "18866601",
      "20812403",
      "4",
      "",
      "$ openssl dgst -sha256 -hex <<<\"2022-08-16 15:03 $SALTSTRING\" | awk '{print $NF}' | tr -d '[:alpha:]' | fold -w 8",
      "18656842",
      "29196327",
      "42914225",
      "71621410",
      "70189482"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "security"
    ]
  },
  {
    "id": 383,
    "title": "sed - extract lines between two tags",
    "created": "2022-08-16T20:01:15Z",
    "modified": "2022-08-16T20:01:15Z",
    "code": [
      "# include tags",
      "sed -n '/<tag/,/<\\/tag/ p'",
      "",
      "# get inner lines only",
      "sed -n '/<ul/,/<\\/ul/ {//! p}' "
    ],
    "example": [
      "## include tag",
      "$ sed -n '/<ul/,/<\\/ul/ p' <<EOF",
      "> <p>ignored text</p>",
      "> <ul>",
      ">   <li>one</li>",
      ">   <li>two</li>",
      "> </ul>",
      "> <span>also ignored</span>",
      "> EOF",
      "",
      "<ul>",
      "  <li>one</li>",
      "  <li>two</li>",
      "</ul>",
      "",
      "## do not include tag",
      "$ sed -n '/<ul/,/<\\/ul/ {//! p}' <<EOF",
      "> <p>ignored text</p>",
      "> <ul>",
      ">   <li>one</li>",
      ">   <li>two</li>",
      "> </ul>",
      "> <span>also ignored</span>",
      "> EOF",
      "",
      "  <li>one</li>",
      "  <li>two</li>",
      "",
      "",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "text",
      "text-processing"
    ],
    "url": "https://stackoverflow.com/a/52957039"
  },
  {
    "id": 382,
    "title": "list local certificates",
    "created": "2022-08-16T03:10:50Z",
    "modified": "2022-08-16T03:10:50Z",
    "code": [
      "get-childitem cert:\\LocalMachine\\My",
      "get-childitem cert:\\LocalMachine",
      "get-childitem cert:\\LocalMachine\\Root | FL *",
      "get-childitem cert:\\LocalMachine\\\"AAD Token Issuer\"",
      "get-childitem cert:\\LocalMachine\\CA",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": [
      "security"
    ],
    "url": "https://murrahjm.github.io/Cyberark-Credential-Lookup/"
  },
  {
    "id": 381,
    "title": "date - get seconds at 00:00:00 for date",
    "created": "2022-08-16T00:07:08Z",
    "modified": "2022-08-16T00:07:08Z",
    "code": [
      "date -d \"$(date +%F)\" +%s",
      ""
    ],
    "example": [
      "$ date -d \"$(date +%F)\" +%s",
      "1660539600",
      "",
      "$ date --date @1660539600",
      "Mon Aug 15 00:00:00 CDT 2022"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "date"
    ],
    "url": "https://stackoverflow.com/a/12365345"
  },
  {
    "id": 380,
    "title": "generate ansible-vault like hash",
    "created": "2022-08-13T01:56:25Z",
    "modified": "2022-08-13T01:56:25Z",
    "code": [
      "$ openssl passwd -5 -salt VAULT  password",
      "$5$VAULT$QuHvYEpH9XsW9SVsKimTvMdRykrd2g3UiAi.fO7MAhB",
      ""
    ],
    "example": [
      "$ openssl passwd -5 -salt VAULT  password",
      "$5$VAULT$QuHvYEpH9XsW9SVsKimTvMdRykrd2g3UiAi.fO7MAhB",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 379,
    "title": "jq - download and extract all the files from a gist",
    "created": "2022-08-12T00:55:50Z",
    "modified": "2022-08-31T00:17:00Z",
    "code": [
      "eval \"$(",
      "  curl -s https://api.github.com/gists/b787f3e14f28de11af45b1c7ec0ffbbc|",
      "    jq -r '.files | to_entries | .[].value | @sh \"echo \\(.content) | tee \\(.filename)\"'",
      ")\"",
      ""
    ],
    "example": [
      "eval \"$(",
      "  curl https://api.github.com/gists/968b8937a153127cfae4a173b6000c1e |",
      "  jq -r '",
      "    .files |",
      "    to_entries |",
      "    .[].value |",
      "    @sh \"echo \\(.content) > \\(.filename)\"",
      "  '",
      ")\""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "jq"
    ],
    "url": "https://remysharp.com/drafts/jq-recipes"
  },
  {
    "id": 378,
    "title": "find and remove files older than date",
    "created": "2022-08-11T21:57:50Z",
    "modified": "2022-08-11T21:57:50Z",
    "code": [
      "find /tmp -mindepth 1 -maxdepth 1  ! -newermt 2022-01-01 -print -exec rm -rf {} \\;"
    ],
    "example": [
      "$ find /tmp -mindepth 1 -maxdepth 1 ! -newermt 2022-01-01 -exec stat --format \"%y %n\" {} \\; | sort -d -k1",
      "2021-03-04 11:40:12.525347586 -0600 /tmp/.ansible",
      "2021-03-20 08:51:12.445834894 -0500 /tmp/.font-unix",
      "2021-03-20 08:51:12.448834945 -0500 /tmp/.Test-unix",
      "2021-03-20 08:51:12.451834996 -0500 /tmp/.XIM-unix",
      "2021-03-20 08:51:12.457835097 -0500 /tmp/.ICE-unix",
      "2021-03-20 08:51:12.457835097 -0500 /tmp/.X11-unix",
      "2021-03-31 10:53:10.505459599 -0500 /tmp/b5b68738-2d63-4a92-9e3f-d92467eb9619",
      "2021-03-31 10:57:15.955632797 -0500 /tmp/.xrdp",
      "2021-03-31 11:00:16.843881677 -0500 /tmp/b3b3a754-be2b-48ea-a50f-b7e0787ae131",
      "2021-03-31 11:01:15.547215168 -0500 /tmp/6e6cc719-3dc5-4aaf-823e-749da74fe810",
      "2021-03-31 11:01:35.650224061 -0500 /tmp/6e7036e8-bcfa-4035-8906-5bb7bc0436de",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "filesys"
    ]
  },
  {
    "id": 377,
    "title": "bash - get last N characters",
    "created": "2022-08-10T01:03:34Z",
    "modified": "2022-08-10T01:03:34Z",
    "code": [
      "name=\"Annie Tran\"",
      "echo ${name: -3}",
      ""
    ],
    "example": [
      "$ name=\"Annie Tran\"",
      "",
      "$ echo ${name: -3}",
      "ran",
      "",
      "$ echo ${name: 3}",
      "ie Tran",
      "",
      "$ echo ${name:0:3}",
      "Ann",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 376,
    "title": "prune example to filter files in .git/**",
    "created": "2022-08-09T21:02:41Z",
    "modified": "2022-08-09T21:02:41Z",
    "code": [
      "find . -type d -name \".git*\" -prune -o -type f"
    ],
    "example": [
      "$ find . -type d -name \".git*\" -prune -o -maxdepth 2 -type f"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "filesys"
    ],
    "url": "https://stackoverflow.com/a/1489405/7460613"
  },
  {
    "id": 375,
    "title": "sed - delete lines between html tags",
    "created": "2022-08-06T03:47:55Z",
    "modified": "2022-08-06T03:47:55Z",
    "code": [
      "# delete lines between tags leaving tags:",
      "sed '/<script>/,/<\\/script>/{//!d}' ",
      "",
      "# delete all lines between tags including tags:",
      "sed '/<script>/,/<\\/script>/d'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "text"
    ],
    "url": "https://stackoverflow.com/a/29530617"
  },
  {
    "id": 374,
    "title": "awk - trim leading and trailing whitespace",
    "created": "2022-08-05T19:00:13Z",
    "modified": "2022-08-05T19:00:13Z",
    "code": [
      "awk '{$1=$1};1'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "text"
    ],
    "url": "https://unix.stackexchange.com/a/205854"
  },
  {
    "id": 373,
    "title": "cleanup git folder ",
    "created": "2022-08-03T08:52:25Z",
    "modified": "2022-08-03T08:52:25Z",
    "code": [
      "git reflog expire --expire=now --all",
      "git repack -ad  # Remove dangling objects from packfiles",
      "git prune       # Remove dangling loose objects"
    ],
    "example": "",
    "output": "",
    "description": [
      "If you added the files and then removed them, the blobs still exist but are dangling. git fsck will list unreachable blobs, and git prune will delete them.",
      "",
      "If you added the files, committed them, and then rolled back with `git reset --hard HEAD^`, they’re stuck a little deeper. `git fsck` will not list any dangling commits or blobs, because your branch’s reflog is holding onto them. ",
      "",
      "Here’s one way to ensure that only objects which are in your history proper will remain:",
      "",
      "git reflog expire --expire=now --all",
      "git repack -ad  # Remove dangling objects from packfiles",
      "git prune       # Remove dangling loose objects",
      "",
      "Another way is also to clone the repository, as that will only carry the objects which are reachable. However, if the dangling objects got packed (and if you performed many operations, git may well have packed automatically), then a local clone will carry the entire packfile:",
      "",
      "git clone foo bar                 # bad",
      "git clone --no-hardlinks foo bar  # also bad",
      "",
      "You must specify a protocol to force git to compute a new pack:",
      "",
      "git clone file://foo bar  # good",
      "",
      "",
      "---",
      "URL: https://stackoverflow.com/a/5277575"
    ],
    "language": "bash",
    "tags": [
      "git"
    ],
    "url": "https://stackoverflow.com/a/5277575"
  },
  {
    "id": 372,
    "title": "git reset - basic undo",
    "created": "2022-08-03T06:46:43Z",
    "modified": "2022-08-03T06:46:43Z",
    "code": [
      "# undo `git commit`",
      "git reset --soft HEAD^",
      "",
      "# undo `git add`",
      "#    *  will untrack new files",
      "git reset HEAD ."
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "security",
      "git"
    ]
  },
  {
    "id": 371,
    "title": "pygmentize - create css file",
    "created": "2022-08-01T20:48:56Z",
    "modified": "2022-08-01T20:48:56Z",
    "code": [
      "STYLE=css",
      "pygmentize -S $STYLE-f html -a .highlight >default.css"
    ],
    "example": [
      "echo \"<style>",
      "$(pygmentize -S material -f html -a .highlight)",
      "*:after,*:before,*{box-sizing:border-box}",
      "html,body{padding:0;margin:0;width:100%;overflow-x;hidden;}",
      "pre{padding:1em;width:80%;margin:auto}",
      "</style>",
      "<body>",
      "<h1>$INPUT_FILE</h1>",
      "$(pygmentize -g $INPUT_FILE -f html)",
      "</body>",
      "\""
    ],
    "output": "",
    "description": [
      "use $ pygmentize -L styles to view possible styles ",
      "",
      "`default`, `emacs`, `friendly`, `friendly`, `grayscale`, `colorful`, `autumn`, `murphy`, `manni`, `material`, `monokai`, `perldoc`, `pastie`, `borland`, `trac`, `native`, `fruity`, `bw`, `vim`, `vs`, `tango`, `rrt`, `xcode`, `igor`, `paraiso`, `light`, `paraiso`, `dark`, `lovelace`, `algol`, `algol`, `nu`, `arduino`, `rainbow`, `dash`, `abap`, `solarized`, `dark`, `solarized`, `light`, `sas`, `stata`, `stata`, `light`, `stata`, `dark`, `inkpot`, `zenburn`, `gruvbox`, `dark`, `gruvbox`, `light`, `dracula`, `one`, `dark`, `lilypond`"
    ],
    "language": "bash",
    "tags": []
  },
  {
    "id": 370,
    "title": "Format-Table -GroupBy - Format processes by BasePriority",
    "created": "2022-07-29T23:50:49Z",
    "modified": "2022-07-29T23:50:49Z",
    "code": [
      "Get-Process | Sort-Object -Property BasePriority | Format-Table -GroupBy BasePriority -Wrap"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": [],
    "url": "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/format-table?view=powershell-7.2#example-2-format-processes-by-basepriority"
  },
  {
    "id": 369,
    "title": "Get-ADUser - get last password set for service accounts",
    "created": "2022-07-29T23:43:23Z",
    "modified": "2022-07-29T23:43:23Z",
    "code": [
      "Get-ADUser -Filter \"ownerID -eq 123456 -and employeeType -like 'Service'\"  -Properties * | FT  Name,PasswordLastSet"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": [
      "AD",
      "ActiveDirectory"
    ]
  },
  {
    "id": 367,
    "title": "pandoc - for loop to convert files",
    "created": "2022-07-23T15:22:11Z",
    "modified": "2022-07-23T15:22:11Z",
    "code": [
      "for f in *.html; do pandoc \"$f\" -t markdown_mmd-raw_html -o \"${f%.*}.md\"; done"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 366,
    "title": "get source of minified javascript script",
    "created": "2022-07-22T23:31:43Z",
    "modified": "2022-07-22T23:31:43Z",
    "code": [
      "cat file.js.map | tr -d '\\r' | jq -cr '.sourcesContent[]'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 365,
    "title": "dstat - get expensive processes",
    "created": "2022-07-22T21:55:25Z",
    "modified": "2022-07-22T21:55:25Z",
    "code": [
      "dstat -tcndylp --top-cpu"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 364,
    "title": "openssl enc -encoding with iter",
    "created": "2022-07-22T21:53:10Z",
    "modified": "2022-07-22T21:53:10Z",
    "code": [
      "$ echo \"password\" | openssl enc -aes256 -k passphrase_aka_salt -base64 -iter 1000",
      "U2FsdGVkX18vCTkI4x3csNp2FERhbXWY6HNSpyshkRY=",
      "",
      "$ echo \"U2FsdGVkX18vCTkI4x3csNp2FERhbXWY6HNSpyshkRY=\" | openssl enc -aes256 -k passphrase_aka_salt -base64 -iter 1000 -d",
      "password",
      ""
    ],
    "example": [
      "$ echo -n \"password\" | openssl enc -aes256 -k salt -base64 -iter 1000",
      "U2FsdGVkX18iY8nu2te4KoNXSYW7hzDaCN2uOSQVm6w=",
      "",
      "$ echo 'U2FsdGVkX18iY8nu2te4KoNXSYW7hzDaCN2uOSQVm6w=' | openssl enc -d -aes256 -k salt -base64 -iter 1000",
      "password"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "security"
    ]
  },
  {
    "id": 363,
    "title": "openssl-s_client, s_client - SSL/TLS client program",
    "created": "2022-07-20T19:29:59Z",
    "modified": "2022-07-20T19:39:37Z",
    "code": [
      "echo -n | openssl s_client -connect $HOSTNAME:443"
    ],
    "example": [
      "$ echo -n | openssl s_client -connect api.github.com:443|tee /dev/clipboard"
    ],
    "output": "",
    "description": [
      "The s_client command implements a generic SSL/TLS client which connects to a remote host using SSL/TLS. It is a very useful diagnostic tool for SSL servers."
    ],
    "language": "bash",
    "tags": [
      "security"
    ]
  },
  {
    "id": 362,
    "title": "curl awx - view api ",
    "created": "2022-07-18T23:08:37Z",
    "modified": "2022-07-20T19:40:34Z",
    "code": [
      "curl -s -k -u \"admin:password\" https://awxserver.example.com/api/v2/me/ | python -m json.tool",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "awx",
      "api"
    ]
  },
  {
    "id": 361,
    "title": "zip - create zip file from list piped in stdin",
    "created": "2022-07-14T17:25:09Z",
    "modified": "2022-07-14T17:25:09Z",
    "code": [
      "<list of files> | zip name.zip --names-stdin"
    ],
    "example": [
      "# zip files smaller than 2M",
      "find /var/log -type f -not -size +2M | zip name.zip --names-stdin",
      "",
      "# zip only shell scripts",
      "ls -1 *.sh | zip shell-files.zip --names-stdin"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 360,
    "title": "set allexport - sourcing key/value .env files (without prefixing export)",
    "created": "2022-07-11T23:53:42Z",
    "modified": "2022-07-11T23:53:42Z",
    "code": [
      "set -o allexport",
      "source .env",
      "set +o allexport"
    ],
    "example": "",
    "output": "",
    "description": [
      "`-o allexport` enables all following variable definitions to be exported. ",
      "`+o allexport` disables this feature.",
      "",
      "easy way for sourcing key/value environment files "
    ],
    "language": "bash",
    "tags": [
      "environment"
    ],
    "url": "https://stackoverflow.com/a/30969768"
  },
  {
    "id": 359,
    "title": "github release api - upload asset file",
    "created": "2022-07-09T18:11:46Z",
    "modified": "2022-07-09T18:11:46Z",
    "code": [
      "curl -H \"Authorization: token $GITHUB_TOKEN\" \\",
      "  -H \"Content-Type: $(file -b --mime-type $FILE)\" \\",
      "  --data-binary @$FILE \\",
      "  \"https://uploads.github.com/repos/$GITHUB_OWNER/$GITHUB_REPO/releases/$GITHUB_RELEASE/assets?name=$(basename $FILE)\""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "api"
    ],
    "url": "https://stackoverflow.com/a/40216228"
  },
  {
    "id": 358,
    "title": "docker -  get IP address of a running container",
    "created": "2022-07-07T16:20:12Z",
    "modified": "2022-07-07T16:20:12Z",
    "code": [
      "docker inspect --format '{{range .NetworkSettings.Networks}} {{.IPAddress}} {{end}}' $CONTAINER_NAME"
    ],
    "example": [
      "$ docker inspect --format '{{range .NetworkSettings.Networks}} {{.IPAddress}} {{end}}' awx_web",
      "172.24.0.4",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "docker"
    ]
  },
  {
    "id": 357,
    "title": "awx_postgres - get hostname ids for api",
    "created": "2022-07-05T17:36:16Z",
    "modified": "2022-07-05T17:36:16Z",
    "code": [
      "docker exec -it awx_postgres /bin/bash \\",
      "  -c 'psql -t -A -F \",\" -U awx -d awx -c \"select id,name from main_host;\"|cat'",
      "",
      "psql -t -A -F \",\" -U awx -d awx -c \"select id,name from main_host;\"|cat"
    ],
    "example": [
      "$ psql -t -A -F \",\" -U awx -d awx -c \"select id,name from main_host;\"|cat",
      "4611,server10.amer.example.com",
      "4613,server11.us.example.com",
      "4614,server12.us.example.com",
      "5311,server13.us.example.com",
      ""
    ],
    "output": "",
    "description": [
      "https://awxserver.example.com/api/v2/hosts/<ID>/",
      "https://awxserver.example.com/api/v2/hosts/4613/"
    ],
    "language": "sql",
    "tags": [
      "db",
      "ansible",
      "docker",
      "api"
    ]
  },
  {
    "id": 356,
    "title": "ansible setup module - adhoc command for gathering facts",
    "created": "2022-07-05T16:12:08Z",
    "modified": "2022-07-05T16:19:14Z",
    "code": [
      "# Display facts from all hosts and store them indexed by I(hostname) at C(/tmp/facts).",
      "# ansible all -m setup --tree /tmp/facts",
      "",
      "# Display only facts regarding memory found by ansible on all hosts and output them.",
      "# ansible all -m setup -a 'filter=ansible_*_mb'",
      "",
      "# Display only facts returned by facter.",
      "# ansible all -m setup -a 'filter=facter_*'",
      "",
      "# Collect only facts returned by facter.",
      "# ansible all -m setup -a 'gather_subset=!all,!any,facter'",
      "",
      "# Display only facts about certain interfaces.",
      "# ansible all -m setup -a 'filter=ansible_eth[0-2]'",
      "",
      "# Restrict additional gathered facts to network and virtual (includes default minimum facts)",
      "# ansible all -m setup -a 'gather_subset=network,virtual'",
      "",
      "# Collect only network and virtual (excludes default minimum facts)",
      "# ansible all -m setup -a 'gather_subset=!all,!any,network,virtual'",
      "",
      "# Do not call puppet facter or ohai even if present.",
      "# ansible all -m setup -a 'gather_subset=!facter,!ohai'",
      "",
      "# Only collect the default minimum amount of facts:",
      "# ansible all -m setup -a 'gather_subset=!all'",
      "",
      "# Collect no facts, even the default minimum subset of facts:",
      "# ansible all -m setup -a 'gather_subset=!all,!min'",
      "",
      "# Display facts from Windows hosts with custom facts stored in C(C:\\\\custom_facts).",
      "# ansible windows -m setup -a \"fact_path='c:\\\\custom_facts'\""
    ],
    "example": "",
    "output": "",
    "description": [
      "-   More ansible facts will be added with successive releases. If facter or ohai are installed, variables from these programs will also be snapshotted into the JSON file for usage in templating. These variables are prefixed with facter_ and ohai_ so it's easy to tell their source. All variables are bubbled up to the caller. Using the ansible facts and choosing to not install facter and ohai means you can avoid Ruby-dependencies on your remote systems. (See also facter and ohai.)",
      "-   The filter option filters only the first level subkey below ansible_facts.",
      "-   If the target host is Windows, you will not currently have the ability to use filter as this is provided by a simpler implementation of the module.",
      "-   If the target host is Windows you can now use fact_path. Make sure that this path exists on the target host. Files in this path MUST be PowerShell scripts (*.ps1) and their output must be formattable in JSON (Ansible will take care of this). Test the output of your scripts. This option was added in Ansible 2.1.",
      "-   This module is also supported for Windows targets.",
      "-   This module should be run with elevated privileges on BSD systems to gather facts like ansible_product_version.",
      ""
    ],
    "language": "bash",
    "tags": [
      "ansible"
    ],
    "url": "https://docs.w3cub.com/ansible~2.9/modules/setup_module"
  },
  {
    "id": 355,
    "title": "docker format results",
    "created": "2022-07-05T03:02:13Z",
    "modified": "2022-07-05T03:02:13Z",
    "code": [
      "docker ps --format \"{{json .}}\""
    ],
    "example": [
      "$ docker inspect --format='{{json .NetworkSettings}}' awx_task | jq",
      "{",
      "  \"Bridge\": \"\",",
      "  \"SandboxID\": \"d5d2b82b35d9849fd33ca3335721af8cc1cc5a277df12cf31fee81a0291942b2\",",
      "  \"HairpinMode\": false,",
      "  \"LinkLocalIPv6Address\": \"\",",
      "  \"LinkLocalIPv6PrefixLen\": 0,",
      "  \"Ports\": {",
      "    \"8052/tcp\": null",
      "  },",
      "  \"SandboxKey\": \"/var/run/docker/netns/d5d2b82b35d9\",",
      "  \"SecondaryIPAddresses\": null,",
      "  \"SecondaryIPv6Addresses\": null,",
      "  \"EndpointID\": \"\",",
      "  \"Gateway\": \"\",",
      "  \"GlobalIPv6Address\": \"\",",
      "  \"GlobalIPv6PrefixLen\": 0,",
      "  \"IPAddress\": \"\",",
      "  \"IPPrefixLen\": 0,",
      "  \"IPv6Gateway\": \"\",",
      "  \"MacAddress\": \"\",",
      "  \"Networks\": {",
      "    \"awxcompose_default\": {",
      "      \"IPAMConfig\": null,",
      "      \"Links\": null,",
      "      \"Aliases\": [",
      "        \"task\",",
      "        \"328c8d3ce273\"",
      "      ],",
      "      \"NetworkID\": \"a92c7453699dd5b657cdf5b0b1ee4ffdc0ba2f9ae5f9c6212356285b85da0b1a\",",
      "      \"EndpointID\": \"d273d879f26644f56970777b8af082c600fadf818f7c6c0d3f6fd5cce2a348ae\",",
      "      \"Gateway\": \"172.20.0.1\",",
      "      \"IPAddress\": \"172.20.0.5\",",
      "      \"IPPrefixLen\": 16,",
      "      \"IPv6Gateway\": \"\",",
      "      \"GlobalIPv6Address\": \"\",",
      "      \"GlobalIPv6PrefixLen\": 0,",
      "      \"MacAddress\": \"02:42:ac:14:00:05\",",
      "      \"DriverOpts\": null",
      "    }",
      "  }",
      "}",
      "",
      ""
    ],
    "output": "",
    "description": [
      "To inspect containers:",
      "",
      "docker container inspect <container>",
      "docker inspect <container>",
      "",
      "This displays detailed information for a container, including the following:",
      "",
      "ID - the full unique identifier of the container.",
      "",
      "Image - the image the container is running.",
      "",
      "NetworkSettings - the network information including the Ports, IPAddress, and any Aliases.",
      "",
      "LogPath - the file system path to the container's log file.",
      "",
      "Volumes - displays any volume mappings between the host system and the container.",
      "",
      "WorkingDir - this is where you are dropped when running an interactive shell in the container."
    ],
    "language": "bash",
    "tags": [
      "docker"
    ],
    "url": "https://doc.sitecore.com/xp/en/developers/101/developer-tools/sitecore-docker-cheat-sheet.html"
  },
  {
    "id": 354,
    "title": "openssl-dgst - hash salted password",
    "created": "2022-07-01T16:11:33Z",
    "modified": "2022-07-01T16:11:33Z",
    "code": [
      "echo -n \"$salt$password\" | openssl dgst -r -sha1"
    ],
    "example": [
      "$ salt=salt",
      "$ password=password",
      "$ echo -n \"$salt$password\" | openssl dgst -r -sha1",
      "59b3e8d637cf97edbe2384cf59cb7453dfe30789 *stdin"
    ],
    "output": "",
    "description": [
      "$ man openssl-dgst",
      "",
      "  The digest mechanisms that are available will depend on the options used when building",
      "  OpenSSL.  The list digest-commands command can be used to list them.",
      "",
      "  New or agile applications should use probably use SHA-256. Other digests, particularly",
      "  SHA-1 and MD5, are still widely used for interoperating with existing formats and",
      "  protocols.",
      "",
      "  When signing a file, dgst will automatically determine the algorithm (RSA, ECC, etc) to",
      "  use for signing based on the private key's ASN.1 info.  When verifying signatures, it",
      "  only handles the RSA, DSA, or ECDSA signature itself, not the related data to identify",
      "  the signer and algorithm used in formats such as x.509, CMS, and S/MIME.",
      "",
      "  A source of random numbers is required for certain signing algorithms, in particular",
      "  ECDSA and DSA.",
      "",
      "  The signing and verify options should only be used if a single file is being signed or",
      "  verified.",
      "",
      "  Hex signatures cannot be verified using openssl.  Instead, use \"xxd -r\" or similar",
      "  program to transform the hex signature into a binary signature prior to verification."
    ],
    "language": "bash",
    "tags": [
      "security"
    ],
    "url": "https://stackoverflow.com/a/11709348"
  },
  {
    "id": 353,
    "title": "python one liner - return hashed password as a string",
    "created": "2022-07-01T06:13:22Z",
    "modified": "2022-07-01T06:13:22Z",
    "code": [
      "python -c 'import crypt; print(crypt.crypt(\"This is my Password\", \"$1$SomeSalt$\"))'"
    ],
    "example": [
      "python -c 'import crypt; print(crypt.crypt(\"This is my Password\", \"$1$SomeSalt$\"))'",
      "$1$SomeSalt$UqddPX3r4kH3UL5jq5/ZI."
    ],
    "output": "",
    "description": [
      "crypt.crypt(word, salt=None)",
      "",
      "word will usually be a user’s password as typed at a prompt or in a graphical interface. The optional salt is either a string as returned from mksalt(), one of the crypt.METHOD_* values (though not all may be available on all platforms), or a full encrypted password including salt, as returned by this function. If salt is not provided, the strongest method available in methods will be used.",
      "",
      "Checking a password is usually done by passing the plain-text password as word and the full results of a previous crypt() call, which should be the same as the results of this call.",
      "",
      "salt (either a random 2 or 16 character string, possibly prefixed with $digit$ to indicate the method) which will be used to perturb the encryption algorithm. The characters in salt must be in the set [./a-zA-Z0-9], with the exception of Modular Crypt Format which prefixes a $digit$.",
      "",
      "Returns the hashed password as a string, which will be composed of characters from the same alphabet as the salt.",
      ""
    ],
    "language": "python",
    "tags": [],
    "url": "https://docs.python.org/3/library/crypt.html#crypt.crypt"
  },
  {
    "id": 352,
    "title": "document.documentElement.scrollTop - scroll to top of page",
    "created": "2022-06-30T05:53:21Z",
    "modified": "2022-06-30T05:53:21Z",
    "code": [
      "function setScrollTopForDocument(doc = document, value = 0) {",
      "  doc.documentElement.scrollTop = doc.body.scrollTop = value",
      "}",
      ""
    ],
    "example": [
      "/**",
      " * Alias for document.scrollTop setter.",
      " * @param {!HTMLDocument} doc The document node where information will be",
      " *     queried from.",
      " * @param {number} value The target Y scroll offset.",
      " */",
      "export function setScrollTopForDocument(doc, value) {",
      "  doc.documentElement.scrollTop = doc.body.scrollTop = value;",
      "}",
      ""
    ],
    "output": "",
    "description": "",
    "language": "javascript",
    "tags": [
      "dom"
    ]
  },
  {
    "id": 351,
    "title": "last reboot -  list of the times and dates when the system was recently rebooted",
    "created": "2022-06-30T04:15:30Z",
    "modified": "2022-06-30T04:15:30Z",
    "code": [
      "last reboot"
    ],
    "example": [
      "$ last reboot",
      "reboot   system boot  5.4.17-2136.304. Thu Jun 16 04:46 - 23:09 (13+18:23)",
      "reboot   system boot  5.4.17-2136.304. Wed Jun 15 16:41 - 09:45  (17:04)",
      "reboot   system boot  5.4.17-2136.304. Mon Jun  6 07:03 - 21:40 (9+14:37)",
      "reboot   system boot  5.4.17-2136.304. Fri Jun  3 13:36 - 12:02 (2+22:26)",
      "reboot   system boot  5.4.17-2136.304. Thu Jun  2 09:55 - 18:35 (1+08:40)",
      "",
      "wtmp begins Wed Jun  1 09:54:13 2022",
      "",
      ""
    ],
    "output": "",
    "description": [
      "To get a list of the times and dates when the system was recently rebooted, give `reboot' as an argument to last (see Listing the Last Times a User Logged In).",
      "",
      "To output a list of times when the system was rebooted, type:",
      "$ last reboot [RET]",
      "",
      "NOTE: An operating system capable of running constantly for a long time without crashes or freeze-ups is a good one, and so having a high uptime value is a matter of pride for many Linux users. It is not uncommon to hear of systems that have been running for months and sometimes even years non-stop -- one Linux administrator reported on the Internet about one of his work systems, which had been running continuously without reboot for three years!"
    ],
    "language": "bash",
    "tags": []
  },
  {
    "id": 350,
    "title": "MemAvailable - memory tracker: get reclaimable memory from /proc/meminfo",
    "created": "2022-06-30T02:10:32Z",
    "modified": "2022-06-30T04:15:38Z",
    "code": [
      "awk '/^MemAvailable:/ {print $2}' /proc/meminfo"
    ],
    "example": "",
    "output": "",
    "description": [
      "MemAvailable is the best estimation and has built-in heuristics",
      "around reclaimable memory.  However, it is not available until 3.14",
      "kernel (i.e. Ubuntu LTS Trusty misses it).  In that case, we fall",
      "back to free+buffers+cache as the available memory."
    ],
    "language": "bash",
    "tags": [],
    "url": "https://opendev.org/openstack/devstack/src/branch/master/tools/memory_tracker.sh#L39"
  },
  {
    "id": 349,
    "title": "nginx -  common configurations to block sql injections and other attacks",
    "created": "2022-06-29T22:41:01Z",
    "modified": "2022-07-02T04:14:02Z",
    "code": [
      "# common nginx configuration to block sql injection and other attacks",
      "location ~* \"(eval\\()\" {",
      "    deny all;",
      "}",
      "location ~* \"(127\\.0\\.0\\.1)\" {",
      "    deny all;",
      "}",
      "location ~* \"([a-z0-9]{2000})\" {",
      "    deny all;",
      "}",
      "location ~* \"(javascript\\:)(.*)(\\;)\" {",
      "    deny all;",
      "}",
      "",
      "location ~* \"(base64_encode)(.*)(\\()\" {",
      "    deny all;",
      "}",
      "location ~* \"(GLOBALS|REQUEST)(=|\\[|%)\" {",
      "    deny all;",
      "}",
      "location ~* \"(<|%3C).*script.*(>|%3)\" {",
      "    deny all;",
      "}",
      "location ~ \"(\\\\|\\.\\.\\.|\\.\\./|~|`|<|>|\\|)\" {",
      "    deny all;",
      "}",
      "location ~* \"(boot\\.ini|etc/passwd|self/environ)\" {",
      "    deny all;",
      "}",
      "location ~* \"(thumbs?(_editor|open)?|tim(thumb)?)\\.php\" {",
      "    deny all;",
      "}",
      "location ~* \"(\\'|\\\")(.*)(drop|insert|md5|select|union)\" {",
      "    deny all;",
      "}",
      "location ~* \"(https?|ftp|php):/\" {",
      "    deny all;",
      "}",
      "location ~* \"(=\\\\\\'|=\\\\%27|/\\\\\\'/?)\\.\" {",
      "    deny all;",
      "}",
      "location ~ \"(\\{0\\}|\\(/\\(|\\.\\.\\.|\\+\\+\\+|\\\\\\\"\\\\\\\")\" {",
      "    deny all;",
      "}",
      "location ~ \"(~|`|<|>|:|;|%|\\\\|\\s|\\{|\\}|\\[|\\]|\\|)\" {",
      "    deny all;",
      "}",
      "location ~* \"/(=|\\$&|_mm|(wp-)?config\\.|cgi-|etc/passwd|muieblack)\" {",
      "    deny all;",
      "}",
      "",
      "location ~* \"(&pws=0|_vti_|\\(null\\)|\\{\\$itemURL\\}|echo(.*)kae|etc/passwd|eval\\(|self/environ)\" {",
      "    deny all;",
      "}",
      "location ~* \"/(^$|mobiquo|phpinfo|shell|sqlpatch|thumb|thumb_editor|thumbopen|timthumb|webshell|config|settings|configuration)\\.php\" {",
      "    deny all;",
      "}"
    ],
    "example": "",
    "output": "",
    "description": [
      "https://www.acunetix.com/blog/web-security-zone/hardening-nginx/"
    ],
    "language": "nginx",
    "tags": [],
    "url": "https://gist.github.com/nfsarmento/57db5abba08b315b67f174cd178bea88"
  },
  {
    "id": 348,
    "title": "limit_except",
    "created": "2022-06-29T22:37:51Z",
    "modified": "2022-06-30T02:12:56Z",
    "code": [
      "location / { ",
      "    limit_except GET { ",
      "      allow 192.168.1.0/24; ",
      "      deny all; ",
      "    } ",
      "} ",
      ""
    ],
    "example": "",
    "output": "",
    "description": [
      "This directive allows you to prevent the use of all HTTP methods, except the ones that you explicitly allow. Within a location block, you may want to restrict the use of some HTTP methods, such as forbidding clients from sending POST requests. You need to define two elements: first, the methods that are not forbidden (the allowed methods; all others will be forbidden); and second, the audience that is affected by the restriction"
    ],
    "language": "nginx",
    "tags": [],
    "url": "https://www.oreilly.com/library/view/nginx-http-server/9781788623551/75c3c065-0311-4c4c-a191-31fd1e344f78.xhtml"
  },
  {
    "id": 347,
    "title": "python oneliner cryptogen",
    "created": "2022-06-28T04:49:44Z",
    "modified": "2022-06-29T22:37:58Z",
    "code": [
      "python3 -c \"import crypt; print(crypt.crypt(input('clear-text password: '), crypt.mksalt(crypt.METHOD_SHA512)))\""
    ],
    "example": [
      "$   python3 -c \"import crypt; print(crypt.crypt(input('clear-text password: '), crypt.mksalt(crypt.METHOD_SHA512)))\"",
      "clear-text password: hello",
      "$6$8.cZMuvV3mZj3JHW$wADCu1k1DuH4CkodnCXpolIQiUWVAonb0Iiwi5/ayVqPNw.haTdW5jlqiqw/SjGQk04H2SAYw2gBbsAq7nmai0"
    ],
    "output": "",
    "description": "",
    "language": "python",
    "tags": []
  },
  {
    "id": 346,
    "title": "clone gitlab project using project token",
    "created": "2022-06-27T18:54:00Z",
    "modified": "2022-06-27T19:12:07Z",
    "code": [
      "GITLAB_PROJECT_TOKEN=glpat-9eAicfQ9HoLp2ilItrVZ",
      "git clone https://gitlab-ci-token:$GITLAB_PROJECT_TOKEN@gitlab.example.com/path/to/project.git",
      "",
      "git clone -c http.sslVerify=false  https://gitlab-ci-token:$GITLAB_PROJECT_TOKEN@gitlab.example.com/infrastructure/database/devops/tower/inventory.git"
    ],
    "example": [
      "$ git clone https://project_136765_bot:glpat-H5rsFBozrntDhZoLWuC6@gitlab.example.com/infrastructure/database/devops/tower/inventory.git",
      "Cloning into 'inventory'...",
      "fatal: unable to access 'https://gitlab.example.com/infrastructure/database/devops/tower/inventory.git/': SSL certificate problem: self signed certificate in certificate chain",
      "",
      "$ git clone -c http.sslVerify=false  https://project_136765_bot:glpat-H5rsFBozrntDhZoLWuC6@gitlab.example.com/infrastructure/database/devops/tower/inventory.git",
      "Cloning into 'inventory'...",
      "remote: Enumerating objects: 15, done.",
      "remote: Counting objects: 100% (15/15), done.",
      "remote: Compressing objects: 100% (13/13), done.",
      "remote: Total 15 (delta 2), reused 0 (delta 0), pack-reused 0",
      "Unpacking objects: 100% (15/15), 33.34 KiB | 3.33 MiB/s, done."
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "api",
      "git"
    ],
    "url": "https://stackoverflow.com/a/66674205"
  },
  {
    "id": 345,
    "title": "document.cookie - convert key=value string to JSON string",
    "created": "2022-06-24T05:45:06Z",
    "modified": "2022-06-24T05:45:06Z",
    "code": [
      "Object.fromEntries(document.cookie.split('; ').map(e => e.split('=').map((s) => {",
      "  let ret = unescape(decodeURI(s)).replace(/'/g, '\"')",
      "  try {",
      "    ret = JSON.parse(ret)",
      "  } catch (err) {}",
      "  return ret",
      "})))"
    ],
    "example": [
      "> document.cookie",
      "",
      "'pglt-edgeChromium-ntp=129; pglt-edgeChromium-dhp=129; sptmarket=en-us||us|en-us|en-us|en|; _SS=SID=00; MUID=351DE2B987AE61362EB5F37C862060D4; MicrosoftApplicationsTelemetryDeviceId=ff4d450d-7d3f-43ed-a307-c7b9a5edded9; ai_session=pwphoYvaRZgwAq3bBU7MUJ|1656047614115|1656047632593'",
      "",
      "> Object.fromEntries(document.cookie.split('; ').map(e => e.split('=').map((s) => {",
      "  let ret = unescape(decodeURI(s)).replace(/'/g, '\"')",
      "  try {",
      "    ret = JSON.parse(ret)",
      "  } catch (err) {}",
      "  return ret",
      "})))",
      "",
      "{",
      "  \"pglt-edgeChromium-ntp\": 129,",
      "  \"pglt-edgeChromium-dhp\": 129,",
      "  \"sptmarket\": \"en-us||us|en-us|en-us|en|\",",
      "  \"_SS\": \"SID\",",
      "  \"MUID\": \"351DE2B987AE61362EB5F37C862060D4\",",
      "  \"MicrosoftApplicationsTelemetryDeviceId\": \"ff4d450d-7d3f-43ed-a307-c7b9a5edded9\",",
      "  \"ai_session\": \"pwphoYvaRZgwAq3bBU7MUJ|1656047614115|1656047632593\"",
      "}"
    ],
    "output": "",
    "description": "",
    "language": "javascript",
    "tags": [],
    "url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie"
  },
  {
    "id": 344,
    "title": "exec vs eval - process",
    "created": "2022-06-23T20:01:43Z",
    "modified": "2022-06-23T20:01:43Z",
    "code": [
      "# eval",
      "bash -c 'echo $$ ; ls -l /proc/self ; echo foo'",
      "",
      "# exec",
      "bash -c 'echo $$ ; exec ls -l /proc/self ; echo foo'"
    ],
    "example": [
      "$ bash -c 'echo $$ ; ls -l /proc/self ; echo foo'",
      "7218",
      "lrwxrwxrwx 1 root root 0 Jun 30 16:49 /proc/self -> 7219",
      "foo",
      "",
      "$ bash -c 'echo $$ ; exec ls -l /proc/self ; echo foo'",
      "7217",
      "lrwxrwxrwx 1 root root 0 Jun 30 16:49 /proc/self -> 7217"
    ],
    "output": "",
    "description": [
      "exec - Replace the shell with the given command.",
      "eval -  Execute arguments as a shell command.",
      "",
      "What exec cmd does, is exactly the same as just running cmd, except that the current shell is replaced with the command, instead of a separate process being run. ",
      "",
      "```sh",
      "$ bash -c 'echo $$ ; ls -l /proc/self ; echo foo'",
      "7218",
      "lrwxrwxrwx 1 root root 0 Jun 30 16:49 /proc/self -> 7219",
      "foo",
      "",
      "$ bash -c 'echo $$ ; exec ls -l /proc/self ; echo foo'",
      "7217",
      "lrwxrwxrwx 1 root root 0 Jun 30 16:49 /proc/self -> 7217",
      "```",
      "",
      "the command following exec didn't run, since the shell was replaced."
    ],
    "language": "bash",
    "tags": [],
    "url": "https://unix.stackexchange.com/a/296852/464659"
  },
  {
    "id": 343,
    "title": "gitlab - clone using personal token",
    "created": "2022-06-20T16:10:26Z",
    "modified": "2022-06-20T16:10:26Z",
    "code": [
      "git clone https://oauth2:personal_token@gitlab.com/username/project.git "
    ],
    "example": "",
    "output": "",
    "description": [
      "update git config file:",
      "",
      "```",
      "[remote \"origin\"]",
      "  url = https://oauth2:1AbCDeF_g2HIJKLMNOPqr@gitlab.com/yourusername/project.git",
      "  fetch = +refs/heads/*:refs/remotes/origin/*",
      "```"
    ],
    "language": "bash",
    "tags": [
      "api",
      "git"
    ],
    "url": "https://dev.to/abbazs/how-to-access-gitlab-from-git-cli-using-personal-access-token-2gh0"
  },
  {
    "id": 342,
    "title": "iconv - convert text encoding",
    "created": "2022-06-15T23:20:10Z",
    "modified": "2022-06-16T10:56:18Z",
    "code": [
      "iconv -f ISO-8859-1 -t UTF-8 filename.txt"
    ],
    "example": [
      "$ iconv -f ISO-8859-1 -t UTF-8 file.txt "
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 341,
    "title": "curl - api to get definition",
    "created": "2022-06-15T22:23:15Z",
    "modified": "2022-06-15T22:26:36Z",
    "code": [
      "curl dict://dict.org/d:$WORD"
    ],
    "example": [
      "$ curl dict://dict.org/d:hello",
      "220 dict.dict.org dictd 1.12.1/rf on Linux 4.19.0-10-amd64 <auth.mime> <122027170.31256.1655331679@dict.dict.org>",
      "250 ok",
      "150 1 definitions retrieved",
      "151 \"Hello\" gcide \"The Collaborative International Dictionary of English v.0.48\"",
      "Hello \\Hel*lo\"\\, interj. & n.",
      "   An exclamation used as a greeting, to call attention, as an",
      "   exclamation of surprise, or to encourage one. This variant of",
      "   {Halloo} and {Holloo} has become the dominant form. In the",
      "   United States, it is the most common greeting used in",
      "   answering a telephone.",
      "   [1913 Webster +PJC]",
      ".",
      "250 ok [d/m/c = 1/0/16; 0.000r 0.000u 0.000s]",
      "221 bye [d/m/c = 0/0/0; 0.000r 0.000u 0.000s]"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "api"
    ]
  },
  {
    "id": 340,
    "title": "&& and || - compare strings using logical operators",
    "created": "2022-06-02T18:39:19Z",
    "modified": "2022-06-02T18:39:34Z",
    "code": [
      "[[ \"string1\" == \"string2\" ]] && echo \"Equal\" || echo \"Not equal\""
    ],
    "example": [
      "$ [[ \"string1\" == \"string1\" ]] && echo \"Equal\" || echo \"Not equal\"",
      "Equal",
      "",
      "$ [[ \"string1\" == \"string2\" ]] && echo \"Equal\" || echo \"Not equal\"",
      "Not equal"
    ],
    "output": "",
    "description": [
      "use the logical and && and or || to compare strings:",
      "",
      ""
    ],
    "language": "bash",
    "tags": [],
    "url": "https://linuxize.com/post/how-to-compare-strings-in-bash/"
  },
  {
    "id": 339,
    "title": "IFS - word splitting observed in for loops",
    "created": "2022-06-02T02:34:36Z",
    "modified": "2022-06-02T02:34:36Z",
    "code": [
      "IFS=$' '",
      "items=\"a b c\"",
      "for x in $items; do",
      "    echo \"$x\"",
      "done",
      "",
      "IFS=$'\\n'",
      "for y in $items; do",
      "    echo \"$y\"",
      "done"
    ],
    "example": "",
    "output": "",
    "description": [
      "The IFS variable - which stands for Internal Field Separator - controls what Bash calls word splitting. When set to a string, each character in the string is considered by Bash to separate words. This governs how bash will iterate through a sequence. ",
      "",
      "In the first for loop, IFS is set to $' '. (The $'...' syntax creates a string, with backslash-escaped characters replaced with special characters - like \"\\t\" for tab and \"\\n\" for newline.) Within the for loops, x and y are set to whatever bash considers a \"word\" in the original sequence. For the first loop, IFS is a space, meaning that words are separated by a space character. For the second loop, \"words\" are separated by a newline, which means bash considers the whole value of \"items\" as a single word. If IFS is more than one character, splitting will be done on any of those characters."
    ],
    "language": "bash",
    "tags": [],
    "url": "http://redsymbol.net/articles/unofficial-bash-strict-mode/"
  },
  {
    "id": 338,
    "title": "cp - brace expansion to copy/backup file",
    "created": "2022-06-01T01:14:50Z",
    "modified": "2022-06-01T23:11:38Z",
    "code": [
      "cp snippets.json{,.bkp}"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://askubuntu.com/a/962511"
  },
  {
    "id": 337,
    "title": "() - subshell and variable assignment",
    "created": "2022-05-31T23:31:35Z",
    "modified": "2022-05-31T23:31:35Z",
    "code": [
      "$ ANNIE=isme",
      "",
      "$ (echo $ANNIE; export ANNIE=nntrn; echo $ANNIE)",
      "isme",
      "nntrn",
      "",
      "$ echo $ANNIE",
      "isme",
      ""
    ],
    "example": "",
    "output": "",
    "description": [
      "When you define a function with (), you are right: it will create sub-shell. That sub-shell will contain the same values the original had, but won't be able to modify them. So that you are losing that resource of changing global scope variables.",
      "",
      "There are numerous things you can't do from a sub-shell, including:",
      "",
      "Change global variables. Variables changes will not propagate to the parent shell.",
      "Exit the script. An exit statement will exit only the sub-shell.",
      "Starting a sub-shell can also be a serious performance hit. You're launching a new process each time you call the function.",
      ""
    ],
    "language": "bash",
    "tags": [],
    "url": "https://stackoverflow.com/a/27802054"
  },
  {
    "id": 336,
    "title": "cat - short read about useless use",
    "created": "2022-05-31T23:02:03Z",
    "modified": "2022-06-15T22:27:01Z",
    "code": [
      "# Problematic code:",
      "cat file.txt | awk '{print $1}'",
      "",
      "# Correct code:",
      "< file.txt awk '{print $1}'",
      "",
      "# source: https://www.shellcheck.net/wiki/SC2002"
    ],
    "example": "",
    "output": "",
    "description": [
      "Useless use of cat (UUOC) is common Unix jargon for command line constructs that only provide a function of convenience to the user. In computing, the word \"abuse\", in the second sense of the definition, is used to disparage the excessive or unnecessary use of a language construct; thus, abuse of cat is sometimes called \"cat abuse\". Example of a common cat abuse is given in the award:",
      "",
      "    cat filename | command arg1 arg2 argn",
      "",
      "This can be rewritten using redirection of stdin instead, in either of the following forms (the first is more traditional):",
      "",
      "     command arg1 arg2 argn < filename",
      "     <filename command arg1 arg2 argn",
      "",
      "Beyond other benefits, the input redirection forms allow command to perform random access on the file, whereas the cat examples do not. This is because the redirection form opens the file as the stdin file descriptor which command can fully access, while the cat form simply provides the data as a stream of bytes.",
      "",
      "Another common case where cat is unnecessary is where a command defaults to operating on stdin, but will read from a file, if the filename is given as an argument. This is the case for many common commands; the following examples",
      "",
      "     cat \"$file\" | grep \"$pattern\"",
      "     cat \"$file\" | less",
      "",
      "can instead be written as",
      "",
      "     grep \"$pattern\" \"$file\"",
      "     less \"$file\"",
      "",
      "A common interactive use of cat for a single file is to output the content of a file to standard output. However, if the output is piped or redirected, cat is unnecessary.",
      "",
      "A cat written with UUOC might still be preferred for readability reasons, as reading a piped stream left-to-right might be easier to conceptualize. Also, one wrong use of the redirection symbol \">\" instead of \"<\" (often adjacent on keyboards) may permanently delete the content of a file, in other words clobbering, and one way to avoid this is to use cat with pipes. Compare:",
      "",
      "     command < in | command2 > out",
      "     <in command | command2 > out",
      "",
      "with:",
      "",
      "    cat in | command | command2 > out"
    ],
    "language": "bash",
    "tags": [],
    "url": "https://en.wikipedia.org/wiki/Cat_(Unix)#Useless_use_of_cat"
  },
  {
    "id": 335,
    "title": "jq - convert json to environment variables",
    "created": "2022-05-31T05:45:01Z",
    "modified": "2022-05-31T05:45:01Z",
    "code": [
      "jq -rc 'to_entries | map(\"\\(.key)=\\(.value)\")"
    ],
    "example": [
      "$ curl -s https://api.github.com/users/nntrn | jq -rc 'to_entries | map(\"\\(.key)=\\(.value)\") ",
      "login=nntrn",
      "id=17685332",
      "node_id=MDQ6VXNlcjE3Njg1MzMy",
      "avatar_url=https://avatars.githubusercontent.com/u/17685332?v=4",
      "gravatar_id=",
      "url=https://api.github.com/users/nntrn",
      "html_url=https://github.com/nntrn",
      "followers_url=https://api.github.com/users/nntrn/followers",
      "following_url=https://api.github.com/users/nntrn/following{/other_user}",
      "gists_url=https://api.github.com/users/nntrn/gists{/gist_id}",
      "starred_url=https://api.github.com/users/nntrn/starred{/owner}{/repo}",
      "subscriptions_url=https://api.github.com/users/nntrn/subscriptions",
      "organizations_url=https://api.github.com/users/nntrn/orgs",
      "repos_url=https://api.github.com/users/nntrn/repos",
      "events_url=https://api.github.com/users/nntrn/events{/privacy}",
      "received_events_url=https://api.github.com/users/nntrn/received_events",
      "type=User",
      "site_admin=false",
      "name=null",
      "company=null",
      "blog=",
      "location=Austin, TX",
      "email=null",
      "hireable=null",
      "bio=kinda cool kinda nerdy",
      "twitter_username=null",
      "public_repos=26",
      "public_gists=6",
      "followers=18",
      "following=21",
      "created_at=2016-03-06T11:27:35Z",
      "updated_at=2022-03-15T20:41:03Z"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://www.dormant.ninja/export-json-to-env/"
  },
  {
    "id": 334,
    "title": "jq - extract keys/values from object",
    "created": "2022-05-31T02:41:18Z",
    "modified": "2022-05-31T02:41:18Z",
    "code": [
      "# get values",
      "echo '{ \"a\": 1, \"b\": 2 }' | jq '.[]'",
      "",
      "# get keys",
      "echo '{ \"a\": 1, \"b\": 2 }' | jq 'keys | .[]'"
    ],
    "example": [
      "$ echo '{ \"a\": 1, \"b\": 2 }' | jq '.[]'",
      "1",
      "2",
      "",
      "$ echo '{ \"a\": 1, \"b\": 2 }' | jq 'keys | .[]'",
      "\"a\"",
      "\"b\"",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "jq"
    ],
    "url": "https://cameronnokes.com/blog/working-with-json-in-bash-using-jq/"
  },
  {
    "id": 333,
    "title": "lvm - increase capacity of partition",
    "created": "2022-05-28T05:50:22Z",
    "modified": "2022-06-02T17:50:10Z",
    "code": [
      "FILESYSTEM_PATH=/dev/mapper/osvg-var.fs",
      "",
      "# get max allocation size to expand later",
      "vgdisplay",
      "",
      "# get PV filesystem path",
      "df -h ",
      "",
      "# increase logical volume",
      "lvextend -L +5G $FILESYSTEM_PATH",
      "",
      "# expand filesystem so changes can be reflected in df -h",
      "xfs_growfs $FILESYSTEM_PATH"
    ],
    "example": [
      "$ FILESYSTEM_PATH=/dev/mapper/osvg-var.fs",
      "",
      "$ vgdisplay",
      "",
      "    --- Volume group ---",
      "    VG Name               osvg",
      "    System ID",
      "    Format                lvm2",
      "    Metadata Areas        1",
      "    Metadata Sequence No  15",
      "    VG Access             read/write",
      "    VG Status             resizable",
      "    MAX LV                0",
      "    Cur LV                10",
      "    Open LV               9",
      "    Max PV                0",
      "    Cur PV                1",
      "    Act PV                1",
      "    VG Size               <95.02 GiB",
      "    PE Size               4.00 MiB",
      "    Total PE              24325",
      "    Alloc PE / Size       10894 / 42.55 GiB",
      "    Free  PE / Size       13431 / 52.46 GiB",
      "    VG UUID               BC3fLo-0uIt-5Gcg-dL0i-ywLL-4miW-eT6cw3",
      "",
      "$ df -h ",
      "",
      "    Filesystem                                Size  Used Avail Use% Mounted on",
      "    devtmpfs                                   63G     0   63G   0% /dev",
      "    tmpfs                                      63G   12M   63G   1% /dev/shm",
      "    tmpfs                                      63G   58M   63G   1% /run",
      "    tmpfs                                      63G     0   63G   0% /sys/fs/cgroup",
      "    /dev/mapper/osvg-root.fs                  3.0G  551M  2.4G  19% /",
      "    /dev/mapper/osvg-usr.fs                    13G  4.2G  8.9G  32% /usr",
      "    /dev/mapper/datavg-u01                    299G   46G  254G  16% /u01",
      "    /dev/mapper/datavg-u02                    300G   33M  300G   1% /u02",
      "    /dev/mapper/osvg-opt.fs                    14G  1.2G   13G   9% /opt",
      "    /dev/mapper/osvg-var.fs                   3.0G  1.4G  1.7G  45% /var",
      "    /dev/mapper/datavg-u04                    100G   33M  100G   1% /u04",
      "    /dev/mapper/datavg-u06                     50G   33M   50G   1% /u06",
      "    /dev/mapper/datavg-u03                    100G   33M  100G   1% /u03",
      "    /dev/mapper/datavg-u05                     50G   33M   50G   1% /u05",
      "    /dev/mapper/osvg-home.fs                  1.5G  952M  546M  64% /home",
      "    /dev/mapper/osvg-tmp.fs                   997M   33M  964M   4% /tmp",
      "    /dev/sdc1                                 997M  316M  682M  32% /boot",
      "    /dev/mapper/osvg-oswatcher.fs             3.0G  416M  2.6G  14% /oswatcher",
      "    /dev/mapper/osvg-varlog.fs                2.0G  858M  1.2G  44% /var/log",
      "",
      "$ lvextend -L +5G /dev/mapper/osvg-var.fs",
      "",
      "    Size of logical volume osvg/var.fs changed from 2.95 GiB (756 extents) to 7.95 GiB (2036 extents).",
      "    Logical volume osvg/var.fs successfully resized.",
      "",
      "$ xfs_growfs $FILESYSTEM_PATH",
      "",
      "    meta-data=/dev/mapper/osvg-var.fs isize=256    agcount=21, agsize=128000 blks",
      "            =                       sectsz=512   attr=2, projid32bit=1",
      "            =                       crc=0        finobt=0 spinodes=0",
      "    data    =                       bsize=4096   blocks=2606080, imaxpct=25",
      "            =                       sunit=0      swidth=0 blks",
      "    naming  =version 2              bsize=4096   ascii-ci=0 ftype=1",
      "    log     =internal               bsize=4096   blocks=2560, version=2",
      "            =                       sectsz=512   sunit=0 blks, lazy-count=1",
      "    realtime =none                   extsz=4096   blocks=0, rtextents=0",
      "    data blocks changed from 2606080 to 3916800",
      "",
      "",
      "$ df -h | grep $FILESYSTEM_PATH",
      "",
      "    /dev/mapper/osvg-var.fs                    15G   10G  5.0G  67% /var"
    ],
    "output": "",
    "description": [
      "Attach the new storage to the system. Next, create a new Physical Volume (PV) from that storage. ",
      "Add the PV to the Volume Group (VG) and then extend the Logical Volume (LV).",
      "",
      "More info:",
      "https://tldp.org/HOWTO/LVM-HOWTO/index.html"
    ],
    "language": "bash",
    "tags": [
      "sysadmin"
    ],
    "url": "https://www.redhat.com/sysadmin/resize-lvm-simple"
  },
  {
    "id": 332,
    "title": "${0%/*} - get directory of running script",
    "created": "2022-05-27T08:07:07Z",
    "modified": "2022-05-27T08:07:07Z",
    "code": [
      "echo \"${0%/*}\""
    ],
    "example": [
      "$ tree ci/",
      "ci/",
      "├── check-directional-formatting.bash",
      "├── config",
      "│   └── allow-ref.sample",
      "├── install-dependencies.sh",
      "├── install-docker-dependencies.sh   ",
      "├── lib.sh",
      "├── make-test-artifacts.sh",
      "├── mount-fileshare.sh",
      "├── print-test-failures.sh",
      "├── run-build-and-tests.sh",
      "├── run-docker.sh",
      "├── run-docker-build.sh",
      "├── run-static-analysis.sh",
      "├── run-test-slice.sh",
      "├── test-documentation.sh",
      "└── util",
      "    └── extract-trash-dirs.sh       "
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://github.com/git/git/blob/master/ci/run-docker-build.sh"
  },
  {
    "id": 331,
    "title": "python - select keys in json to print",
    "created": "2022-05-27T00:03:26Z",
    "modified": "2022-05-27T03:43:16Z",
    "code": [
      "curl -s \"https://jsonplaceholder.typicode.com/posts\" | python3 -c \"import sys, json; data=json.load(sys.stdin); x = [{'id': d['id'], 'title': d['title']} for d in data]; print(json.dumps(x, indent=2))\""
    ],
    "example": "",
    "output": "",
    "description": [
      "similar to ",
      "jq 'with_entries(.[]|select([.key] | inside([\"id\", \"title\"])))'"
    ],
    "language": "python",
    "tags": []
  },
  {
    "id": 330,
    "title": "curl - display information after transfer",
    "created": "2022-05-26T23:53:05Z",
    "modified": "2022-05-27T03:44:33Z",
    "code": [
      "curl -s -o snippets.json -w '%{json}' https://raw.githubusercontent.com/nntrn/sshell/data/snippets.json | jq"
    ],
    "example": "",
    "output": "",
    "description": [
      "use `%{json}` to display all available keys",
      "",
      "-w, --write-out <format>",
      "Make curl display information on stdout after a completed transfer. ",
      "The format is a string that may contain  plain  text  mixed",
      "with  any  number of variables. The format can be specified as a",
      "literal \"string\", or you can have curl read the  format  from  a",
      "file  with  \"@filename\" and to tell curl to read the format from",
      "stdin you write \"@-\".",
      "",
      "The variables present in the output format will  be  substituted",
      "by  the  value or text that curl thinks fit, as described below.",
      "All variables are specified as %{variable_name} and to output  a",
      "normal  % you just write them as %%. You can output a newline by",
      "using \\n, a carriage return with \\r and a tab space with \\t.",
      "",
      "The output will be written to standard output, but this  can  be",
      "switched to standard error by using %{stderr}.",
      "",
      "NOTE: The %-symbol is a special symbol in the win32-environment,",
      "where all occurrences of % must be doubled when using  this  option."
    ],
    "language": "bash",
    "tags": []
  },
  {
    "id": 329,
    "title": "python module calendar",
    "created": "2022-05-25T18:32:12Z",
    "modified": "2022-05-26T17:53:19Z",
    "code": [
      "python -m calendar"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "python",
    "tags": [
      "python-oneliner"
    ],
    "url": "https://en.wikibooks.org/wiki/Python_Programming/Command-line_one-liners"
  },
  {
    "id": 328,
    "title": "sysconfig - provide access to Python’s configuration information",
    "created": "2022-05-25T12:48:27Z",
    "modified": "2022-05-25T12:48:27Z",
    "code": [
      "python -m sysconfig"
    ],
    "example": "",
    "output": "",
    "description": [
      "The sysconfig module provides access to Python’s configuration information like the list of installation paths and the configuration variables relevant for the current platform."
    ],
    "language": "python",
    "tags": [],
    "url": "https://docs.python.org/3.11/library/sysconfig.html"
  },
  {
    "id": 327,
    "title": "cProfile - Performance Profiling Python One-Liner",
    "created": "2022-05-25T12:36:32Z",
    "modified": "2022-05-26T23:53:58Z",
    "code": [
      "python -m cProfile file.py",
      "",
      "python -m profile file.py"
    ],
    "example": "",
    "output": "",
    "description": [
      "To profile a function that takes a single argument, you can do:",
      "",
      "``",
      "import cProfile",
      "import re",
      "cProfile.run('re.compile(\"foo|bar\")')",
      "```",
      "",
      "```",
      "      197 function calls (192 primitive calls) in 0.002 seconds",
      "",
      "Ordered by: standard name",
      "",
      "ncalls  tottime  percall  cumtime  percall filename:lineno(function)",
      "     1    0.000    0.000    0.001    0.001 <string>:1(<module>)",
      "     1    0.000    0.000    0.001    0.001 re.py:212(compile)",
      "     1    0.000    0.000    0.001    0.001 re.py:268(_compile)",
      "     1    0.000    0.000    0.000    0.000 sre_compile.py:172(_compile_charset)",
      "     1    0.000    0.000    0.000    0.000 sre_compile.py:201(_optimize_charset)",
      "     4    0.000    0.000    0.000    0.000 sre_compile.py:25(_identityfunction)",
      "   3/1    0.000    0.000    0.000    0.000 sre_compile.py:33(_compile)",
      "```",
      "",
      "The first line indicates that 197 calls were monitored. Of those calls, 192 were primitive, meaning that the call was not induced via recursion. The next line: Ordered by: standard name, indicates that the text string in the far right column was used to sort the output. The column headings include:",
      "",
      "ncalls",
      "for the number of calls.",
      "",
      "tottime",
      "for the total time spent in the given function (and excluding time made in calls to sub-functions)",
      "",
      "percall",
      "is the quotient of tottime divided by ncalls",
      "",
      "cumtime",
      "is the cumulative time spent in this and all subfunctions (from invocation till exit). This figure is accurate even for recursive functions.",
      "",
      "percall",
      "is the quotient of cumtime divided by primitive calls",
      "",
      "filename:lineno(function)",
      "provides the respective data of each function",
      "",
      "When there are two numbers in the first column (for example 3/1), it means that the function recursed. The second value is the number of primitive calls and the former is the total number of calls. Note that when the function does not recurse, these two values are the same, and only the single figure is printed.",
      ""
    ],
    "language": "python",
    "tags": []
  },
  {
    "id": 326,
    "title": "python - csv to json",
    "created": "2022-05-25T10:11:30Z",
    "modified": "2022-05-25T19:07:12Z",
    "code": [
      "CSV_FILE=https://raw.githubusercontent.com/jhsu98/json-csv-converter/master/MOCK_DATA.csv",
      "",
      "# print each row as an object",
      "curl -s $CSV_FILE |",
      "  python -c \"import sys,csv,json;print(json.dumps(list(csv.DictReader(sys.stdin))))\"",
      "",
      "# print each row as an array",
      "curl -s $CSV_FILE |",
      "  python -c \"import sys,csv,json;print(json.dumps(list(csv.reader(sys.stdin))))\""
    ],
    "example": [
      "CSV_FILE=~/csv/cities.csv",
      "",
      "python -c \"import csv,json;print(json.dumps(list(csv.DictReader(open('$CSV_FILE')))))\"",
      "python -c \"import csv,json;print(json.dumps(list(csv.reader(open('$CSV_FILE')))))\"",
      ""
    ],
    "output": "",
    "description": "",
    "language": "python",
    "tags": []
  },
  {
    "id": 325,
    "title": "python oneliner - print columns like awk",
    "created": "2022-05-25T09:51:16Z",
    "modified": "2022-05-25T09:51:36Z",
    "code": [
      "python3 -c 'print(\"\\n\".join(line.split(\":\",1)[0] for line in open(\"/etc/passwd\")))'"
    ],
    "example": [
      "$ python3 -c 'print(\"\\n\".join(line.split(\":\",1)[0] for line in open(\"/etc/passwd\")))'",
      "SYSTEM",
      "LOCAL SERVICE",
      "NETWORK SERVICE",
      "Administrators",
      "NT SERVICE+TrustedInstaller",
      "Annie_Tran",
      "Administrator",
      "DefaultAccount",
      "Guest",
      "SMSNomadP2P&",
      "WDAGUtilityAccount"
    ],
    "output": "",
    "description": "",
    "language": "python",
    "tags": [
      "python-oneliner"
    ]
  },
  {
    "id": 324,
    "title": "awk - remove duplicates without sorting",
    "created": "2022-05-25T08:47:01Z",
    "modified": "2022-05-25T08:47:01Z",
    "code": [
      "# from file",
      "awk '!a[$0]++'  file.txt",
      "",
      "# from stdin",
      "echo \"...\" | awk '!a[$0]++'  "
    ],
    "example": [
      "$ echo -e \"hello\\nhello\\nhi\\nhello\" | awk '!a[$0]++'",
      "hello",
      "hi"
    ],
    "output": "",
    "description": [
      "Use awk to remove duplicate lines if sorting is not needed. It's a lot faster "
    ],
    "language": "bash",
    "tags": []
  },
  {
    "id": 323,
    "title": "ignore carriage return in windows ",
    "created": "2022-05-25T06:37:28Z",
    "modified": "2022-05-25T06:37:28Z",
    "code": [
      "set -o igncr"
    ],
    "example": "",
    "output": "",
    "description": [
      "set -o igncr causes the shell ignore windows line endings (skip \\r). Another solution would be to fix the script by running dos2unix on it."
    ],
    "language": "bash",
    "tags": [],
    "url": "https://stackoverflow.com/a/35870173"
  },
  {
    "id": 322,
    "title": "python - command line pretty print json",
    "created": "2022-05-23T16:47:06Z",
    "modified": "2022-05-23T16:48:23Z",
    "code": [
      "python3 -m json.tool file.json",
      "",
      "# or",
      "cat file.json | python3 -m json.tool"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "python"
    ],
    "url": "https://stackoverflow.com/a/32228333"
  },
  {
    "id": 321,
    "title": "gitlab - create project ",
    "created": "2022-05-20T20:56:24Z",
    "modified": "2022-05-20T21:06:55Z",
    "code": [
      "PROJECT_NAME=test",
      "GITLAB_PERSONAL_ACCESS_TOKEN=...",
      "",
      "curl --silent --header \"PRIVATE-TOKEN: $GITLAB_PERSONAL_ACCESS_TOKEN\" \\",
      "  -XPOST \"https://gitlab.example.com/api/v4/projects?name=$PROJECT_NAME&visibility=private&initialize_with_readme=true\"",
      ""
    ],
    "example": "",
    "output": "",
    "description": [
      "name",
      "\tThe name of the new project",
      "\tEquals path if not provided.",
      "",
      "path",
      "\tRepository name for new project",
      "\tGenerated based on name if not provided (generated as lowercase with dashes)",
      "\tStarting with GitLab 14.9, path must not start or end with a special character and must not contain consecutive special characters.",
      "",
      "allow_merge_on_skipped_pipeline",
      "\tSet whether or not merge requests can be merged with skipped jobs.",
      "",
      "analytics_access_level",
      "\tOne of disabled, private or enabled",
      "",
      "approvals_before_merge   note  ",
      "\tHow many approvers should approve merge requests by default",
      "\tTo configure approval rules, see Merge request approvals API.",
      "",
      "auto_cancel_pending_pipelines",
      "\tAuto-cancel pending pipelines",
      "\tThis isn’t a boolean, but enabled/disabled.",
      "",
      "auto_devops_deploy_strategy",
      "\tAuto Deploy strategy (continuous, manual or timed_incremental).",
      "",
      "auto_devops_enabled",
      "\tEnable Auto DevOps for this project.",
      "",
      "autoclose_referenced_issues",
      "\tSet whether auto-closing referenced issues on default branch.",
      "",
      "avatar",
      "\tImage file for avatar of the project.",
      "",
      "build_git_strategy",
      "\tThe Git strategy",
      "\tDefaults to fetch.",
      "",
      "build_timeout",
      "\tThe maximum amount of time, in seconds, that a job can run.",
      "",
      "builds_access_level",
      "\tOne of disabled, private, or enabled.",
      "",
      "ci_config_path",
      "\tThe path to CI configuration file.",
      "",
      "container_expiration_policy_attributes",
      "\tUpdate the image cleanup policy for this project",
      "\tAccepts: cadence (string), keep_n (integer), older_than (string), name_regex (string), name_regex_delete (string), name_regex_keep (string), enabled (boolean)",
      "\tSee the Container Registry documentation for more information on cadence, keep_n and older_than values.",
      "",
      "container_registry_access_level",
      "\tSet visibility of container registry, for this project, to one of disabled, private or enabled.",
      "",
      "container_registry_enabled",
      "\t(Deprecated) Enable container registry for this project",
      "\tUse container_registry_access_level instead.",
      "",
      "default_branch",
      "\tThe default branch name",
      "\tRequires initialize_with_readme to be true.",
      "",
      "description",
      "\tShort project description.",
      "",
      "emails_disabled",
      "\tDisable email notifications.",
      "",
      "external_authorization_classification_label   note  ",
      "\tThe classification label for the project.",
      "",
      "forking_access_level",
      "\tOne of disabled, private, or enabled.",
      "",
      "group_with_project_templates_id   note  ",
      "\tFor group-level custom templates, specifies ID of group from which all the custom project templates are sourced",
      "\tLeave empty for instance-level templates",
      "\tRequires use_custom_template to be true.",
      "",
      "import_url",
      "\tURL to import repository from",
      "\tWhen this isn’t empty, you must not set initialize_with_readme to true",
      "\tDoing so might result in the following error: not a git repository.",
      "",
      "initialize_with_readme",
      "\tWhether to create a Git repository with just a README.md file",
      "\tDefault is false",
      "\tWhen this is true, you must not pass import_url or other attributes of this endpoint which specify alternative contents for the repository",
      "\tDoing so might result in the following error: not a git repository.",
      "",
      "issues_access_level",
      "\tOne of disabled, private, or enabled.",
      "",
      "issues_enabled",
      "\t(Deprecated) Enable issues for this project",
      "\tUse issues_access_level instead.",
      "",
      "jobs_enabled",
      "\t(Deprecated) Enable jobs for this project",
      "\tUse builds_access_level instead.",
      "",
      "lfs_enabled",
      "\tEnable LFS.",
      "",
      "merge_method",
      "\tSet the merge method used.",
      "",
      "merge_pipelines_enabled",
      "\tEnable or disable merge pipelines.",
      "",
      "merge_requests_access_level",
      "\tOne of disabled, private, or enabled.",
      "",
      "merge_requests_enabled",
      "\t(Deprecated) Enable merge requests for this project",
      "\tUse merge_requests_access_level instead.",
      "",
      "merge_trains_enabled",
      "\tEnable or disable merge trains.",
      "",
      "mirror_trigger_builds   note  ",
      "\tPull mirroring triggers builds.",
      "",
      "mirror   note  ",
      "\tEnables pull mirroring in a project.",
      "",
      "namespace_id",
      "\tNamespace for the new project (defaults to the current user’s namespace).",
      "",
      "only_allow_merge_if_all_discussions_are_resolved",
      "\tSet whether merge requests can only be merged when all the discussions are resolved.",
      "",
      "only_allow_merge_if_pipeline_succeeds",
      "\tSet whether merge requests can only be merged with successful pipelines",
      "\tThis setting is named Pipelines must succeed in the project settings.",
      "",
      "operations_access_level",
      "\tOne of disabled, private, or enabled.",
      "",
      "packages_enabled",
      "\tEnable or disable packages repository feature.",
      "",
      "pages_access_level",
      "\tOne of disabled, private, enabled, or public.",
      "",
      "printing_merge_request_link_enabled",
      "\tShow link to create/view merge request when pushing from the command line.",
      "",
      "public_builds",
      "\tIf true, jobs can be viewed by non-project members.",
      "",
      "remove_source_branch_after_merge",
      "\tEnable Delete source branch option by default for all new merge requests.",
      "",
      "repository_access_level",
      "\tOne of disabled, private, or enabled.",
      "",
      "repository_storage",
      "\tWhich storage shard the repository is on",
      "\t(administrator only)",
      "",
      "request_access_enabled",
      "\tAllow users to request member access.",
      "",
      "requirements_access_level",
      "\tOne of disabled, private or enabled",
      "",
      "resolve_outdated_diff_discussions",
      "\tAutomatically resolve merge request diffs discussions on lines changed with a push.",
      "",
      "security_and_compliance_access_level",
      "\t(GitLab 14.9 and later) Security and compliance access level",
      "\tOne of disabled, private, or enabled.",
      "",
      "shared_runners_enabled",
      "\tEnable shared runners for this project.",
      "",
      "snippets_access_level",
      "\tOne of disabled, private, or enabled.",
      "",
      "snippets_enabled",
      "\t(Deprecated) Enable snippets for this project",
      "\tUse snippets_access_level instead.",
      "",
      "squash_option",
      "\tOne of never, always, default_on, or default_off.",
      "",
      "tag_list",
      "\t(Deprecated in GitLab 14.0) The list of tags for a project; put array of tags, that should be finally assigned to a project",
      "\tUse topics instead.",
      "",
      "template_name",
      "\tWhen used without use_custom_template, name of a built-in project template",
      "\tWhen used with use_custom_template, name of a custom project template.",
      "",
      "template_project_id   note  ",
      "\tWhen used with use_custom_template, project ID of a custom project template",
      "\tThis is preferable to using template_name since template_name may be ambiguous.",
      "",
      "topics",
      "\tThe list of topics for a project; put array of topics, that should be finally assigned to a project",
      "\t(Introduced in GitLab 14.0.)",
      "",
      "use_custom_template   note  ",
      "\tUse either custom instance or group (with group_with_project_templates_id) project template.",
      "",
      "visibility",
      "\tSee project visibility level.",
      "",
      "wiki_access_level",
      "\tOne of disabled, private, or enabled.",
      "",
      "wiki_enabled",
      "\t(Deprecated) Enable wiki for this project",
      "\tUse wiki_access_level instead.",
      "",
      "https://docs.gitlab.com/ee/api/projects.html"
    ],
    "language": "bash",
    "tags": [
      "gitlab"
    ],
    "url": "https://cloudaffaire.com/how-to-create-a-gitlab-project-using-api/"
  },
  {
    "id": 320,
    "title": "jq - convert json to csv",
    "created": "2022-05-17T20:16:22Z",
    "modified": "2022-05-17T20:16:22Z",
    "code": [
      "echo '[{\"name\":\"JSON\", \"good\":true}, {\"name\":\"XML\", \"good\":false}]' |",
      "  jq -r '.[] | map(.) | @csv'",
      ""
    ],
    "example": [
      "$ curl -s https://sports.core.api.espn.com/v2/sports/football/leagues/nfl/seasons/2021/futures >futures.json",
      "",
      "$ cat futures.json | jq -r '.items[].futures[].provider| map(.) |@csv'",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 319,
    "title": "grep - display lines in file1 that aren't in file2 (similar to comm)",
    "created": "2022-05-17T19:56:35Z",
    "modified": "2022-05-17T19:56:35Z",
    "code": [
      "grep -vFxf file1.txt file2.txt"
    ],
    "example": [
      "$ cat <<EOF >first.txt",
      "a",
      "b",
      "c",
      "EOF",
      "",
      "$ cat <<EOF >second.txt",
      "a",
      "b",
      "1",
      "4",
      "EOF",
      "",
      "$ grep -vFxf first.txt second.txt",
      "1",
      "4",
      ""
    ],
    "output": "",
    "description": [
      "Options are:",
      "-v: Selected lines are those not matching any of the specified patterns",
      "-F: Fixed string search",
      "-x: Exact match",
      "-f: Use a file for patterns"
    ],
    "language": "bash",
    "tags": [],
    "url": "https://stackoverflow.com/a/72278813/7460613"
  },
  {
    "id": 318,
    "title": "declare - list all function names",
    "created": "2022-05-17T00:20:28Z",
    "modified": "2022-05-17T00:20:28Z",
    "code": [
      "declare -F"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 317,
    "title": "nmap - view open ports",
    "created": "2022-05-16T18:01:10Z",
    "modified": "2022-05-16T18:01:10Z",
    "code": [
      "nmap --open $HOSTNAME"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "network"
    ]
  },
  {
    "id": 316,
    "title": "csplit - split text in file on empty lines",
    "created": "2022-05-13T16:52:40Z",
    "modified": "2022-05-13T16:52:40Z",
    "code": [
      "csplit --suppress-matched $FILENAME '/^$/' '{*}'"
    ],
    "example": [
      "$ cat <<EOF >file.txt",
      "  one",
      "",
      "  two",
      "",
      "  three",
      "EOF",
      "",
      "$ csplit --suppress-matched --prefix 'file-' file.txt '/^$/' '{*}'",
      "",
      "$ ls file-*",
      "file-00  file-01  file-02",
      "",
      "$ find . -type f -name \"file-*\" -print -exec cat {} \\;",
      "./file-00",
      "  one",
      "./file-01",
      "  two",
      "./file-02",
      "  three"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://www.gnu.org/software/coreutils/manual/html_node/csplit-invocation.html#csplit-invocation"
  },
  {
    "id": 315,
    "title": "rpm - get all installed doc files for packages",
    "created": "2022-05-12T23:57:41Z",
    "modified": "2022-05-12T23:57:41Z",
    "code": [
      "rpm -qa -d"
    ],
    "example": [
      "$ rpm -qa -d | head -n 10 ",
      "/usr/share/doc/make-3.82/AUTHORS",
      "/usr/share/doc/make-3.82/COPYING",
      "/usr/share/doc/make-3.82/NEWS",
      "/usr/share/doc/make-3.82/README",
      "/usr/share/info/make.info-1.gz",
      "/usr/share/info/make.info-2.gz",
      "/usr/share/info/make.info.gz",
      "/usr/share/man/man1/gmake.1.gz",
      "/usr/share/man/man1/make.1.gz"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 314,
    "title": "xargs - pretty print process environment",
    "created": "2022-05-12T21:52:49Z",
    "modified": "2022-05-12T21:52:49Z",
    "code": [
      "xargs -n 1 -0 </proc/$PID/environ"
    ],
    "example": [
      "$ echo ${PID:=$$}",
      "35179",
      "",
      "$ cat \"/proc/$PID/environ\"",
      "TERM=xtermHOME=/rootSHELL=/bin/bashUSER=rootLOGNAME=rootPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/binXDG_SESSION_ID=c20",
      "",
      "$ xargs -n 1 -0 <\"/proc/$$/environ\"",
      "TERM=xterm",
      "HOME=/root",
      "SHELL=/bin/bash",
      "USER=root",
      "LOGNAME=root",
      "PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin",
      "XDG_SESSION_ID=c20",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 313,
    "title": "nmap - scan port",
    "created": "2022-05-11T03:59:58Z",
    "modified": "2022-05-11T03:59:58Z",
    "code": [
      "nmap -p 443 $HOSTNAME"
    ],
    "example": [
      "$ nmap -p 80 proxy.us.example.com",
      "",
      "    Starting Nmap 6.40 ( http://nmap.org ) at 2022-05-10 22:38 CDT",
      "    Nmap scan report for proxy.us.example.com (10.284.20.472)",
      "    Host is up (0.00037s latency).",
      "    rDNS record for 10.170.24.135: server.us.example.com",
      "    PORT   STATE SERVICE",
      "    80/tcp open  http",
      "",
      "    Nmap done: 1 IP address (1 host up) scanned in 0.47 seconds",
      "",
      "$ nmap -p 443 proxy.us.example.com",
      "",
      "    Starting Nmap 6.40 ( http://nmap.org ) at 2022-05-10 22:38 CDT",
      "    Nmap scan report for proxy.us.example.com (10.284.20.472)",
      "    Host is up (0.00038s latency).",
      "    rDNS record for 10.170.24.135: server.us.example.com",
      "    PORT    STATE  SERVICE",
      "    443/tcp closed https",
      "",
      "    Nmap done: 1 IP address (1 host up) scanned in 0.47 seconds",
      ""
    ],
    "output": "",
    "description": [
      "Ports are a concept of UDP and TCP. Ping messages are technically referred to as ICMP Echo Request and ICMP Echo Reply which are part of ICMP. ICMP, TCP, and UDP are \"siblings\"; they are not based on each other, but are three separate protocols that run on top of IP.",
      "",
      "Therefore you can not ping a port. What you can do, is use a port scanner like nmap.",
      "$ nmap -p 80 onofri.org",
      "",
      "You can also use `telnet onofri.org 80`, as suggested in one of the other answers (It will give an error if the port is closed or filtered)."
    ],
    "language": "bash",
    "tags": [],
    "url": "https://superuser.com/a/769543/1608083"
  },
  {
    "id": 312,
    "title": "jq - get unique items based on key",
    "created": "2022-05-11T03:26:14Z",
    "modified": "2022-05-13T15:15:57Z",
    "code": [
      "echo '[{\"foo\": 1, \"bar\": 123}, {\"foo\": 1, \"bar\": 123}, {\"foo\": 4, \"bar\": 123}]' | jq 'unique_by(.foo)'"
    ],
    "example": [
      "$ JSONSTRING='[{\"foo\": 1, \"bar\": 123}, {\"foo\": 1, \"bar\": 123}, {\"foo\": 4, \"bar\": 123}]'",
      "",
      "$ echo \"$JSONSTRING\" | jq 'unique_by(.foo)'",
      "[",
      "  {",
      "    \"foo\": 1,",
      "    \"bar\": 123",
      "  },",
      "  {",
      "    \"foo\": 4,",
      "    \"bar\": 123",
      "  }",
      "]",
      "",
      "$ echo \"$JSONSTRING\" | jq 'unique_by(.bar)'",
      "[",
      "  {",
      "    \"foo\": 1,",
      "    \"bar\": 123",
      "  }",
      "]"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 311,
    "title": "git - get remote branches",
    "created": "2022-05-11T03:20:46Z",
    "modified": "2022-05-11T03:21:21Z",
    "code": [
      "git remote show origin | sed -n '/Remote branches/,/Local/p' | grep -v ':' | awk '{print $1}'"
    ],
    "example": [
      "$ git remote show origin",
      "* remote origin",
      "  Fetch URL: https://github.com/nntrn/sshell.git",
      "  Push  URL: https://github.com/nntrn/sshell.git",
      "  HEAD branch: main",
      "  Remote branches:",
      "    data     tracked",
      "    gh-pages new (next fetch will store in remotes/origin)",
      "    main     new (next fetch will store in remotes/origin)",
      "  Local branch configured for 'git pull':",
      "    data merges with remote data",
      "  Local ref configured for 'git push':",
      "",
      "$ git remote show origin | sed -n '/Remote branches/,/Local/p' | grep -v ':' | awk '{print $1}'",
      "data",
      "gh-pages",
      "main"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "git"
    ]
  },
  {
    "id": 310,
    "title": "git log - get commit hash list",
    "created": "2022-05-11T02:50:30Z",
    "modified": "2022-05-11T02:50:30Z",
    "code": [
      "# get last 2 ",
      "git log -2 --pretty=%h ",
      "",
      "# get all",
      "git log --pretty=%h "
    ],
    "example": [
      "$  git log -2 --pretty=%h ",
      "c51538a",
      "2090d93"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "git"
    ]
  },
  {
    "id": 309,
    "title": "git-gc - cleanup unnecessary files and optimize the local repository",
    "created": "2022-05-11T02:03:35Z",
    "modified": "2022-05-11T02:04:16Z",
    "code": [
      "git gc --aggressive --prune=all "
    ],
    "example": "",
    "output": "",
    "description": [
      "`--aggressive`",
      "Usually *git gc* runs very quickly while providing good disk space utilization and performance. This option will cause *git gc* to more aggressively optimize the repository at the expense of taking much more time. The effects of this optimization are mostly persistent. See the \"AGGRESSIVE\" section below for details.",
      "",
      "`--auto`",
      "With this option, *git gc* checks whether any housekeeping is required; if not, it exits without performing any work.",
      "",
      "See the `gc.auto` option in the \"CONFIGURATION\" section below for how this heuristic works.",
      "",
      "Once housekeeping is triggered by exceeding the limits of configuration options such as `gc.auto` and `gc.autoPackLimit`, all other housekeeping tasks (e.g. rerere, working trees, reflog...​) will be performed as well.",
      "",
      "`--prune=<date>`",
      "Prune loose objects older than date (default is 2 weeks ago, overridable by the config variable `gc.pruneExpire`). --prune=now prunes loose objects regardless of their age and increases the risk of corruption if another process is writing to the repository concurrently; see \"NOTES\" below. --prune is on by default.",
      "",
      "`--no-prune`",
      "Do not prune any loose objects.",
      "",
      "`--quiet`",
      "Suppress all progress reports.",
      "",
      "`--force`",
      "Force `git gc` to run even if there may be another `git gc` instance running on this repository.",
      "",
      "`--keep-largest-pack`",
      "All packs except the largest pack and those marked with a `.keep` files are consolidated into a single pack. When this option is used, `gc.bigPackThreshold` is ignored."
    ],
    "language": "bash",
    "tags": [
      "git"
    ]
  },
  {
    "id": 308,
    "title": "github api - render a markdown document as an HTML page ",
    "created": "2022-05-10T04:31:18Z",
    "modified": "2022-05-10T04:31:18Z",
    "code": [
      "curl -sL -X POST --data-binary @readme.md  https://api.github.com/markdown/raw --header \"Content-Type:text/x-markdown\" ",
      ""
    ],
    "example": [
      "$ curl -sL -X POST --data-binary @readme.md  https://api.github.com/markdown/raw --header \"Content-Type:text/x-markdown\" ",
      "<h1>",
      "<a id=\"user-content-sshell\" class=\"anchor\" href=\"#sshell\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>sshell</h1>",
      "<p><a href=\"http://nntrn.github.io/sshell\" rel=\"nofollow\">nntrn.github.io/sshell</a></p>",
      "<h2>",
      "<a id=\"user-content-download\" class=\"anchor\" href=\"#download\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Download</h2>",
      "<div class=\"highlight highlight-source-shell\"><pre>git clone https://github.com/nntrn/sshell.git",
      "<span class=\"pl-c1\">cd</span> sshell</pre></div>",
      "<h2>",
      "<a id=\"user-content-local-serve\" class=\"anchor\" href=\"#local-serve\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Local serve</h2>",
      "<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> python2</span>",
      "<span class=\"pl-c1\">cd</span> public <span class=\"pl-k\">&amp;&amp;</span> python2 -m SimpleHTTPServer 3000",
      "",
      "<span class=\"pl-c\"><span class=\"pl-c\">#</span> python3</span>",
      "python3 -m http.server --directory public 3000",
      "",
      "<span class=\"pl-c\"><span class=\"pl-c\">#</span> php</span>",
      "php -S localhost:3000 -t public/",
      "",
      "<span class=\"pl-c\"><span class=\"pl-c\">#</span> serve (npm install -g serve)</span>",
      "serve public</pre></div>",
      "<h2>",
      "<a id=\"user-content-scripts\" class=\"anchor\" href=\"#scripts\" aria-hidden=\"true\"><span aria-hidden=\"true\" class=\"octicon octicon-link\"></span></a>Scripts</h2>",
      "<div class=\"highlight highlight-source-shell\"><pre><span class=\"pl-c\"><span class=\"pl-c\">#</span> update snippets.json in data branch</span>",
      "cat updated-snippets.json <span class=\"pl-k\">|</span> ./scripts/update-snippets.sh",
      "",
      "<span class=\"pl-c\"><span class=\"pl-c\">#</span> publish changes in public/* to gh-pages branch</span>",
      "./scripts/publish</pre></div>"
    ],
    "output": "",
    "description": [
      "Markdown",
      "The Markdown API enables you to render a markdown document as an HTML page or as raw text.",
      "",
      "You must send Markdown as plain text (using a Content-Type header of text/plain or text/x-markdown) to this endpoint, rather than using JSON format. In raw mode, GitHub Flavored Markdown is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.",
      "",
      "https://docs.github.com/en/rest/markdown#render-a-markdown-document"
    ],
    "language": "bash",
    "tags": [
      "git"
    ],
    "url": "https://stackoverflow.com/a/64210455"
  },
  {
    "id": 307,
    "title": "fuser - close tcp ports ",
    "created": "2022-05-09T21:25:38Z",
    "modified": "2022-05-09T21:25:48Z",
    "code": [
      "fuser -v -k -n tcp 443",
      "fuser -v -k -n tcp 80"
    ],
    "example": "",
    "output": "",
    "description": [
      "       fuser -km /home",
      "              kills all processes accessing the file system /home in any way.",
      "",
      "       if fuser -s /dev/ttyS1; then :; else something; fi",
      "              invokes something if no other process is using /dev/ttyS1.",
      "",
      "       fuser telnet/tcp",
      "              shows all processes at the (local) TELNET port.",
      ""
    ],
    "language": "bash",
    "tags": [],
    "url": "https://superuser.com/a/389252"
  },
  {
    "id": 306,
    "title": "openssl - create and verify CSR ",
    "created": "2022-05-07T12:22:05Z",
    "modified": "2022-05-07T12:22:05Z",
    "code": [
      "# Creating Your CSR with One Command",
      "openssl req -new \\",
      "-newkey rsa:2048 -nodes -keyout $HOSTNAME.key \\",
      "-out $HOSTNAME.csr \\",
      "-subj \"/C=US/ST=Texas/L=Austin/O=$USER, Inc./OU=IT/CN=localhost\"",
      "",
      "# Verifying CSR Information",
      "openssl req -text -in $HOSTNAME.csr -noout -verify"
    ],
    "example": [
      "$ openssl req -new \\",
      "-newkey rsa:2048 -nodes -keyout $HOSTNAME.key \\",
      "-out $HOSTNAME.csr \\",
      "-subj \"/C=US/ST=Texas/L=Austin/O=$USER, Inc./OU=IT/CN=localhost\"",
      "Generating a RSA private key",
      "...........................................................+++++",
      ".....................+++++",
      "writing new private key to 'W101TL8YD3.key'",
      "-----",
      "",
      "$ openssl req -text -in $HOSTNAME.csr -noout -verify",
      "verify OK",
      "Certificate Request:",
      "    Data:",
      "        Version: 1 (0x0)",
      "        Subject: C = US, ST = Texas, L = Austin, O = \"Annie_Tran, Inc.\", OU = IT, CN = localhost",
      "        Subject Public Key Info:",
      "            Public Key Algorithm: rsaEncryption",
      "                RSA Public-Key: (2048 bit)",
      "                Modulus:",
      "                    00:ba:f1:62:a1:26:05:08:45:76:05:28:a3:64:97:",
      "                    a9:b5:30:4c:93:62:a0:0d:27:03:c4:84:53:54:04:",
      "                    15:84:6a:1f:50:31:2c:3c:80:9e:7b:ac:d7:f5:0b:",
      "                    c0:6e:56:19:05:db:07:e4:4e:f5:da:06:68:d6:11:",
      "                    a5:74:d3:08:76:8f:cb:77:45:bf:01:c5:4e:8a:4f:",
      "                    66:89:eb:55:9b:77:eb:ad:c0:57:15:ae:16:46:5a:",
      "                    1a:c8:37:36:18:dc:47:91:20:ef:85:c5:07:f1:4d:",
      "                    76:b3:b9:24:a0:cf:8e:fd:fe:28:d4:78:1c:48:86:",
      "                    7e:ae:17:80:9f:e6:eb:a8:2b:96:e9:1f:8e:f6:83:",
      "                    64:c1:87:73:1c:6d:ea:ab:ce:12:53:30:80:ce:bf:",
      "                    53:36:52:02:96:24:d6:5e:aa:64:f5:0a:42:5a:c6:",
      "                    8f:a2:7a:2c:9b:f4:6a:5e:ba:93:61:6d:62:85:d2:",
      "                    cd:ac:6f:57:0e:14:80:60:5c:1a:15:7e:84:7b:3b:",
      "                    46:ea:62:92:f4:5f:bc:e0:d4:dd:23:29:43:ed:63:",
      "                    0b:4e:9b:75:f3:1d:05:b5:16:c2:fb:72:08:73:85:",
      "                    e5:e4:8c:54:99:26:2d:bf:d5:bc:72:a2:8a:e6:99:",
      "                    1f:c9:8e:94:ca:f9:4d:b5:52:56:f5:42:1f:ad:7a:",
      "                    e3:bf",
      "                Exponent: 65537 (0x10001)",
      "        Attributes:",
      "            a0:00",
      "    Signature Algorithm: sha256WithRSAEncryption",
      "         93:a6:5f:f6:f0:b7:0d:6b:d7:00:e2:87:ce:29:d2:26:ca:e2:",
      "         3f:23:15:c8:59:8d:a5:be:6f:69:b4:5b:11:a3:20:23:69:44:",
      "         14:94:86:97:29:20:51:38:a0:7f:64:f0:73:8d:51:76:8f:80:",
      "         bc:07:a9:d4:b6:2d:61:b7:a1:a6:5b:5a:bc:92:92:21:fc:e6:",
      "         aa:d1:8f:45:ce:c0:c9:db:13:fb:42:72:7d:da:65:0e:6e:9b:",
      "         d4:63:b2:6b:a3:47:93:1f:71:dc:3d:43:73:32:4f:cc:24:95:",
      "         2d:2e:8f:ab:dc:21:79:86:0a:76:fb:34:c7:cd:e9:68:12:14:",
      "         0b:3c:a4:0d:ff:2a:03:59:25:d8:76:4e:a7:78:d8:0c:c3:f5:",
      "         da:a4:5f:67:0e:a0:88:a6:4e:32:24:4c:5a:e4:05:82:b7:bf:",
      "         8b:b9:37:5b:c2:9c:c8:cf:61:74:98:d4:03:48:d7:60:8c:2d:",
      "         be:d2:7f:6d:1f:40:4e:69:df:9a:fd:54:d6:f9:60:f6:e3:ef:",
      "         35:4c:d4:61:d3:37:64:7f:cf:a6:c6:8c:68:24:cb:17:4c:78:",
      "         51:09:20:97:d2:53:ee:11:71:2a:5e:df:c9:42:9d:3b:f2:fa:",
      "         32:df:5d:5c:70:86:cf:53:e2:ad:e4:f3:9c:76:4a:d7:6f:95:",
      "         8c:8e:28:7a",
      ""
    ],
    "output": "",
    "description": [
      "Creating Your CSR with One Command",
      "Instead of generating a private key and then creating a CSR in two separate steps, you can actually perform both tasks at once.",
      "",
      "Use the following command to create both the private key and CSR:",
      "",
      "openssl req -new \\",
      "-newkey rsa:2048 -nodes -keyout yourdomain.key \\",
      "-out yourdomain.csr \\",
      "-subj \"/C=US/ST=Utah/L=Lehi/O=Your Company, Inc./OU=IT/CN=yourdomain.com\"",
      "This command generates a new private key (-newkey) using the RSA algorithm with a 2048-bit key length (rsa:2048) without using a passphrase (-nodes) and then creates the key file with a name of yourdomain.key (-keyout yourdomain.key).",
      "",
      "The command then generates the CSR with a filename of yourdomain.csr (-out yourdomain.csr) and the information for the CSR is supplied (-subj).",
      "",
      "Note: While it is possible to add a subject alternative name (SAN) to a CSR using OpenSSL, the process is a bit complicated and involved. If you do need to add a SAN to your certificate, this can easily be done by adding them to the order form when purchasing your DigiCert certificate.",
      "",
      "Verifying CSR Information",
      "After creating your CSR using your private key, we recommend verifying that the information contained in the CSR is correct and that the file hasn't been modified or corrupted."
    ],
    "language": "bash",
    "tags": [],
    "url": "https://www.digicert.com/kb/ssl-support/openssl-quick-reference-guide.htm"
  },
  {
    "id": 305,
    "title": "fsutil resource info",
    "created": "2022-05-05T01:13:33Z",
    "modified": "2022-05-05T01:13:33Z",
    "code": [
      "fsutil resource info C:"
    ],
    "example": "",
    "output": "",
    "description": [
      "fsutil resource",
      "---- RESOURCE Commands Supported ----",
      "",
      "create          Create a Secondary Transactional Resource Manager",
      "info            Display information relating to a Transactional Resource Manager",
      "setAutoReset    Set whether a default Transactional Resource Manager will clean its transactional metadata on next mount",
      "setAvailable    Set a Transactional Resource Manager to prefer availability over consistency",
      "setConsistent   Set a Transactional Resource Manager to prefer consistency over availability",
      "setLog          Change characteristics of a running Transactional Resource Manager",
      "start           Start a Transactional Resource Manager",
      "stop            Stop a Transactional Resource Manager"
    ],
    "language": "cmd",
    "tags": []
  },
  {
    "id": 304,
    "title": "unset variables beginning with ",
    "created": "2022-05-04T22:40:03Z",
    "modified": "2022-05-11T02:04:39Z",
    "code": [
      "unset \"${!VSCODE@}\""
    ],
    "example": "",
    "output": "",
    "description": [
      "In the Bash shell, the ${!prefix@} parameter expansion generates all variables that start with prefix.",
      "",
      "${!prefix@} Expands to the names of variables whose names begin with prefix [...] When @ is used and the expansion appears within double quotes, each variable name expands to a separate word.",
      "",
      "This list can then be passed to unset:",
      "",
      "unset \"${!myvarname@}\""
    ],
    "language": "bash",
    "tags": [],
    "url": "https://stackoverflow.com/a/43126805"
  },
  {
    "id": 303,
    "title": "Get-WindowsUpdateLog - get update",
    "created": "2022-05-04T22:39:00Z",
    "modified": "2022-05-04T22:39:00Z",
    "code": [
      "Get-WindowsUpdateLog "
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": []
  },
  {
    "id": 302,
    "title": "Finds local admin password and password expiration timestamp for given computer",
    "created": "2022-05-04T21:25:05Z",
    "modified": "2022-10-13T00:16:32Z",
    "code": [
      "Get-AdmPwdPassword -ComputerName:AT01488YD3 | Format-List *"
    ],
    "example": "",
    "output": "",
    "description": [
      "NAME",
      "    Get-AdmPwdPassword",
      "",
      "SYNOPSIS",
      "    Finds admin password for given computer",
      "",
      "",
      "    --------------------------  Example 1  --------------------------",
      "",
      "    Get-AdmPwdPassword -ComputerName:MyComputer",
      "",
      "    Gets password of local administrator on computer MyComputer"
    ],
    "language": "powershell",
    "tags": []
  },
  {
    "id": 301,
    "title": "find - search files modified in last 24 hours",
    "created": "2022-05-03T18:55:01Z",
    "modified": "2022-05-03T18:55:01Z",
    "code": [
      "find $HOME -mtime 0"
    ],
    "example": "",
    "output": "",
    "description": [
      "Search for files in your home directory which have been modified in the last twenty-four hours. ",
      "This command works this way because the time since each file was last modified is divided by 24 hours and any remainder is discarded. ",
      "That means that to match -mtime 0, a file will have to have a modification in the past which is less than 24 hours ago.",
      "",
      ""
    ],
    "language": "bash",
    "tags": []
  },
  {
    "id": 300,
    "title": "powershell - get all Get- commands",
    "created": "2022-05-03T18:07:51Z",
    "modified": "2022-05-09T17:34:41Z",
    "code": [
      "#C:/Windows/System32/WindowsPowerShell/v1.0/Modules",
      "find . -type f -name \"*.psd1\" -print -exec cat {} \\; | tr -d '\\r' | tr -d '\\0' | grep -Eo 'Get-[a-zA-Z\\-]+' | sort -u | tee ~/all_powershell_get.txt",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 299,
    "title": "Get-NetAdapter",
    "created": "2022-05-03T17:53:44Z",
    "modified": "2022-05-25T19:07:39Z",
    "code": [
      "Get-NetAdapter | Format-Table  -AutoSize -Wrap"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": [
      "network"
    ]
  },
  {
    "id": 298,
    "title": "Get-WmiObject - get network adapter config",
    "created": "2022-05-03T17:51:56Z",
    "modified": "2022-05-03T17:51:56Z",
    "code": [
      "Get-WmiObject win32_networkadapterconfiguration | Format-Table DHCPEnabled,ServiceName,Description -AutoSize -Wrap | Format-Wide -Column 3"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": []
  },
  {
    "id": 297,
    "title": "curl - search dictionaries ",
    "created": "2022-05-03T09:05:14Z",
    "modified": "2022-05-03T09:05:14Z",
    "code": [
      "# list dictionaries",
      "curl dict://dict.org/show:db",
      "",
      "# search word in a specific dictionary",
      "curl dict://dict.org/d:computer:fd-eng-tur",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://csonuryilmaz.github.io/curl/dict/2018/03/25/search-dictionary-from-command-line-(part1).html"
  },
  {
    "id": 296,
    "title": "wget2 - get site stats and download files",
    "created": "2022-05-03T08:53:19Z",
    "modified": "2022-05-03T08:53:32Z",
    "code": [
      "wget2 --stats-site=csv:out.csv --recursive kernel.org/doc/Documentation/process/"
    ],
    "example": "",
    "output": "",
    "description": [
      "--stats-site=[FORMAT:]FILE",
      "Save Site stats in format FORMAT, in file FILE.",
      "",
      "FORMAT can be human or csv. - is shorthand for stdout and h is shorthand for human.",
      "",
      "The CSV output format is",
      "",
      "ID,ParentID,URL,Status,Link,Method,Size,SizeDecompressed,TransferTime,ResponseTime,Encoding,Verification",
      "",
      "- **ID** - unique ID for a stats record.",
      "- **ParentID** - ID of the parent document, relevant for `--recursive** - mode.",
      "- **URL** - URL of the document.",
      "- **Status** - HTTP response code or 0 if not applicable.",
      "- **Link** - 1 means 'direkt link', 0 means 'redirection link'.",
      "- **Method** - 1,2,3 mean GET, HEAD, POST request type.",
      "- **Size** - size of downloaded body (theoretical value for HEAD requests).",
      "- **SizeDecompressed** - size of decompressed body (0 for HEAD requests).",
      "- **TransferTime** - ms between start of request and completed download.",
      "- **ResponseTime** - ms between start of request and first response packet.",
      "- **Encoding** - 0,1,2,3,4,5 mean server side compression was 'identity', 'gzip', 'deflate', 'lzma/xz', 'bzip2', 'brotli', 'zstd', 'lzip'",
      "- **Verification** - PGP verification status. 0,1,2,3 mean 'none',  'valid', 'invalid', 'bad', 'missing'."
    ],
    "language": "bash",
    "tags": [],
    "url": "https://github.com/rockdaboot/wget2/blob/master/docs/wget2.md"
  },
  {
    "id": 295,
    "title": "jq - target objects in array using key",
    "created": "2022-04-27T20:54:01Z",
    "modified": "2022-04-27T20:54:01Z",
    "code": [
      "echo '[{\"id\": \"first\", \"val\": 1}, {\"id\": \"second\", \"val\": 2}]' | jq '.[] | select(.id == \"second\")'"
    ],
    "example": "",
    "output": "",
    "description": [
      "   select(boolean_expression)",
      "       The function select(foo) produces its input unchanged if foo returns true for that input, and produces no output otherwise.",
      "",
      "       It´s useful for filtering lists: [1,2,3] | map(select(. >= 2)) will give you [2,3].",
      "",
      "           jq ´map(select(. >= 2))´",
      "              [1,5,3,0,7]",
      "           => [5,3,7]",
      "",
      "           jq ´.[] | select(.id == \"second\")´",
      "              [{\"id\": \"first\", \"val\": 1}, {\"id\": \"second\", \"val\": 2}]",
      "           => {\"id\": \"second\", \"val\": 2}"
    ],
    "language": "bash",
    "tags": [
      "jq"
    ]
  },
  {
    "id": 294,
    "title": "WindowsIdentity- get current user in powershell",
    "created": "2022-04-27T19:01:32Z",
    "modified": "2022-04-28T05:35:58Z",
    "code": [
      "$myWindowsID = [System.Security.Principal.WindowsIdentity]::GetCurrent();",
      "$adminRole = [System.Security.Principal.WindowsBuiltInRole]::Administrator;",
      "$newProcess = New-Object System.Diagnostics.ProcessStartInfo \"PowerShell\";",
      "",
      " echo $myWindowsID"
    ],
    "example": [
      "# Get the ID and security principal of the current user account",
      "$myWindowsID = [System.Security.Principal.WindowsIdentity]::GetCurrent();",
      "$myWindowsPrincipal = New-Object System.Security.Principal.WindowsPrincipal($myWindowsID);",
      "",
      "# Get the security principal for the administrator role",
      "$adminRole = [System.Security.Principal.WindowsBuiltInRole]::Administrator;",
      "",
      "# Check to see if we are currently running as an administrator",
      "if ($myWindowsPrincipal.IsInRole($adminRole))",
      "{",
      "    # We are running as an administrator, so change the title and background colour to indicate this",
      "    $Host.UI.RawUI.WindowTitle = $myInvocation.MyCommand.Definition + \"(Elevated)\";",
      "    $Host.UI.RawUI.BackgroundColor = \"DarkBlue\";",
      "    Clear-Host;",
      "}",
      "else {",
      "    # We are not running as an administrator, so relaunch as administrator",
      "",
      "    # Create a new process object that starts PowerShell",
      "    $newProcess = New-Object System.Diagnostics.ProcessStartInfo \"PowerShell\";",
      "",
      "    # Specify the current script path and name as a parameter with added scope and support for scripts with spaces in it's path",
      "    $newProcess.Arguments = \"& '\" + $script:MyInvocation.MyCommand.Path + \"'\"",
      "",
      "    # Indicate that the process should be elevated",
      "    $newProcess.Verb = \"runas\";",
      "",
      "    # Start the new process",
      "    [System.Diagnostics.Process]::Start($newProcess);",
      "",
      "    # Exit from the current, unelevated, process",
      "    Exit;",
      "}",
      "",
      "# Run your code that needs to be elevated here...",
      "",
      "Write-Host -NoNewLine \"Press any key to continue...\";",
      "$null = $Host.UI.RawUI.ReadKey(\"NoEcho,IncludeKeyDown\");"
    ],
    "output": "",
    "description": [
      "Benjamin Armstrong posted an excellent article about self-elevating PowerShell scripts. There a few minor issue with his code; a modified version based on fixes suggested in the comment is below.",
      "",
      "Basically it gets the identity associated with the current process, checks whether it is an administrator, and if it isn't, creates a new PowerShell process with administrator privileges and terminates the old process."
    ],
    "language": "powershell",
    "tags": [
      "security"
    ],
    "url": "https://stackoverflow.com/a/27872686"
  },
  {
    "id": 293,
    "title": "env - get all environment items in powershell",
    "created": "2022-04-27T19:00:35Z",
    "modified": "2022-04-27T19:00:35Z",
    "code": [
      "Get-ChildItem env:"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": [],
    "url": "https://devblogs.microsoft.com/scripting/powertip-use-windows-powershell-to-display-all-environment-variables/"
  },
  {
    "id": 292,
    "title": "naive string encryption - scramble numbers in string to hide sensitive data",
    "created": "2022-04-27T17:26:29Z",
    "modified": "2022-04-27T17:26:29Z",
    "code": [
      "echo \"$text-to-scramble-numbers\"  | tr \"0123456789\" \"$RANDOM$RANDOM\"",
      "",
      "# or",
      "randomnumstring=$RANDOM$RANDOM$RANDOM",
      "echo \"$text-to-scramble-numbers\"  | tr \"0123456789\" $( echo ${randomnumstring:0:9})"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "crypto",
      "security"
    ]
  },
  {
    "id": 291,
    "title": "netsh - find the processId for the registered urls ",
    "created": "2022-04-27T16:36:08Z",
    "modified": "2022-04-27T16:36:08Z",
    "code": [
      "netsh http show servicestate view=requestq verbose=no",
      ""
    ],
    "example": "",
    "output": "",
    "description": [
      "You can find the processId for the registered urls using the following command:",
      "",
      ""
    ],
    "language": "bash",
    "tags": [
      "windows,",
      "network"
    ],
    "url": "https://stackoverflow.com/a/61965725"
  },
  {
    "id": 290,
    "title": "netsh -  Lists all defined aliases",
    "created": "2022-04-27T16:24:07Z",
    "modified": "2022-05-09T17:34:57Z",
    "code": [
      "netsh show helper"
    ],
    "example": [
      "$ which netsh",
      "/cygdrive/c/WINDOWS/system32/netsh",
      "",
      ""
    ],
    "output": "",
    "description": [
      "Network shell (netsh) is a command-line utility that allows you to configure and display the status of various network communications server roles and components after they are installed on computers running Windows Server® 2008 R2 and Windows Server® 2008."
    ],
    "language": "bash",
    "tags": [
      "windows",
      "network"
    ],
    "url": "https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-r2-and-2008/cc754753(v=ws.10)"
  },
  {
    "id": 289,
    "title": "pidstat - display global page faults and memory statistics",
    "created": "2022-04-22T07:03:15Z",
    "modified": "2022-04-22T07:03:15Z",
    "code": [
      "pidstat -C \"awx | postgres\" -r -p ALL"
    ],
    "example": "",
    "output": "",
    "description": [
      "pidstat -C \"fox|bird\" -r -p ALL",
      "  Display global page faults and memory  statistics  for  all  the",
      "  processes  whose  command  name  includes  the  string  \"fox\" or",
      "  \"bird\"."
    ],
    "language": "bash",
    "tags": [],
    "url": "http://man.he.net/man1/pidstat"
  },
  {
    "id": 288,
    "title": "get docker gateway",
    "created": "2022-04-22T03:10:37Z",
    "modified": "2022-04-22T03:10:37Z",
    "code": [
      "ip route show | grep docker0 | awk '{print $9}'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "network"
    ]
  },
  {
    "id": 287,
    "title": "Get-ADGroupMember",
    "created": "2022-04-22T01:10:49Z",
    "modified": "2022-10-04T02:48:37Z",
    "code": [
      "Get-ADGroupMember -Identity <Group_Name> "
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": [],
    "url": "https://www.lepide.com/how-to/export-members-of-a-particular-ad-group-using-poweshell.html#:~:text=The%20PowerShell%20Get%2DADGroupMember%20cmdlet,group%20you%20want%20to%20use."
  },
  {
    "id": 286,
    "title": "nmap - list open TCP ports ",
    "created": "2022-04-21T16:41:59Z",
    "modified": "2022-04-21T16:41:59Z",
    "code": [
      "nmap -sT -O  10.171.230.150"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "network"
    ],
    "url": "https://www.cyberciti.biz/faq/unix-linux-check-if-port-is-in-use-command/"
  },
  {
    "id": 285,
    "title": "vim - display all possible runtime config settings for vim",
    "created": "2022-04-14T22:22:37Z",
    "modified": "2022-04-14T22:22:37Z",
    "code": [
      ":set all"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "vim",
    "tags": []
  },
  {
    "id": 284,
    "title": "systemctl - view status for every loaded service on the system",
    "created": "2022-04-14T22:15:58Z",
    "modified": "2022-04-14T22:21:31Z",
    "code": [
      "systemctl status --type=service"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://linuxconfig.org/how-to-use-systemctl-to-list-services-on-systemd-linux"
  },
  {
    "id": 283,
    "title": "journalctl - get entries for service",
    "created": "2022-04-14T03:15:59Z",
    "modified": "2022-04-14T03:15:59Z",
    "code": [
      "journalctl -u  <service>"
    ],
    "example": [
      " journalctl -u  systemd-logind.service"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 282,
    "title": "ps - find service using the most memory",
    "created": "2022-04-14T03:08:22Z",
    "modified": "2022-04-14T03:08:22Z",
    "code": [
      "ps aux --sort=-%mem",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://unix.stackexchange.com/a/393198"
  },
  {
    "id": 281,
    "title": "systemd - files and tools that manage the Linux startup sequence",
    "created": "2022-04-14T02:09:40Z",
    "modified": "2022-04-14T02:09:40Z",
    "code": [
      "ll /etc/systemd/system/multi-user.target.wants"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "service"
    ],
    "url": "https://opensource.com/article/20/5/systemd-startup"
  },
  {
    "id": 280,
    "title": "openssl - generate a set of prime numbers",
    "created": "2022-04-13T00:29:52Z",
    "modified": "2022-04-13T00:29:52Z",
    "code": [
      "# define start and ending points",
      "AQUO=10000",
      "ADQUEM=10100",
      "for N in $(seq $AQUO $ADQUEM); do",
      "  # use bc to convert hex to decimal",
      "  openssl prime $N | awk '/is prime/ {print \"ibase=16;\"$1}' | bc",
      "done"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "security"
    ],
    "url": "https://www.madboa.com/geek/openssl/#introduction"
  },
  {
    "id": 279,
    "title": "openssl - MD5, SHA1, and SHA256 digest",
    "created": "2022-04-13T00:03:39Z",
    "modified": "2022-04-13T00:04:09Z",
    "code": [
      "$ openssl dgst -md5 README",
      "MD5(README)= 18ecc2fc65853262f250548e476d0e29",
      "",
      "$ openssl dgst -sha1 README",
      "SHA1(README)= b018bfbdd6b6c939ea6acb3b4ea591e214a2a84d",
      "",
      "$ openssl dgst -sha256 README",
      "SHA256(README)= d173e8ad75a8abbed8d21d4924ce145af7331f27a1a7b31e79e57271888ad54f",
      ""
    ],
    "example": "",
    "output": "",
    "description": [
      "Digests",
      "Generating digests with the dgst option is one of the more straightforward tasks you can accomplish with the openssl binary. Producing digests is done so often, as a matter of fact, that you can find special-use binaries for doing the same thing.",
      "",
      "How do I create an MD5 or SHA1 digest of a file?",
      "Digests are created using the dgst option. I’ve seen several systems on which the OpenSSL dgst(1) man page does not accurately report the digest functions available via the local openssl binary. I suggest running openssl dgst -h to see which digests are actually available."
    ],
    "language": "bash",
    "tags": [
      "security"
    ],
    "url": "https://www.madboa.com/geek/openssl/#introduction"
  },
  {
    "id": 278,
    "title": "openssl - extract information from a certificate",
    "created": "2022-04-12T23:58:16Z",
    "modified": "2022-04-12T23:58:16Z",
    "code": [
      "$ openssl x509 -noout -in cert.pem -issuer",
      "issuer= /C=US/ST=Texas/L=Round Rock/O=Technologies/CN=Technologies Issuing CA 101",
      "",
      "$ openssl x509 -noout -in cert.pem -subject",
      "subject= /C=US/ST=Texas/L=Round Rock/O=example/OU=Digital/CN=awxserver02.us.example.com",
      "",
      "$ openssl x509 -noout -in cert.pem -dates",
      "notBefore=Jul 14 18:17:08 2021 GMT",
      "notAfter=Jul 14 18:17:08 2023 GMT",
      "",
      "$ openssl x509 -noout -in cert.pem -issuer -subject -dates",
      "issuer= /C=US/ST=Texas/L=Round Rock/O=Technologies/CN=Technologies Issuing CA 101",
      "subject= /C=US/ST=Texas/L=Round Rock/O=example/OU=Digital/CN=awxserver02.us.example.com",
      "notBefore=Jul 14 18:17:08 2021 GMT",
      "notAfter=Jul 14 18:17:08 2023 GMT",
      "",
      "$ openssl x509 -noout -in cert.pem -hash",
      "91b885cd",
      "",
      "$ openssl x509 -noout -in cert.pem -fingerprint",
      "SHA1 Fingerprint=E3:EB:7B:6B:01:2D:CE:3A:AD:63:00:AA:0B:60:08:F8:64:9F:1E:D9",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "security"
    ],
    "url": "https://www.madboa.com/geek/openssl/#introduction"
  },
  {
    "id": 277,
    "title": "openssl - list high encryption ciphers using the AES algorithm",
    "created": "2022-04-12T23:51:12Z",
    "modified": "2022-05-11T02:06:58Z",
    "code": [
      "openssl ciphers -V 'AES+HIGH'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "security"
    ],
    "url": "https://www.madboa.com/geek/openssl/#introduction"
  },
  {
    "id": 276,
    "title": "Powershell - set variables to get dynamic ADUser",
    "created": "2022-04-11T22:33:10Z",
    "modified": "2022-04-11T22:33:10Z",
    "code": [
      "$Self = Get-ADUser -Identity $Env:Username -Properties *",
      "$EID = $Self.EmployeeId",
      "",
      "Get-ADUser  -Filter \"OwnerID -like $EID\"  -Properties * | sort-object -property PasswordLastSet | Format-Table Name,PasswordLastSet -AutoSize -Wrap"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": [
      "AD"
    ]
  },
  {
    "id": 275,
    "title": "sssctl - get command usage from help",
    "created": "2022-04-11T19:59:56Z",
    "modified": "2022-04-11T19:59:56Z",
    "code": [
      "sssctl --help"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 274,
    "title": "jq - get ",
    "created": "2022-04-09T07:52:51Z",
    "modified": "2022-04-09T07:53:06Z",
    "code": [
      "curl -s 'https://api.github.com/repos/nntrn/dvt/commits?per_page=1' | jq '.[] | {message: .commit.message, date: .commit.committer.date}'"
    ],
    "example": [
      "$ curl -s 'https://api.github.com/repos/nntrn/dvt/commits?per_page=1' ",
      "[",
      "  {",
      "    \"sha\": \"6e42802dcd22548be5c2d93c8a5b9939c42a10f9\",",
      "    \"node_id\": \"C_kwDOGlqnl9oAKDZlNDI4MDJkY2QyMjU0OGJlNWMyZDkzYzhhNWI5OTM5YzQyYTEwZjk\",",
      "    \"commit\": {",
      "      \"author\": {",
      "        \"name\": \"annie tran\",",
      "        \"email\": \"17685332+nntrn@users.noreply.github.com\",",
      "        \"date\": \"2021-12-27T12:13:16Z\"",
      "      },",
      "      \"committer\": {",
      "        \"name\": \"annie tran\",",
      "        \"email\": \"17685332+nntrn@users.noreply.github.com\",",
      "        \"date\": \"2021-12-27T12:13:16Z\"",
      "      },",
      "      \"message\": \"1.2.0\",",
      "      \"tree\": {",
      "        \"sha\": \"0ff39c1a1781376b44b352f4d3ad7b0703d05812\",",
      "        \"url\": \"https://api.github.com/repos/nntrn/dvt/git/trees/0ff39c1a1781376b44b352f4d3ad7b0703d05812\"",
      "      },",
      "      \"url\": \"https://api.github.com/repos/nntrn/dvt/git/commits/6e42802dcd22548be5c2d93c8a5b9939c42a10f9\",",
      "      \"comment_count\": 0,",
      "      \"verification\": {",
      "        \"verified\": false,",
      "        \"reason\": \"unsigned\",",
      "        \"signature\": null,",
      "        \"payload\": null",
      "      }",
      "    },",
      "    \"url\": \"https://api.github.com/repos/nntrn/dvt/commits/6e42802dcd22548be5c2d93c8a5b9939c42a10f9\",",
      "    \"html_url\": \"https://github.com/nntrn/dvt/commit/6e42802dcd22548be5c2d93c8a5b9939c42a10f9\",",
      "    \"comments_url\": \"https://api.github.com/repos/nntrn/dvt/commits/6e42802dcd22548be5c2d93c8a5b9939c42a10f9/comments\",",
      "    \"author\": {",
      "      \"login\": \"nntrn\",",
      "      \"id\": 17685332,",
      "      \"node_id\": \"MDQ6VXNlcjE3Njg1MzMy\",",
      "      \"avatar_url\": \"https://avatars.githubusercontent.com/u/17685332?v=4\",",
      "      \"gravatar_id\": \"\",",
      "      \"url\": \"https://api.github.com/users/nntrn\",",
      "      \"html_url\": \"https://github.com/nntrn\",",
      "      \"followers_url\": \"https://api.github.com/users/nntrn/followers\",",
      "      \"following_url\": \"https://api.github.com/users/nntrn/following{/other_user}\",",
      "      \"gists_url\": \"https://api.github.com/users/nntrn/gists{/gist_id}\",",
      "      \"starred_url\": \"https://api.github.com/users/nntrn/starred{/owner}{/repo}\",",
      "      \"subscriptions_url\": \"https://api.github.com/users/nntrn/subscriptions\",",
      "      \"organizations_url\": \"https://api.github.com/users/nntrn/orgs\",",
      "      \"repos_url\": \"https://api.github.com/users/nntrn/repos\",",
      "      \"events_url\": \"https://api.github.com/users/nntrn/events{/privacy}\",",
      "      \"received_events_url\": \"https://api.github.com/users/nntrn/received_events\",",
      "      \"type\": \"User\",",
      "      \"site_admin\": false",
      "    },",
      "    \"committer\": {",
      "      \"login\": \"nntrn\",",
      "      \"id\": 17685332,",
      "      \"node_id\": \"MDQ6VXNlcjE3Njg1MzMy\",",
      "      \"avatar_url\": \"https://avatars.githubusercontent.com/u/17685332?v=4\",",
      "      \"gravatar_id\": \"\",",
      "      \"url\": \"https://api.github.com/users/nntrn\",",
      "      \"html_url\": \"https://github.com/nntrn\",",
      "      \"followers_url\": \"https://api.github.com/users/nntrn/followers\",",
      "      \"following_url\": \"https://api.github.com/users/nntrn/following{/other_user}\",",
      "      \"gists_url\": \"https://api.github.com/users/nntrn/gists{/gist_id}\",",
      "      \"starred_url\": \"https://api.github.com/users/nntrn/starred{/owner}{/repo}\",",
      "      \"subscriptions_url\": \"https://api.github.com/users/nntrn/subscriptions\",",
      "      \"organizations_url\": \"https://api.github.com/users/nntrn/orgs\",",
      "      \"repos_url\": \"https://api.github.com/users/nntrn/repos\",",
      "      \"events_url\": \"https://api.github.com/users/nntrn/events{/privacy}\",",
      "      \"received_events_url\": \"https://api.github.com/users/nntrn/received_events\",",
      "      \"type\": \"User\",",
      "      \"site_admin\": false",
      "    },",
      "    \"parents\": [",
      "      {",
      "        \"sha\": \"be0297653a3b4e355c8b28746032cca861304401\",",
      "        \"url\": \"https://api.github.com/repos/nntrn/dvt/commits/be0297653a3b4e355c8b28746032cca861304401\",",
      "        \"html_url\": \"https://github.com/nntrn/dvt/commit/be0297653a3b4e355c8b28746032cca861304401\"",
      "      }",
      "    ]",
      "  }",
      "]",
      ""
    ],
    "output": "",
    "description": [
      "We can use jq to extract just the first commit.",
      "$ curl 'https://api.github.com/repos/stedolan/jq/commits?per_page=5' | jq '.[0]'",
      "",
      "For the rest of the examples, I'll leave out the curl command - it's not going to change.",
      "",
      "There's a lot of info we don't care about there, so we'll restrict it down to the most interesting fields.",
      "$ jq '.[0] | {message: .commit.message, name: .commit.committer.name}'",
      "",
      "The | operator in jq feeds the output of one filter (.[0] which gets the first element of the array in the response) into the input of another ({...} which builds an object out of those fields). You can access nested attributes, such as .commit.message.",
      "",
      "Now let's get the rest of the commits.",
      "",
      "$ jq '.[] | {message: .commit.message, name: .commit.committer.name}'"
    ],
    "language": "bash",
    "tags": [
      "vault"
    ],
    "url": "https://stedolan.github.io/jq/tutorial/"
  },
  {
    "id": 273,
    "title": "read powershell history and trim leading whitespace",
    "created": "2022-04-09T07:20:37Z",
    "modified": "2022-04-09T07:25:00Z",
    "code": [
      "POWERSHELL_HISTORY=${USERPROFILE,\\\\,\\/,g}/AppData/Roaming/Microsoft/Windows/PowerShell/PSReadLine/ConsoleHost_history.txt",
      "cat \"$POWERSHELL_HISTORY\" | sed 's/^[ \\t]*//'",
      ""
    ],
    "example": "",
    "output": "",
    "description": [
      "%USERPROFILE%\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt"
    ],
    "language": "powershell",
    "tags": []
  },
  {
    "id": 272,
    "title": "get-help - show all loaded cmdlets, functions, and modules in powershell",
    "created": "2022-04-09T07:14:00Z",
    "modified": "2022-04-09T07:18:05Z",
    "code": [
      "Get-Help Get | Format-Table Name,Category,Module -AutoSize -Wrap"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": []
  },
  {
    "id": 271,
    "title": "sudo - show root entries only ",
    "created": "2022-04-06T20:06:25Z",
    "modified": "2022-04-06T20:06:25Z",
    "code": [
      "sudo -ll | sed -n '/RunAsUsers: root/,/Sudoers entry/p'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 270,
    "title": "awk - split string into maxtrix-like table",
    "created": "2022-04-06T18:02:24Z",
    "modified": "2022-04-06T18:02:24Z",
    "code": [
      "echo \"A,B,C,D,E,F,G,H,I,J,K,L,M,N,O\" | awk -v RS='[,\\n]' '{a=$0;getline b; getline c; print a,b,c}' OFS=,"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://unix.stackexchange.com/a/430556"
  },
  {
    "id": 269,
    "title": "sed - prepending and appending to file/line",
    "created": "2022-04-06T17:46:21Z",
    "modified": "2022-04-06T17:46:21Z",
    "code": [
      "s/^/\"/g; - prepend double quotes to each line",
      "s/$/\"/g; - append double quotes to each line",
      "1s/^/export json = \\n/; - prepend to file",
      "$s/$/\\n); - append to file"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://stackoverflow.com/a/59580100"
  },
  {
    "id": 268,
    "title": "vault - get openapi specs",
    "created": "2022-04-01T04:09:50Z",
    "modified": "2022-04-06T17:46:28Z",
    "code": [
      "curl -H \"X-Vault-Token: $VAULT_TOKEN\" \"$VAULT_ADDR/v1/sys/internal/specs/openapi\""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "vault"
    ]
  },
  {
    "id": 267,
    "title": "openssl - for versions >1.1.1",
    "created": "2022-04-01T03:59:15Z",
    "modified": "2022-04-01T03:59:15Z",
    "code": [
      "ENCRYPTEDFILE=.secrets.enc",
      "SALTFILE=.vault-password",
      "SECRETSFILE=.env",
      "",
      "# encrypt",
      "openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -base64 -salt -in $SECRETSFILE -out $ENCRYPTEDFILE -pass file:$SALTFILE",
      "",
      "# decrypt",
      "openssl enc -d -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -base64 -salt -in $ENCRYPTEDFILE -pass file:$SALTFILE"
    ],
    "example": "",
    "output": "",
    "description": [
      "Comparing the Synopsys of the two main and recent versions of OpenSSL, let me quote the man pages.",
      "",
      "OpenSSL 1.1.0",
      "openssl enc -ciphername [-help] [-ciphers] [-in filename] [-out filename] [-pass arg] [-e] [-d] [-a/-base64] [-A] [-k password] [-kfile filename] [-K key] [-iv IV] [-S salt] [-salt] [-nosalt] [-z] [-md digest] [-p] [-P] [-bufsize number] [-nopad] [-debug] [-none] [-engine id]",
      "OpenSSL 1.1.1",
      "openssl enc -cipher [-help] [-ciphers] [-in filename] [-out filename] [-pass arg] [-e] [-d] [-a] [-base64] [-A] [-k password] [-kfile filename] [-K key] [-iv IV] [-S salt] [-salt] [-nosalt] [-z] [-md digest] [-iter count] [-pbkdf2] [-p] [-P] [-bufsize number] [-nopad] [-debug] [-none] [-rand file...] [-writerand file] [-engine id]",
      "There obviously are some greater differences, namely considering this question, there are these two switches missing in the 1.1.0:",
      "",
      "pbkdf2",
      "",
      "iter",
      "",
      "You have basically two options now. Either ignore the warning or adjust your encryption command to something like:",
      "",
      "openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -salt -in InputFilePath -out OutputFilePath",
      "Where these switches:",
      "",
      "-aes-256-cbc is what you should use for maximum protection or the 128-bit version, the 3DES (Triple DES) got abandoned some time ago, see Triple DES has been deprecated by NIST in 2017, while AES gets accelerated by all modern CPUs by a lot; you can simply verify if your CPU has the AES-NI instruction set for example using grep aes /proc/cpuinfo; win, win",
      "",
      "-md sha512 is the faster variant of SHA-2 functions family compared to SHA-256 while it might be a bit more secure; win, win",
      "",
      "-pbkdf2: use PBKDF2 (Password-Based Key Derivation Function 2) algorithm",
      "",
      "-iter 100000 is overriding the default count of iterations for the password, quoting the man page:",
      "Use a given number of iterations on the password in deriving the encryption key. High values increase the time required to brute-force the resulting file. This option enables the use of PBKDF2 algorithm to derive the key."
    ],
    "language": "bash",
    "tags": [],
    "url": "https://askubuntu.com/a/1126882"
  },
  {
    "id": 266,
    "title": "get-adgroup - get all members for AD group",
    "created": "2022-03-31T19:53:02Z",
    "modified": "2022-03-31T19:53:02Z",
    "code": [
      "get-adgroup -Identity amerunixteam -properties *|Select -ExpandProperty member"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": []
  },
  {
    "id": 265,
    "title": "prometheus - curl metrics",
    "created": "2022-03-31T19:24:30Z",
    "modified": "2022-04-09T07:53:21Z",
    "code": [
      "curl http://127.0.0.1:9190/integrations/node_exporter/metrics"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "grafana"
    ],
    "url": "https://prometheus.io/docs/prometheus/latest/querying/api/"
  },
  {
    "id": 264,
    "title": "ls - sortable ls",
    "created": "2022-03-31T18:24:32Z",
    "modified": "2022-03-31T18:24:32Z",
    "code": [
      "ls -lptr --time-style='+%s %FT%T' --no-group --group-directories-first "
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 263,
    "title": "vault - enable and write userpass",
    "created": "2022-03-31T00:12:08Z",
    "modified": "2022-03-31T00:12:08Z",
    "code": [
      "vault auth enable userpass",
      "vault write auth/userpass/users/annie_tran password=secret"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "vault"
    ],
    "url": "https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/enable.mdx"
  },
  {
    "id": 262,
    "title": "get environment names matching prefix",
    "created": "2022-03-30T16:22:08Z",
    "modified": "2022-03-30T16:22:08Z",
    "code": [
      "${!prefix*}",
      "${!prefix@}"
    ],
    "example": [
      "$ echo \"${!VAULT*}\"",
      "VAULT_ADDR VAULT_NAMESPACE VAULT_TOKEN"
    ],
    "output": "",
    "description": [
      "${!prefix*}",
      "${!prefix@}",
      "",
      "Names matching prefix.  ",
      "",
      "Expands to the names of variables whose names begin with prefix, separated by the first character of the IFS special variable.  ",
      "",
      "When @ is used and the expansion appears within double quotes, each variable name expands to a separate word."
    ],
    "language": "bash",
    "tags": []
  },
  {
    "id": 261,
    "title": "convert json to yaml from stdin",
    "created": "2022-03-30T15:49:09Z",
    "modified": "2022-06-01T23:11:22Z",
    "code": [
      "python3 -c \"import yaml, json, sys; sys.stdout.write(yaml.dump(json.load(sys.stdin)))\""
    ],
    "example": [
      "# run in shell",
      "cat file.json | python -c 'import yaml, json, sys; sys.stdout.write(yaml.dump(json.load(sys.stdin)))'",
      "",
      "# create alias",
      "alias json2yaml=\"python -c 'import yaml, json, sys; sys.stdout.write(yaml.dump(json.load(sys.stdin)))'\"",
      "",
      "$ echo '{\"dirs\": [1,2,3]}' | python3 -c \"import yaml, json, sys; sys.stdout.write(yaml.dump(json.load(sys.stdin)))\"",
      "dirs:",
      "- 1",
      "- 2",
      "- 3"
    ],
    "output": "",
    "description": "",
    "language": "python",
    "tags": [],
    "url": "https://gist.github.com/noahcoad/46909253a5891af3699580b8f17baba8"
  },
  {
    "id": 260,
    "title": "Get the parent directory of where this script is.",
    "created": "2022-03-29T22:30:56Z",
    "modified": "2022-03-29T22:30:56Z",
    "code": [
      "SOURCE=\"${BASH_SOURCE[0]}\"",
      "while [ -h \"$SOURCE\" ] ; do SOURCE=\"$(readlink \"$SOURCE\")\"; done",
      "DIR=\"$( cd -P \"$( dirname \"$SOURCE\" )/..\" && pwd )\"",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://github.com/hashicorp/vault/blob/3dc8ef76b670aeb91654a7f7df709c8fd08ca1d0/scripts/build.sh"
  },
  {
    "id": 259,
    "title": "investigate sockets & processes",
    "created": "2022-03-29T22:22:31Z",
    "modified": "2022-03-29T22:22:31Z",
    "code": [
      "$ ss -tulnp",
      ".. users:((\"node_exporter\",pid=58451,fd=3))",
      "",
      "$ PID=58451",
      "$ cat /proc/$PID/cmdline",
      "/opt/prometheus/exporters/node_exporter_current/node_exporter--no-collector.xfs--no-collector.mdadm--no-collector.textfile--web.listen-address=0.0.0.0:9100--log.level=info",
      "",
      "$  procinfo $PID"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "network"
    ],
    "url": "https://www.linuxshelltips.com/find-and-close-open-ports-in-linux/"
  },
  {
    "id": 258,
    "title": "vault - list secrets in path",
    "created": "2022-03-28T23:24:29Z",
    "modified": "2022-04-09T07:53:35Z",
    "code": [
      "vault kv list -format=json 'kv/awx/svc_accounts/'"
    ],
    "example": "",
    "output": "",
    "description": [
      "slash at the end is very important"
    ],
    "language": "bash",
    "tags": [
      "vault"
    ]
  },
  {
    "id": 257,
    "title": "venv ",
    "created": "2022-03-28T23:23:58Z",
    "modified": "2022-03-28T23:24:52Z",
    "code": [
      "python -m venv .venv",
      "source .venv/bin/activate"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "python",
    "tags": []
  },
  {
    "id": 256,
    "title": "curl - renew vault token",
    "created": "2022-03-28T22:02:57Z",
    "modified": "2022-03-28T22:02:57Z",
    "code": [
      "curl -X PUT -H \"X-Vault-Namespace: infrastructure/database/engineering\" -H \"X-Vault-Request: true\" -H \"X-Vault-Token: $VAULT_TOKEN)\" -d '{\"increment\":\"24h\"}' https://hcvault.example.com/v1/auth/token/renew-self"
    ],
    "example": "",
    "output": "",
    "description": [
      "taken from `vault token renew -increment=24h -output-curl-string`"
    ],
    "language": "bash",
    "tags": [
      "hc-vault",
      "vault"
    ]
  },
  {
    "id": 255,
    "title": "vault - update secret with file",
    "created": "2022-03-28T21:45:25Z",
    "modified": "2022-03-28T21:45:25Z",
    "code": [
      "vault kv put 'kv/path/to/secrets' @file-with-object.json"
    ],
    "example": "",
    "output": "",
    "description": [
      "The following variables need to be set in the environment",
      "VAULT_TOKEN, VAULT_NAMESPACE, VAULT_ADDR",
      "---",
      "VAULT_TOKEN=s.zb5oBfjEnOLP5ZbNg",
      "VAULT_NAMESPACE=infrastructure/database/engineering",
      "VAULT_ADDR=https://hcvault.example.com"
    ],
    "language": "bash",
    "tags": [
      "hc-vault",
      "vault"
    ]
  },
  {
    "id": 254,
    "title": "find directories that do not have sticky bit for group",
    "created": "2022-03-26T01:24:02Z",
    "modified": "2022-03-26T01:24:02Z",
    "code": [
      "find $DIR -maxdepth 3 -mindepth 1 -type d ! -perm -2000 -print -exec chmod g+s {} \\;"
    ],
    "example": "",
    "output": "",
    "description": [
      "Using the numerical method, we need to pass a fourth, preceding digit in our chmod command. The digit used is calculated similarly to the standard permission digits:",
      "",
      "Start at 0",
      "SUID = 4",
      "SGID = 2",
      "Sticky = 1"
    ],
    "language": "bash",
    "tags": [],
    "url": "https://www.redhat.com/sysadmin/suid-sgid-sticky-bit"
  },
  {
    "id": 253,
    "title": "git - get top level directory",
    "created": "2022-03-25T18:30:04Z",
    "modified": "2022-05-12T21:08:32Z",
    "code": [
      "git rev-parse --show-toplevel"
    ],
    "example": [
      "$ pwd",
      "/u01/devops-db/sysadmin",
      "",
      "$ git rev-parse --show-toplevel",
      "/u01/devops-db"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "git"
    ],
    "url": "https://superuser.com/a/1351600"
  },
  {
    "id": 252,
    "title": "prettier - alias for stdin formatting for xml files",
    "created": "2022-03-23T21:25:43Z",
    "modified": "2022-03-24T22:13:31Z",
    "code": [
      "alias prettier-xml='prettier --bracket-same-line true --xml-whitespace-sensitivity ignore --tab-width 2 --print-width 120 --stdin-filepath  *.xml'"
    ],
    "example": [
      "cat file.xml | prettier-xml"
    ],
    "output": "",
    "description": [
      "prereq:",
      "npm install -g  @prettier/plugin-xml prettier"
    ],
    "language": "bash",
    "tags": [
      "linter"
    ],
    "url": "https://github.com/prettier/plugin-xml"
  },
  {
    "id": 251,
    "title": "powershell - run noprofile command in shell (bash)",
    "created": "2022-03-23T16:58:39Z",
    "modified": "2022-03-23T19:09:20Z",
    "code": [
      "powershell -noprofile -command \"<command to run>\""
    ],
    "example": [
      "powershell -noprofile -command \"Get-ADUser -Identity Annie_Tran -Properties *\""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 250,
    "title": "git - remove commits matching pattern in message",
    "created": "2022-03-22T21:14:08Z",
    "modified": "2022-04-15T17:49:47Z",
    "code": [
      "git filter-branch --commit-filter '",
      "    if [ `git rev-list --all --grep \"<PATTERN TO REMOVE>\" | grep -c \"$GIT_COMMIT\"` -gt 0 ]",
      "    then",
      "        skip_commit \"$@\";",
      "    else",
      "        git commit-tree \"$@\";",
      "    fi' HEAD"
    ],
    "example": "",
    "output": "",
    "description": [
      "fast solution that uses filter-branch instead of rebase",
      "",
      "clean up with:",
      "git reflog expire --expire=now",
      "git gc --prune=now"
    ],
    "language": "bash",
    "tags": [
      "git"
    ],
    "url": "https://stackoverflow.com/a/9543606"
  },
  {
    "id": 248,
    "title": "ansible-vault - encrypt string with vault id",
    "created": "2022-03-16T20:27:18Z",
    "modified": "2022-03-16T20:27:18Z",
    "code": [
      "echo -n 'letmein' | ansible-vault encrypt_string --vault-id dev@a_password_file --stdin-name 'db_password'"
    ],
    "example": "",
    "output": "",
    "description": [
      "To encrypt the string ‘letmein’ read from stdin, add the vault ID ‘dev’ using the ‘dev’ vault password stored in a_password_file, and name the variable ‘db_password’:",
      "",
      ""
    ],
    "language": "bash",
    "tags": [
      "ansible"
    ],
    "url": "https://docs.ansible.com/ansible/latest/user_guide/vault.html#creating-encrypted-variables"
  },
  {
    "id": 247,
    "title": "uuidgen - create a new UUID value",
    "created": "2022-03-16T18:52:17Z",
    "modified": "2022-03-16T20:02:14Z",
    "code": [
      "uuidgen --sha1 --namespace @dns --name \"string_to_hash\""
    ],
    "example": [
      "$ uuidgen --sha1 --namespace @dns --name \"1626044030000\"",
      "1faa6f1b-f538-5d91-8aaa-1f96de461a16"
    ],
    "output": "",
    "description": [
      "The uuidgen program creates (and prints) a new universally unique identifier (UUID) using the libuuid(3) library. The new UUID can reasonably be considered unique among all UUIDs created on the local system, and among UUIDs created on other systems in the past and in the future.",
      "",
      "There are three types of UUIDs which uuidgen can generate: time-based UUIDs, random-based UUIDs, and hash-based UUIDs. By default uuidgen will generate a random-based UUID if a high-quality random number generator is present. Otherwise, it will choose a time-based UUID. It is possible to force the generation of one of these first two UUID types by using the --random or --time options.",
      "",
      "The third type of UUID is generated with the --md5 or --sha1 options, followed by --namespace namespace and --name name. The namespace may either be a well-known UUID, or else an alias to one of the well-known UUIDs defined in RFC 4122, that is @dns, @url, @oid, or @x500. The name is an arbitrary string value. The generated UUID is the digest of the concatenation of the namespace UUID and the name value, hashed with the MD5 or SHA1 algorithms. It is, therefore, a predictable value which may be useful when UUIDs are being used as handles or nonces for more complex values or values which shouldn’t be disclosed directly. See the RFC for more information."
    ],
    "language": "bash",
    "tags": [],
    "url": "https://github.com/util-linux/util-linux/blob/5de72a375cd59b55bde6243eb2e1fe62cc07e75e/misc-utils/uuidgen.1.adoc"
  },
  {
    "id": 246,
    "title": "find files created in the last hour",
    "created": "2022-03-15T17:32:11Z",
    "modified": "2022-03-16T20:04:40Z",
    "code": [
      "find . -mindepth 1 -maxdepth 1 -type d -ctime 0 -print"
    ],
    "example": "",
    "output": "",
    "description": [
      "-amin, -atime, -cmin, -ctime, -mmin, and -mtime",
      "",
      "-atime n",
      "File was last accessed n*24 hours ago.  When find figures out how many 24-hour periods ago the file was last accessed, any fractional part is ignored, so to match -atime +1, a file  has to have been accessed at least two days ago. ",
      "",
      "-ctime n",
      "File's status was last changed n*24 hours ago. "
    ],
    "language": "bash",
    "tags": [
      "fs"
    ],
    "url": "https://stackoverflow.com/a/5242992"
  },
  {
    "id": 245,
    "title": "systemd-escape - escape strings ",
    "created": "2022-03-14T22:59:20Z",
    "modified": "2022-03-17T00:31:57Z",
    "code": [
      "systemd-escape -u 'Hall\\xc3\\xb6chen\\x2c\\x20Meister'"
    ],
    "example": "",
    "output": "",
    "description": [
      "Escape a single string:",
      "",
      "$ systemd-escape 'Hallöchen, Meister'",
      "Hall\\xc3\\xb6chen\\x2c\\x20Meister",
      "",
      "To undo escaping on a single string:",
      "",
      "$ systemd-escape -u 'Hall\\xc3\\xb6chen\\x2c\\x20Meister'",
      "Hallöchen, Meister",
      "",
      "To generate the mount unit for a path:",
      "",
      "$ systemd-escape -p --suffix=mount \"/tmp//waldi/foobar/\"",
      "tmp-waldi-foobar.mount",
      "",
      "To generate instance names of three strings",
      "",
      "$ systemd-escape --template=systemd-nspawn@.service 'My Container 1' 'containerb' 'container/III'",
      "systemd-nspawn@My\\x20Container\\x201.service systemd-nspawn@containerb.service systemd-nspawn@container-III.service",
      "",
      ""
    ],
    "language": "bash",
    "tags": [
      "text"
    ]
  },
  {
    "id": 244,
    "title": "ansible playbook variables",
    "created": "2022-03-10T01:16:48Z",
    "modified": "2022-03-17T00:23:37Z",
    "code": [
      "- \"{{ var | to_nice_json }}\"",
      "- \"{{ var | to_json }}\"",
      "- \"{{ var | from_json }}\"",
      "- \"{{ var | to_nice_yml }}\"",
      "- \"{{ var | to_yml }}\"",
      "- \"{{ var | from_yml }}\"",
      "- \"{{ result | failed }}\"",
      "- \"{{ result | changed }}\"",
      "- \"{{ result | success }}\"",
      "- \"{{ result | skipped }}\"",
      "- \"{{ var | manditory }}\"",
      "- \"{{ var | default(5) }}\"",
      "- \"{{ list1 | unique }}\"",
      "- \"{{ list1 | union(list2) }}\"",
      "- \"{{ list1 | intersect(list2) }}\"",
      "- \"{{ list1 | difference(list2) }}\"",
      "- \"{{ list1 | symmetric_difference(list2) }}\"",
      "- \"{{ ver1 | version_compare(ver2, operator='>=', strict=True) }}\"",
      "- \"{{ list | random }}\"",
      "- \"{{ number | random }}\"",
      "- \"{{ number | random(start=1, step=10) }}\"",
      "- \"{{ list | join(' ') }}\"",
      "- \"{{ path | basename }}\"",
      "- \"{{ path | dirname }}\"",
      "- \"{{ path | expanduser }}\"",
      "- \"{{ path | realpath }}\"",
      "- \"{{ var | b64decode }}\"",
      "- \"{{ var | b64encode }}\"",
      "- \"{{ filename | md5 }}\"",
      "- \"{{ var | bool }}\"",
      "- \"{{ var | int }}\"",
      "- \"{{ var | quote }}\"",
      "- \"{{ var | md5 }}\"",
      "- \"{{ var | fileglob }}\"",
      "- \"{{ var | match }}\"",
      "- \"{{ var | search }}\"",
      "- \"{{ var | regex }}\"",
      "- \"{{ var | regexp_replace('from', 'to' ) }}\""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "yaml",
    "tags": [
      "ansible"
    ],
    "url": "https://www.cl.cam.ac.uk/~jw35/docs/ansible/ansible-summary.html"
  },
  {
    "id": 243,
    "title": "openssl salted encryption/decryption",
    "created": "2022-03-09T23:04:17Z",
    "modified": "2022-03-17T00:31:31Z",
    "code": [
      "echo 'example' >.vault-password",
      "echo 'username: password' >.secrets",
      "",
      "#encrypt",
      "openssl enc -aes256 -base64 -salt -in .secrets -out .secrets.enc -pass file:./.vault-password",
      "",
      "#decrypt",
      "openssl enc -d -aes256 -a -in .secrets.enc -pass file:./.vault-password"
    ],
    "example": [
      "$ echo 'example' >.vault-password",
      "$ echo 'username: password' >.secrets",
      "",
      "# encrypt:",
      "$ openssl enc -aes256 -base64 -salt -in .secrets -out .secrets.enc -pass file:./.vault-password",
      "",
      "$ cat .secrets.enc",
      "U2FsdGVkX1/VrT+ty1Q+InEZp6O+2AJYG/axMT4PUXoGgiq0rFA+mAGWFwRDAcYG",
      "",
      "$ openssl enc -d -aes256 -a -in .secrets.enc -pass file:./.vault-password 2>/dev/null",
      "username: password"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "security"
    ]
  },
  {
    "id": 242,
    "title": "openssl crypt-style password hash",
    "created": "2022-03-09T01:24:57Z",
    "modified": "2022-03-17T00:31:46Z",
    "code": [
      "$ openssl passwd MySecret",
      "8E4vqBR4UOYF.",
      "",
      "$ openssl passwd -salt 8E MySecret",
      "8E4vqBR4UOYF."
    ],
    "example": "",
    "output": "",
    "description": [
      "Using the `passwd` option, you can generate password hashes that interoperate with traditional `/etc/passwd` files, newer-style `/etc/shadow` files, and Apache password files.",
      "",
      "## How do I generate a crypt-style password hash?",
      "",
      "You can generate a new hash quite simply:",
      "",
      "    $ openssl passwd MySecret",
      "    8E4vqBR4UOYF.",
      "",
      "If you know an existing password’s “salt,” you can duplicate the hash.",
      "",
      "    $ openssl passwd -salt 8E MySecret",
      "    8E4vqBR4UOYF."
    ],
    "language": "bash",
    "tags": [
      "security"
    ]
  },
  {
    "id": 241,
    "title": "openssl benchmark",
    "created": "2022-03-09T01:24:01Z",
    "modified": "2022-03-17T00:31:51Z",
    "code": [
      "openssl speed",
      ""
    ],
    "example": "",
    "output": "",
    "description": [
      "How do I benchmark my system’s performance?",
      "",
      "The OpenSSL developers have built a benchmarking suite directly into the `openssl` binary. It’s accessible via the `speed` option. It tests how many operations it can perform in a given time, rather than how long it takes to perform a given number of operations. This strikes me as quite sane, because the benchmarks don’t take significantly longer to run on a slow system than on a fast one.",
      "",
      "To run a catchall benchmark, run it without any further options."
    ],
    "language": "bash",
    "tags": []
  },
  {
    "id": 240,
    "title": "stat - display file properties",
    "created": "2022-03-09T00:44:04Z",
    "modified": "2022-03-17T00:23:45Z",
    "code": [
      "stat --printf='%U\\n%G\\n%z\\n' $FILEORDIR"
    ],
    "example": [
      "stat --printf='%U\\n%G\\n%z\\n' .git"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "text",
      "gnu"
    ]
  },
  {
    "id": 239,
    "title": "systemctl examples",
    "created": "2022-03-08T21:36:37Z",
    "modified": "2022-03-23T16:46:05Z",
    "code": [
      "## VIEWING systemd INFORMATION",
      "",
      "systemctl list-dependencies # Show a unit’s dependencies",
      "systemctl list-sockets      # List sockets and what activates",
      "systemctl list-jobs         # View active systemd jobs",
      "systemctl list-unit-files   # See unit files and their states",
      "systemctl list-units        # Show if units are loaded/active",
      "systemctl get-default       # List default target (like run level)",
      "",
      "## WORKING WITH SERVICES",
      "",
      "systemctl stop service        # Stop a running service",
      "systemctl start service       # Start a service",
      "systemctl restart service     # Restart a running service",
      "systemctl reload service      # Reload all config files in service",
      "systemctl daemon-reload       # Must run to reload changed unit files",
      "systemctl status service      # See if service is running/enabled",
      "systemctl --failed            # Shows services that failed to run",
      "systemctl reset-failed        # Resets any units from failed state",
      "systemctl enable service      # Enable a service to start on boot",
      "systemctl disable service     # Disable service--won’t start at boot",
      "systemctl show service        # Show properties of a service (or other unit)",
      "systemctl edit service        # Create snippit to drop in unit file",
      "systemctl edit --full service # Edit entire unit file for service",
      "H host status network         # Run any systemctl command remotely",
      "",
      "## CHANGING SYSTEM STATES",
      "",
      "systemctl reboot    # Reboot the system (reboot.target)",
      "systemctl poweroff  # Power off the system (poweroff.target)",
      "systemctl emergency # Put in emergency mode (emergency.target)",
      "systemctl default   # Back to default target (multi-user.target)",
      "",
      "## VIEWING LOG MESSAGES",
      "",
      "journalctl                    # Show all collected log messages",
      "journalctl -u network.service # See network service messages",
      "journalctl -f                 # Follow messages as they appear",
      "journalctl -k                 # Show only kernel messages"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "service"
    ]
  },
  {
    "id": 238,
    "title": "openssl - verify checksum",
    "created": "2022-03-04T18:32:12Z",
    "modified": "2022-03-16T19:32:35Z",
    "code": [
      "openssl sha1 -sha256 file.txt | awk '{print $2}'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "security"
    ],
    "url": "https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3"
  },
  {
    "id": 237,
    "title": "print statistics of a process",
    "created": "2022-03-04T00:39:31Z",
    "modified": "2022-03-04T00:39:31Z",
    "code": [
      "prtstat $PID"
    ],
    "example": [
      "$ prtstat 3216"
    ],
    "output": "",
    "description": [
      "prtstat  prints  the statistics of the specified process.  This information comes from the /proc/PID/stat file.",
      ""
    ],
    "language": "bash",
    "tags": []
  },
  {
    "id": 236,
    "title": "mpstat - processors related statistics.",
    "created": "2022-03-03T21:23:52Z",
    "modified": "2022-03-17T00:24:02Z",
    "code": [
      "mpstat 2 5",
      ""
    ],
    "example": "",
    "output": "",
    "description": [
      "The mpstat command writes to standard output activities for each available processor, processor  0  being",
      "the first one.  Global average activities among all processors are also reported.  The mpstat command can",
      "be used both on SMP and UP machines, but in the latter, only global average activities will  be  printed.",
      "If no activity has been selected, then the default report is the CPU utilization report.",
      "",
      "The  interval parameter specifies the amount of time in seconds between each report.  A value of 0 (or no",
      "parameters at all) indicates that processors statistics are to be reported  for  the  time  since  system",
      "startup  (boot).  The count parameter can be specified in conjunction with the interval parameter if this",
      "one is not set to zero. The value of count determines the number of reports generated at interval seconds",
      "apart.  If  the interval parameter is specified without the count parameter, the mpstat command generates",
      "reports continuously.",
      ""
    ],
    "language": "bash",
    "tags": [
      "system"
    ]
  },
  {
    "id": 235,
    "title": "read network interface statistics",
    "created": "2022-03-03T21:21:16Z",
    "modified": "2022-03-17T00:32:21Z",
    "code": [
      "ifstat -j -p"
    ],
    "example": "",
    "output": "",
    "description": [
      "ifstat  neatly  prints  out network interface statistics.  ",
      "",
      "The utility keeps records of the previous data displayed in history files and by default only shows difference between the last and  the  current  call.",
      "",
      "Location  of  the history files defaults to /tmp/.ifstat.u$UID but may be overridden with the IFSTAT_HISTORY environment variable. "
    ],
    "language": "bash",
    "tags": [
      "network",
      "system"
    ]
  },
  {
    "id": 234,
    "title": "procinfo: display all system status gathered from /proc",
    "created": "2022-03-03T17:16:31Z",
    "modified": "2022-03-03T17:16:31Z",
    "code": [
      "procinfo -a"
    ],
    "example": "",
    "output": "",
    "description": [
      "usage: procinfo [-fsmadiDSbhv] [-nN] [-Ffile]",
      "",
      "        -s      display memory, disk, IRQ & DMA info (default)",
      "        -m      display module and device info",
      "        -a      display all info",
      "        -f      run full screen",
      "",
      "        -i      show all IRQ channels, not just those used",
      "        -nN     pause N second between updates (implies -f)",
      "        -d      show differences rather than totals (implies -f)",
      "        -D      show current memory/swap usage, differences on rest",
      "        -S      with -nN and -d/-D, always show values per second",
      "        -r      show memory usage -/+ buffers/cache",
      "        -Ffile  print output to file -- normally a tty",
      "        -v      print version info",
      "        -h      print this help"
    ],
    "language": "bash",
    "tags": []
  },
  {
    "id": 233,
    "title": "show most expensive CPU process",
    "created": "2022-03-03T17:13:49Z",
    "modified": "2022-03-03T17:13:49Z",
    "code": [
      "dstat --top-cpu",
      ""
    ],
    "example": "",
    "output": "",
    "description": [
      "--top-cpu",
      "    show most expensive CPU process",
      "",
      "--top-cpu-adv",
      "    show most expensive CPU process (incl. pid and other stats)",
      "",
      "--top-cputime",
      "    show process using the most CPU time (in ms)",
      "",
      "--top-cputime-avg",
      "    show process with the highest average timeslice (in ms)",
      "",
      "--top-int",
      "    show most frequent interrupt",
      "",
      "--top-io",
      "    show most expensive I/O process",
      "",
      "--top-io-adv",
      "    show most expensive I/O process (incl. pid and other stats)",
      "",
      "--top-latency",
      "    show process with highest total latency (in ms)",
      "",
      "--top-latency-avg",
      "    show process with the highest average latency (in ms)",
      "",
      "--top-mem",
      "    show process using the most memory",
      "",
      "--top-oom",
      "    show process that will be killed by OOM the first",
      "",
      ""
    ],
    "language": "bash",
    "tags": []
  },
  {
    "id": 232,
    "title": "gnu tools",
    "created": "2022-03-03T17:11:18Z",
    "modified": "2022-03-03T17:11:18Z",
    "code": [
      "man dstat"
    ],
    "example": "",
    "output": "",
    "description": [
      "   Performance tools",
      "       ifstat(1), iftop(8), iostat(1), mpstat(1), netstat(1), nfsstat(1), nstat, vmstat(1), xosview(1)",
      "",
      "   Debugging tools",
      "       htop(1), lslk(1), lsof(8), top(1)",
      "",
      "   Process tracing",
      "       ltrace(1), pmap(1), ps(1), pstack(1), strace(1)",
      "",
      "   Binary debugging",
      "       ldd(1), file(1), nm(1), objdump(1), readelf(1)",
      "",
      "   Memory usage tools",
      "       free(1), memusage, memusagestat, slabtop(1)",
      "",
      "   Accounting tools",
      "       dump-acct, dump-utmp, sa(8)",
      "",
      "   Hardware debugging tools",
      "       dmidecode, ifinfo(1), lsdev(1), lshal(1), lshw(1), lsmod(8), lspci(8), lsusb(8), smartctl(8), x86info(1)",
      "",
      "   Application debugging",
      "       mailstats(8), qshape(1)",
      "",
      "   Xorg related tools",
      "       xdpyinfo(1), xrestop(1)",
      "",
      "   Other useful info",
      "       collectl(1), proc(5), procinfo(8)",
      "",
      ""
    ],
    "language": "bash",
    "tags": [
      "reference"
    ]
  },
  {
    "id": 231,
    "title": "list block devices",
    "created": "2022-03-03T17:04:25Z",
    "modified": "2022-03-23T21:26:37Z",
    "code": [
      "lsblk -a -p",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "system"
    ]
  },
  {
    "id": 230,
    "title": "examples illustrating substring expansion",
    "created": "2022-03-03T16:38:03Z",
    "modified": "2022-03-03T16:38:03Z",
    "code": [
      "$ set -- 01234567890abcdefgh",
      "",
      "$ echo ${1:7}",
      "7890abcdefgh",
      "$ echo ${1:7:0}",
      "",
      "$ echo ${1:7:2}",
      "78",
      "",
      "$ echo ${1:7:-2}",
      "7890abcdef",
      "",
      "$ echo ${1: -7}",
      "bcdefgh",
      "",
      "$ echo ${1: -7:0}",
      "",
      "$ echo ${1: -7:2}",
      "bc",
      "",
      "$ echo ${1: -7:-2}",
      "bcdef"
    ],
    "example": "",
    "output": "",
    "description": [
      "'${PARAMETER:OFFSET:LENGTH}'",
      "     This is referred to as Substring Expansion.  It expands to up to",
      "     LENGTH characters of the value of PARAMETER starting at the",
      "     character specified by OFFSET.  If PARAMETER is '@', an indexed",
      "     array subscripted by '@' or '*', or an associative array name, the",
      "     results differ as described below.  If LENGTH is omitted, it",
      "     expands to the substring of the value of PARAMETER starting at the",
      "     character specified by OFFSET and extending to the end of the",
      "     value.  LENGTH and OFFSET are arithmetic expressions (*note Shell",
      "     Arithmetic::).",
      "",
      "     If OFFSET evaluates to a number less than zero, the value is used",
      "     as an offset in characters from the end of the value of PARAMETER.",
      "     If LENGTH evaluates to a number less than zero, it is interpreted",
      "     as an offset in characters from the end of the value of PARAMETER",
      "     rather than a number of characters, and the expansion is the",
      "     characters between OFFSET and that result.  Note that a negative",
      "     offset must be separated from the colon by at least one space to",
      "     avoid being confused with the ':-' expansion."
    ],
    "language": "bash",
    "tags": [
      "text"
    ]
  },
  {
    "id": 229,
    "title": "systemctl - Get enabled services",
    "created": "2022-03-03T16:33:28Z",
    "modified": "2022-03-16T19:42:53Z",
    "code": [
      "systemctl list-unit-files --state=enabled --type=service --no-legend | awk '{print $1}'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "service"
    ]
  },
  {
    "id": 228,
    "title": "get non default values for ansible config",
    "created": "2022-03-03T16:14:00Z",
    "modified": "2022-03-03T16:14:00Z",
    "code": [
      "ansible-config dump | grep -v '\\(default\\)' | sed 's,(.*cfg),,g'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "ansible"
    ]
  },
  {
    "id": 227,
    "title": "disable ldap login for user",
    "created": "2022-03-01T01:58:08Z",
    "modified": "2022-03-04T18:33:21Z",
    "code": [
      "echo '-:svc_prddbaseceng:ALL' | tee -a /etc/security/access.conf",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "example",
      "security"
    ],
    "url": "https://serverfault.com/a/910048"
  },
  {
    "id": 226,
    "title": "restart failed services",
    "created": "2022-03-01T01:40:06Z",
    "modified": "2022-03-03T16:21:28Z",
    "code": [
      "systemctl list-units --failed --no-legend | awk '{print $1}'| xargs -I % systemctl status % && systemctl restart %"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "service"
    ]
  },
  {
    "id": 225,
    "title": "kill all processes for user",
    "created": "2022-03-01T01:20:44Z",
    "modified": "2022-03-01T01:20:44Z",
    "code": [
      "pkill -HUP -u annie_tran"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 224,
    "title": "zip files in current directory",
    "created": "2022-02-28T20:14:56Z",
    "modified": "2022-02-28T20:18:55Z",
    "code": [
      "find . -maxdepth 1 -type d -exec zip archive.zip {} +"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://devconnected.com/how-to-zip-folder-on-linux/"
  },
  {
    "id": 223,
    "title": "Display the running processes of a container",
    "created": "2022-02-28T19:22:41Z",
    "modified": "2022-03-23T21:27:40Z",
    "code": [
      "$ docker top awx_task"
    ],
    "example": "",
    "output": "",
    "description": [
      "Usage:  docker top CONTAINER [ps OPTIONS]",
      "",
      "Display the running processes of a container",
      ""
    ],
    "language": "bash",
    "tags": [
      "docker"
    ]
  },
  {
    "id": 222,
    "title": "nstat (better way of getting network statistics)",
    "created": "2022-02-24T20:55:47Z",
    "modified": "2022-03-03T16:14:29Z",
    "code": [
      "nstat -a -t 60"
    ],
    "example": "",
    "output": "",
    "description": [
      "https://loicpefferkorn.net/2018/09/linux-network-statistics-reference/",
      "https://www.kernel.org/doc/html/latest/networking/"
    ],
    "language": "bash",
    "tags": [
      "network"
    ],
    "url": "https://www.redhat.com/sysadmin/nstat-command-linux"
  },
  {
    "id": 221,
    "title": "systemd-cgls: recursively show control group contents.",
    "created": "2022-02-24T09:27:47Z",
    "modified": "2022-02-24T09:27:47Z",
    "code": [
      "systemd-cgls"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "http://0pointer.de/blog/projects/systemd-for-admins-2.html"
  },
  {
    "id": 220,
    "title": "Gather listening ports",
    "created": "2022-02-24T09:15:34Z",
    "modified": "2022-03-03T16:27:10Z",
    "code": [
      "netstat -ln --inet --program"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "network"
    ],
    "url": "https://github.com/openstack/openstack-ansible/blob/master/playbooks/listening-port-report.yml"
  },
  {
    "id": 219,
    "title": "map view of pids owned by services",
    "created": "2022-02-24T08:50:50Z",
    "modified": "2022-03-17T00:24:31Z",
    "code": [
      "ps xawf -eo pid,user,cgroup,args"
    ],
    "example": "",
    "output": "",
    "description": [
      "n systemd we place every process that is spawned in a control group named after its service. Control groups (or cgroups) at their most basic are simply groups of processes that can be arranged in a hierarchy and labelled individually. When processes spawn other processes these children are automatically made members of the parents cgroup. Leaving a cgroup is not possible for unprivileged processes. Thus, cgroups can be used as an effective way to label processes after the service they belong to and be sure that the service cannot escape from the label, regardless how often it forks or renames itself. Furthermore this can be used to safely kill a service and all processes it created, again with no chance of escaping."
    ],
    "language": "bash",
    "tags": [
      "system"
    ],
    "url": "http://0pointer.de/blog/projects/systemd-for-admins-2.html"
  },
  {
    "id": 218,
    "title": "clean docker (to factory)",
    "created": "2022-02-24T03:43:16Z",
    "modified": "2022-02-24T03:43:16Z",
    "code": [
      "# 1. Stop all containers",
      "docker stop $(docker ps -aq)",
      "",
      "# 2. Remove all containers",
      "docker rm $(docker ps -aq)",
      "",
      "# 3. Prune system",
      "docker system prune -a --volumes",
      "",
      "# 4. Remove all images",
      "docker rmi $(docker images -q)"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "docker"
    ],
    "url": "https://medium.com/@wlarch/no-space-left-on-device-when-using-docker-compose-why-c4a2c783c6f6"
  },
  {
    "id": 217,
    "title": "Delete Orphaned Docker Volumes",
    "created": "2022-02-24T03:37:55Z",
    "modified": "2022-02-24T03:43:58Z",
    "code": [
      "docker volume rm $(docker volume ls -qf dangling=true)"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "docker"
    ],
    "url": "https://medium.com/@wlarch/no-space-left-on-device-when-using-docker-compose-why-c4a2c783c6f6"
  },
  {
    "id": 216,
    "title": "docker root systemd drop-in service",
    "created": "2022-02-24T03:36:17Z",
    "modified": "2022-03-04T18:45:40Z",
    "code": [
      "mkdir -p /u01/docker-root",
      "rsync -a /var/lib/docker/* /u01/docker-root",
      "",
      "echo '[Service]",
      "ExecStart=",
      "ExecStart=/usr/bin/dockerd -g /u01/docker-root -H fd://' >>/etc/systemd/system/docker.service.d/docker.root.conf",
      "",
      "systemctl daemon-reload",
      "systemctl restart docker",
      ""
    ],
    "example": "",
    "output": "",
    "description": [
      "Change docker root directory by creating a systemd drop-in service file",
      "",
      "It is possible to change docker root directory by creating a systemd drop-in service file. This is useful when you want images and containers or docker generated files to be located in another partition or drive."
    ],
    "language": "bash",
    "tags": [
      "docker"
    ],
    "url": "https://medium.com/@wlarch/change-docker-root-directory-by-creating-a-systemd-drop-in-service-file-3c1244244784"
  },
  {
    "id": 215,
    "title": "cygwin - open terminal here",
    "created": "2022-02-22T16:20:19Z",
    "modified": "2022-02-24T20:43:12Z",
    "code": [
      "echo 'cd \"$OLDPWD\"' >> .bashrc",
      "",
      "C:\\Users\\annie_tran.AMERICAS\\cyg\\bin\\bash --login -i",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "cygwin"
    ]
  },
  {
    "id": 214,
    "title": "find files created on this date",
    "created": "2022-02-16T21:22:22Z",
    "modified": "2022-03-17T00:33:36Z",
    "code": [
      "find /tmp -maxdepth 1 -type f -newermt 2022-02-02 ! -newermt 2022-02-04 -print -exec rm -rf {} \\;"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "fs"
    ]
  },
  {
    "id": 213,
    "title": "cleanup leftover open files",
    "created": "2022-02-16T02:56:17Z",
    "modified": "2022-03-03T17:02:24Z",
    "code": [
      "kill -9 $(lsof |grep deleted|awk '{print $2}'|sort -u)"
    ],
    "example": "",
    "output": "",
    "description": [
      "On unices, filenames are just pointers (inodes) that point to the memory where the file resides (which can be a hard drive or even a RAM-backed filesystem). Each file records the number of links to it: the links can be either the filename (plural, if there are multiple hard links to the same file), and also every time a file is opened, the process actually holds the \"link\" to the same space.",
      "",
      "The space is physically freed only if there are no links left (therefore, it's impossible to get to it). That's the only sensible choice: while the file is being used, it's not important if someone else can no longer access it: you are using it and until you close it, you still have control over it - you won't even notice the filename is gone or moved or whatever. That's even used for tempfiles: some implementations create a file and immediately unlink it, so it's not visible in the filesystem, but the process that created it is using it normally. Flash plugin is especially fond of this method: all the downloaded video files are held open, but the filesystem doesn't show them.",
      "",
      "So, the answer is, while the processes have the files still opened, you shouldn't expect to get the space back. It's not freed, it's being actively used. This is also one of the reasons that applications should really close the files when they finish using them. In normal usage, you shouldn't think of that space as free, and this also shouldn't be very common at all - with the exception of temporary files that are unlinked on purpose, there shouldn't really be any files that you would consider being unused, but still open. Try to review if there is a process that does this a lot and consider how you use it, or just find more space.",
      ""
    ],
    "language": "bash",
    "tags": [],
    "url": "https://unix.stackexchange.com/a/182082/464659"
  },
  {
    "id": 212,
    "title": "awx - get token",
    "created": "2022-02-16T01:26:48Z",
    "modified": "2022-03-17T00:33:54Z",
    "code": [
      "get_token() {",
      "echo \"TOWER_HOST=http://$1\" > ",
      "  TOWER_HOST=http://$1 \\",
      "    TOWER_USERNAME=$2 \\",
      "    TOWER_PASSWORD=$3 \\",
      "    awx login -f human | sed 's,export ,,g' | tee -a \".${1%%.*}\"",
      "}"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "ansible"
    ]
  },
  {
    "id": 211,
    "title": "du - aggregate directory size",
    "created": "2022-02-15T21:25:40Z",
    "modified": "2022-03-17T00:33:46Z",
    "code": [
      "du -h -d 1 ."
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "fs"
    ],
    "url": "https://stackoverflow.com/questions/16661982/check-folder-size-in-bash"
  },
  {
    "id": 210,
    "title": "get-aduser - get ex employees",
    "created": "2022-02-15T19:24:34Z",
    "modified": "2022-10-13T00:17:01Z",
    "code": [
      "Get-ADUser -Filter 'Enabled -eq \"False\"' -Properties * |  Select CN,Description,EmployeeStatus, Country, Department,EmployeeJobDescription | Export-CSV enabled.csv"
    ],
    "example": [
      "$ cat enabled.csv | grep 2022 | column -s\\\" -t| sort -k 3"
    ],
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": []
  },
  {
    "id": 209,
    "title": "check memory usage per process",
    "created": "2022-02-10T09:51:17Z",
    "modified": "2022-02-10T09:51:17Z",
    "code": [
      "ps -eo pid,tid,class,rtprio,stat,vsz,rss,comm"
    ],
    "example": "",
    "output": "",
    "description": [
      "These simple commands give you a feel of the memory usage and give the first indication that you have a memory leak when you see that the Rss of a process keeps on increasing. However, they are not very accurate in the absolute measurements of memory usage."
    ],
    "language": "bash",
    "tags": [],
    "url": "https://www.golinuxcloud.com/check-memory-usage-per-process-linux/"
  },
  {
    "id": 208,
    "title": "date unix timestamp to format",
    "created": "2022-02-05T10:32:18Z",
    "modified": "2022-03-17T00:34:01Z",
    "code": [
      "date -d @$TIMESTAMP"
    ],
    "example": [
      "$ date -d @1638163336"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "date"
    ]
  },
  {
    "id": 207,
    "title": "build json using jq",
    "created": "2022-02-05T08:56:09Z",
    "modified": "2022-02-05T08:56:09Z",
    "code": [
      "str='delete delete modified other other other'",
      "lstype=($(echo \"$str\"))",
      "echo '{}' > files.json",
      "",
      "for i in ${lstype[@]}; do",
      "  cat files.json | jq \".$i[.$i|length] |= . + {\\\"date\\\": \\\"$(date +%F%X)\\\"}\" >files.json",
      "done"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 206,
    "title": "create csv from json (jq)",
    "created": "2022-02-05T07:40:54Z",
    "modified": "2022-02-05T07:40:54Z",
    "code": [
      "wget -qO- http://programminghistorian.org/assets/jq_rkm.json | jq -r '.artObjects[] | [.id, .title, .principalOrFirstMaker, .webImage.url] | @csv'",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://programminghistorian.org/en/lessons/json-and-jq"
  },
  {
    "id": 205,
    "title": "ps do not print columns",
    "created": "2022-02-05T07:16:24Z",
    "modified": "2022-02-05T07:16:24Z",
    "code": [
      "ps -o pid=''"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "utils"
    ]
  },
  {
    "id": 204,
    "title": "only get pid",
    "created": "2022-02-05T07:08:34Z",
    "modified": "2022-02-05T07:08:34Z",
    "code": [
      "ps -efo pid"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 203,
    "title": "os detection",
    "created": "2022-02-05T02:51:12Z",
    "modified": "2022-02-05T02:53:47Z",
    "code": [
      "case \"$OSTYPE\" in",
      "  solaris*) echo \"SOLARIS\" ;;",
      "  darwin*)  echo \"OSX\" ;; ",
      "  linux*)   echo \"LINUX\" ;;",
      "  bsd*)     echo \"BSD\" ;;",
      "  msys*)    echo \"WINDOWS\" ;;",
      "  cygwin*)  echo \"ALSO WINDOWS\" ;;",
      "  *)        echo \"unknown: $OSTYPE\" ;;",
      "esac"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "utils"
    ],
    "url": "https://stackoverflow.com/a/18434831/7460613"
  },
  {
    "id": 202,
    "title": "get name server",
    "created": "2022-02-03T03:40:35Z",
    "modified": "2022-02-10T16:14:52Z",
    "code": [
      " host -t ns example.com"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "network"
    ],
    "url": "https://serverfault.com/a/413129"
  },
  {
    "id": 201,
    "title": "Check client certificate",
    "created": "2022-02-03T03:24:11Z",
    "modified": "2022-02-03T03:24:11Z",
    "code": [
      "echo '' | openssl s_client -connect awxserver02.us.example.com:443 2>/dev/null | openssl x509 -text -noout | grep -A 1 \"Public Key Algorithm\""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "network"
    ],
    "url": "https://access.redhat.com/discussions/4524081"
  },
  {
    "id": 200,
    "title": "Cleaning up the VS Code Server on the remote",
    "created": "2022-02-02T07:23:39Z",
    "modified": "2022-03-14T22:33:56Z",
    "code": [
      "kill -9 `ps ax | grep \"remoteExtensionHostAgent.js\" | grep -v grep | awk '{print $1}'`",
      "kill -9 `ps ax | grep \"watcherService\" | grep -v grep | awk '{print $1}'`",
      "rm -rf ~/.vscode-server # Or ~/.vscode-server-insiders"
    ],
    "example": "",
    "output": "",
    "description": [
      "The SSH extension provides a command for cleaning up the VS Code Server from the remote machine, Remote-SSH: Uninstall VS Code Server from Host.... The command does two things: it kills any running VS Code Server processes and it deletes the folder where the server was installed."
    ],
    "language": "bash",
    "tags": [
      "vscode"
    ],
    "url": "https://code.visualstudio.com/docs/remote/troubleshooting#_cleaning-up-the-vs-code-server-on-the-remote"
  },
  {
    "id": 199,
    "title": "get process pid and parent id",
    "created": "2022-02-02T07:22:39Z",
    "modified": "2022-03-17T00:25:01Z",
    "code": [
      "ps -ax -o pid=,ppid=,command= | grep -v \"\\[\" | sort -k3 -k2 -k1"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 198,
    "title": "start ssh agent on login",
    "created": "2022-02-02T06:30:53Z",
    "modified": "2022-02-02T06:30:53Z",
    "code": [
      "if [ -z \"$SSH_AUTH_SOCK\" ]; then",
      "   # Check for a currently running instance of the agent",
      "   RUNNING_AGENT=\"`ps -ax | grep 'ssh-agent -s' | grep -v grep | wc -l | tr -d '[:space:]'`\"",
      "   if [ \"$RUNNING_AGENT\" = \"0\" ]; then",
      "        # Launch a new instance of the agent",
      "        ssh-agent -s &> .ssh/ssh-agent",
      "   fi",
      "   eval `cat .ssh/ssh-agent`",
      "fi"
    ],
    "example": "",
    "output": "",
    "description": [
      "To start the SSH Agent automatically on login, add these lines to your ~/.bash_profile"
    ],
    "language": "bash",
    "tags": [],
    "url": "https://code.visualstudio.com/docs/remote/troubleshooting#_enabling-alternate-ssh-authentication-methods"
  },
  {
    "id": 197,
    "title": "enable ssh controlmaster - ssh sessions",
    "created": "2022-02-02T03:38:50Z",
    "modified": "2022-03-03T16:40:39Z",
    "code": [
      "Host *",
      "    ControlMaster auto",
      "    ControlPath  ~/.ssh/sockets/%r@%h-%p",
      "    ControlPersist  600"
    ],
    "example": "",
    "output": "",
    "description": [
      "If you are on macOS and Linux and want to reduce how often you have to enter a password or token, you can enable the ControlMaster feature on your local machine so that OpenSSH runs multiple SSH sessions over a single connection.",
      "",
      "To enable ControlMaster:",
      "",
      "Add an entry like this to your SSH config file:",
      "",
      "Host *",
      "    ControlMaster auto",
      "    ControlPath  ~/.ssh/sockets/%r@%h-%p",
      "    ControlPersist  600",
      "Then run mkdir -p ~/.ssh/sockets to create the sockets folder.",
      "",
      "Setting up the SSH Agent#"
    ],
    "language": "config",
    "tags": [
      "network"
    ],
    "url": "https://code.visualstudio.com/docs/remote/troubleshooting#_enabling-alternate-ssh-authentication-methods"
  },
  {
    "id": 196,
    "title": "env reduced environment",
    "created": "2022-01-28T23:59:27Z",
    "modified": "2022-01-28T23:59:27Z",
    "code": [
      "env - PATH=\"$PATH\" foo"
    ],
    "example": "",
    "output": "",
    "description": [
      "Run foo with a reduced environment, preserving only the original PATH to avoid problems in locating foo."
    ],
    "language": "bash",
    "tags": [],
    "url": "https://www.gnu.org/software/coreutils/manual/coreutils.html#env-invocation"
  },
  {
    "id": 195,
    "title": "List available powershell commands",
    "created": "2022-01-27T21:42:54Z",
    "modified": "2022-01-27T21:42:54Z",
    "code": [
      "gcm -module DISM"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": [],
    "url": "https://stackoverflow.com/a/34537239/7460613"
  },
  {
    "id": 194,
    "title": "util linux",
    "created": "2022-01-21T18:49:43Z",
    "modified": "2022-03-17T00:25:33Z",
    "code": [
      "file_system=(cat chmod chown chgrp cksum cmp cp dd du df file fuser ln ls mkdir mv pax pwd rm rmdir split tee touch type umask)",
      "processes=(at bg crontab fg kill nice ps time)",
      "user_environment=(env exit logname mesg talk tput uname who write)",
      "text_processing=(awk basename comm csplit cut diff dirname ed ex fold head iconv join m4 more nl paste patch printf sed sort strings tail tr uniq vi wc xargs)",
      "shell_builtins=(alias cd echo test unset wait)",
      "searching=(find grep)",
      "documentation=(man)",
      "software_development=(ar ctags lex make nm strip yacc)",
      "miscellaneous=(bc cal expr lp od sleep true false)"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "gnu"
    ],
    "url": "https://en.wikipedia.org/wiki/Util-linux"
  },
  {
    "id": 193,
    "title": "psql: cast json and pretty print",
    "created": "2022-01-21T05:53:13Z",
    "modified": "2022-03-16T18:53:10Z",
    "code": [
      "select jsonb_pretty(extra_data::jsonb) ",
      "from main_joblaunchconfig where extra_data <> '{}';"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "sql",
    "tags": [
      "db",
      "postgres",
      "psql"
    ],
    "url": "https://stackoverflow.com/a/68679549/7460613"
  },
  {
    "id": 192,
    "title": "postgresql list and order tables by size",
    "created": "2022-01-21T05:26:05Z",
    "modified": "2022-01-24T17:16:06Z",
    "code": [
      "select table_name, pg_size_pretty( pg_relation_size(quote_ident(table_name)) )",
      "from information_schema.tables",
      "where table_schema = 'public'",
      "order by pg_relation_size(quote_ident(table_name)) desc;"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "sql",
    "tags": [
      "db"
    ],
    "url": "https://stackoverflow.com/a/58916394/7460613"
  },
  {
    "id": 191,
    "title": "clear screen",
    "created": "2022-01-21T01:29:00Z",
    "modified": "2022-01-21T01:29:00Z",
    "code": [
      "alias cls='printf \"\\033c\"'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://linoxide.com/commands-clear-linux-terminal/"
  },
  {
    "id": 190,
    "title": "get list of tables and number of rows (postgres)",
    "created": "2022-01-19T22:12:32Z",
    "modified": "2022-01-19T22:12:32Z",
    "code": [
      "select n.nspname as table_schema,",
      "       c.relname as table_name,",
      "       c.reltuples as rows",
      "from pg_class c",
      "join pg_namespace n on n.oid = c.relnamespace",
      "where c.relkind = 'r'",
      "      and n.nspname not in ('information_schema','pg_catalog')",
      "order by c.reltuples desc;"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "sql",
    "tags": [
      "db"
    ],
    "url": "https://dataedo.com/kb/query/postgresql/list-of-tables-by-the-number-of-rows"
  },
  {
    "id": 189,
    "title": "list files with time style & hides groups",
    "created": "2022-01-19T19:37:55Z",
    "modified": "2022-01-19T19:37:55Z",
    "code": [
      "ls -lptr --time-style='+%s %F %T' --group-directories-first -o"
    ],
    "example": "",
    "output": "",
    "description": [
      "       -o     like -l, but do not list group information"
    ],
    "language": "bash",
    "tags": [
      "shell"
    ]
  },
  {
    "id": 188,
    "title": "Get-WmiObject - get computer system properties",
    "created": "2022-01-18T16:42:19Z",
    "modified": "2022-10-13T00:05:37Z",
    "code": [
      "Get-WmiObject -Class Win32_ComputerSystem -Property *"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": []
  },
  {
    "id": 187,
    "title": "Start a static HTTP server",
    "created": "2022-01-17T16:59:05Z",
    "modified": "2022-03-17T00:21:51Z",
    "code": [
      "python -m SimpleHTTPServer 8080"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "python",
    "tags": [
      "http"
    ],
    "url": "https://chromium.googlesource.com/catapult/+/refs/heads/main/netlog_viewer/bin/serve_static"
  },
  {
    "id": 186,
    "title": "zip directory",
    "created": "2022-01-10T18:55:33Z",
    "modified": "2022-01-10T18:55:33Z",
    "code": [
      "zip $ZIP_NAME.zip -r $DIRNAME"
    ],
    "example": "",
    "output": "",
    "description": [
      "Creating a zip archive from a directory",
      "The command line option -r adds files recursively. Thus, it allows to create a zip file from an entire (sub-)directory:"
    ],
    "language": "bash",
    "tags": [
      "shell"
    ],
    "url": "https://renenyffenegger.ch/notes/Linux/shell/commands/zip"
  },
  {
    "id": 185,
    "title": "random variable",
    "created": "2022-01-10T18:38:26Z",
    "modified": "2022-01-10T18:38:26Z",
    "code": [
      "echo \"random: $RANDOM\""
    ],
    "example": [
      "$ TMPFILE='random'$RANDOM",
      "$ echo $TMPFILE"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "shell"
    ]
  },
  {
    "id": 184,
    "title": "date - get N days ago",
    "created": "2022-01-10T15:55:46Z",
    "modified": "2022-03-23T21:36:44Z",
    "code": [
      "date -d \"$date -7 days\" +\"%Y-%m-%d\""
    ],
    "example": [
      "# date today",
      "$ date +\"%Y-%m-%d\"",
      "2022-03-23",
      "",
      "# date 7 days ago",
      "$ date -d \"$date -7 days\" +\"%Y-%m-%d\"",
      "2022-03-16"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://stackoverflow.com/a/53326257/7460613"
  },
  {
    "id": 183,
    "title": "bat file for opening cygwin in current directory",
    "created": "2022-01-04T23:18:52Z",
    "modified": "2022-03-17T00:26:23Z",
    "code": [
      "@echo off",
      "setlocal enableextensions",
      "",
      "set CURRENTDIR=%cd%",
      "",
      "C:",
      "chdir \"%~dp0bin\"",
      "set TERM=",
      "",
      "bash --login -i -c \"eval \\\"cd '$CURRENTDIR'\\\";$SHELL\""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "cmd",
    "tags": [
      "example",
      "cygwin"
    ]
  },
  {
    "id": 182,
    "title": "type - display information about command",
    "created": "2022-01-04T19:28:06Z",
    "modified": "2022-03-17T00:26:45Z",
    "code": [
      "type"
    ],
    "example": [
      "$ type cd_func"
    ],
    "output": "",
    "description": [
      "Options:",
      "  -a        display all locations containing an executable named NAME;",
      "            includes aliases, builtins, and functions, if and only if",
      "            the `-p' option is not also used",
      "  -f        suppress shell function lookup",
      "  -P        force a PATH search for each NAME, even if it is an alias,",
      "            builtin, or function, and returns the name of the disk file",
      "            that would be executed",
      "  -p        returns either the name of the disk file that would be executed,",
      "            or nothing if `type -t NAME' would not return `file'",
      "  -t        output a single word which is one of `alias', `keyword',",
      "            `function', `builtin', `file' or `', if NAME is an alias,",
      "            shell reserved word, shell function, shell builtin, disk file,",
      "            or not found, respectively",
      ""
    ],
    "language": "bash",
    "tags": [
      "shell"
    ]
  },
  {
    "id": 181,
    "title": "git diff side by side",
    "created": "2022-01-04T03:56:34Z",
    "modified": "2022-03-03T17:00:24Z",
    "code": [
      "git difftool -y -x sdiff",
      "",
      "git difftool -y -x sdiff path/to/file"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "git"
    ],
    "url": "https://stackoverflow.com/a/39225649/7460613"
  },
  {
    "id": 180,
    "title": "List Network Facing Services",
    "created": "2022-01-04T01:56:35Z",
    "modified": "2022-03-04T18:49:21Z",
    "code": [
      "ss -atpu"
    ],
    "example": "",
    "output": "",
    "description": [
      "TCP",
      "See the Peer Address:Port column of the ss readout. The process sshd is listening on *:*, which translates into any incoming IPv4 address to any port, and over any network interface. The next line shows an established SSH connection from IP address 198.51.100.2 via ephemeral port 54820. The last line, :::* denotes the sshd process listening for any incoming SSH connections over IPv6 to any port, and again over any network interface.",
      "",
      "UDP",
      "UDP sockets are stateless, meaning they are either open or closed and every process’s connection is independent of those which occurred before and after. This is in contrast to TCP connection states such as LISTEN, ESTABLISHED and CLOSE_WAIT. The ss output above shows no UDP connections.",
      ""
    ],
    "language": "bash",
    "tags": [
      "network"
    ],
    "url": "https://www.linode.com/docs/guides/securing-your-server/"
  },
  {
    "id": 179,
    "title": "sendmail template",
    "created": "2022-01-04T01:19:04Z",
    "modified": "2022-03-17T00:11:45Z",
    "code": [
      "echo \"To: annie_tran@example.com",
      "Subject: my subject",
      "Content-Type: text/html",
      "",
      "$(cat test-html-email.html)\" | sendmail -t",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 178,
    "title": "sshpass - read ssh password from file",
    "created": "2022-01-03T16:40:44Z",
    "modified": "2022-03-17T00:27:45Z",
    "code": [
      "sshpass -f .secrets/sshpass/svc_npdbmongos ssh -o StrictHostKeyChecking=no svc_npdbmongos@cfinlmdrprf17.us.example.com"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "ssh"
    ]
  },
  {
    "id": 177,
    "title": "docker - resolve no space on device",
    "created": "2021-12-29T18:00:23Z",
    "modified": "2022-03-17T00:27:23Z",
    "code": [
      "systemctl stop docker",
      "mv /u01/docker /u01/docker.bkp-$(date +%F)",
      "mv /var/lib/docker /u01",
      "mkdir -p /var/lib/docker",
      "mount --rbind /u01/docker /var/lib/docker",
      "systemctl start docker"
    ],
    "example": "",
    "output": "",
    "description": [
      "ERROR: failed to register layer: Error processing tar file(exit status 1):",
      "no space left on device",
      ""
    ],
    "language": "bash",
    "tags": [
      "docker"
    ]
  },
  {
    "id": 176,
    "title": "list files and sort by size",
    "created": "2021-12-29T17:31:57Z",
    "modified": "2021-12-29T20:52:33Z",
    "code": [
      "du -h | sort -rh"
    ],
    "example": "",
    "output": "",
    "description": [
      "Following @StéphaneChazelas, this works for me: find . -type f -print0 | xargs -0 du -h | sort -rh. If you just want say the largest 30 files: find . -type f -print0 | xargs -0 du -h | sort -rh | head -n 30"
    ],
    "language": "bash",
    "tags": [],
    "url": "https://unix.stackexchange.com/a/53738/464659"
  },
  {
    "id": 175,
    "title": "Getting Server Certificate",
    "created": "2021-12-29T03:08:27Z",
    "modified": "2022-01-03T06:10:01Z",
    "code": [
      "$ openssl s_client -showcerts -connect awxserver02.us.example.com:80"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "network"
    ],
    "url": "https://www.baeldung.com/linux/curl-https-connection"
  },
  {
    "id": 174,
    "title": "curl vault secrets",
    "created": "2021-12-29T02:15:12Z",
    "modified": "2022-03-03T20:46:35Z",
    "code": [
      "VAULT_TOKEN=...",
      "",
      "curl -H \"X-Vault-Namespace: infrastructure/database/engineering/tools/dbv2/dbv2/\" -H \"X-Vault-Request: true\" -H \"X-Vault-Token: $VAULT_TOKEN\" https://hcvault-nonprod.example.com/v1/kv/data/SERVICE_ACCOUNT/MONGO/NONPROD"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "vault"
    ]
  },
  {
    "id": 173,
    "title": "devtools: get all css items",
    "created": "2021-12-15T19:18:26Z",
    "modified": "2022-01-03T06:10:47Z",
    "code": [
      "css = new Set(",
      "  [",
      "    ...$$('style[data-load-themed-styles]')",
      "      .map(e =>",
      "        e.innerText",
      "          .replace(/(\\u007D)/g, '$1\\n')",
      "          .split('\\n')",
      "          .filter(Boolean)",
      "          .filter(p => p.indexOf('media') < 0)",
      "          .filter(p => !/^[^_]+_[\\d\\w]+\\s?{/.test(p))",
      "          .filter(p => !/.*[\\[\\]].*/.test(p))",
      "      )",
      "      .flat(2),",
      "  ]",
      "    .filter(e => e.trim())",
      "    .map(e => e.replace(/\\n/g, '').split('{'))",
      "    .map(c => c[0].split(',').map(a => a + '\\u007B' + c[1]))",
      "    .flat(2)",
      "    .sort()",
      ")",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "javascript",
    "tags": []
  },
  {
    "id": 172,
    "title": "get git symlink files",
    "created": "2021-12-08T20:47:47Z",
    "modified": "2021-12-30T19:53:06Z",
    "code": [
      "git ls-files -s | awk '/120000/{print $4}'",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "git"
    ]
  },
  {
    "id": 171,
    "title": "Get AD User from another domain (ldap)",
    "created": "2021-12-06T22:06:14Z",
    "modified": "2022-10-13T00:08:09Z",
    "code": [
      "Get-ADUser -Server amer.example.com -Identity annie_tran -Properties *"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": [
      "AD"
    ]
  },
  {
    "id": 170,
    "title": "get AD domain controller (amer.example.com)",
    "created": "2021-12-06T22:04:12Z",
    "modified": "2022-10-13T00:07:55Z",
    "code": [
      "Get-ADDomainController"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": [
      "AD"
    ]
  },
  {
    "id": 169,
    "title": "set existing variables only",
    "created": "2021-12-03T00:14:58Z",
    "modified": "2022-03-17T00:28:27Z",
    "code": [
      ": ${SETLANG=\"env LANG= LC_MESSAGES= LC_ALL= LANGUAGE=\"}",
      ": ${MAKEINFO=\"makeinfo\"}",
      ": ${TEXI2DVI=\"texi2dvi\"}",
      ": ${DOCBOOK2HTML=\"docbook2html\"}",
      ": ${DOCBOOK2PDF=\"docbook2pdf\"}",
      ": ${DOCBOOK2TXT=\"docbook2txt\"}",
      ": ${GENDOCS_TEMPLATE_DIR=\".\"}",
      ": ${PERL='perl'}",
      ": ${TEXI2HTML=\"texi2html\"}"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 168,
    "title": "delete null value",
    "created": "2021-12-01T22:57:09Z",
    "modified": "2022-01-03T06:10:34Z",
    "code": [
      "tr -d '\\0'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 167,
    "title": "ansible-doc snippet",
    "created": "2021-11-29T16:35:32Z",
    "modified": "2022-01-03T06:11:18Z",
    "code": [
      "ansible-doc awx.awx.tower_ad_hoc_command --snippet",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "ansible"
    ],
    "url": "https://www.oreilly.com/library/view/learn-ansible/9781788998758/6fc4eb99-e58e-46d3-b9d5-0370f293ec54.xhtml"
  },
  {
    "id": 166,
    "title": "Get commits that have deleted files",
    "created": "2021-11-18T18:38:39Z",
    "modified": "2022-01-03T06:11:31Z",
    "code": [
      "git log --diff-filter=D --summary"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "git"
    ],
    "url": "https://stackoverflow.com/a/953573"
  },
  {
    "id": 165,
    "title": "windows - repair health",
    "created": "2021-11-17T04:50:57Z",
    "modified": "2022-01-03T06:24:38Z",
    "code": [
      "dism /online /cleanup-image /restorehealth"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "cmd",
    "tags": [
      "example"
    ],
    "url": "https://support.microsoft.com/en-us/topic/system-file-checker-finds-corrupt-files-after-installing-kb2821895-12d6d944-25f5-fc42-551b-05607a026e9d"
  },
  {
    "id": 164,
    "title": "proc environ - format for readability",
    "created": "2021-11-12T21:34:39Z",
    "modified": "2022-03-17T00:29:41Z",
    "code": [
      "cat /proc/$$/environ | sed 's/\\([A-Z_]*=\\)/\\n\\1/g'",
      ""
    ],
    "example": [
      "$ cat /proc/$$/environ",
      "USER=annieLOGNAME=annieHOME=/home/anniePATH=/usr/local/bin:/usr/binMAIL=/var/mail/annieSHELL=/bin/bashTERM=xtermDISPLAY=localhost:10.0",
      "",
      "$ cat /proc/$$/environ | sed 's,\\([A-Z_]*=\\),\\n\\1,g'",
      "USER=annie",
      "LOGNAME=annie",
      "HOME=/home/annie",
      "PATH=/usr/local/bin:/usr/bin",
      "MAIL=/var/mail/annie",
      "SHELL=/bin/bash",
      "TERM=xterm",
      "DISPLAY=localhost:10.0"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 163,
    "title": "comm - find common or distinct lines between files",
    "created": "2021-11-12T19:53:56Z",
    "modified": "2022-03-17T00:28:57Z",
    "code": [
      "# find lines only in file1",
      "comm -23 file1 file2 ",
      "",
      "# find lines only in file2",
      "comm -13 file1 file2 ",
      "",
      "# find lines common to both files",
      "comm -12 file1 file2 "
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "text"
    ],
    "url": "https://stackoverflow.com/a/26619069"
  },
  {
    "id": 162,
    "title": "sort top command by memory",
    "created": "2021-11-11T19:06:10Z",
    "modified": "2021-12-30T19:25:18Z",
    "code": [
      "top -o +%MEM"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 161,
    "title": "rbind mount docker",
    "created": "2021-11-10T22:13:28Z",
    "modified": "2022-01-21T19:00:56Z",
    "code": [
      "mount --rbind /u01/docker /var/lib/docker",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "docker"
    ]
  },
  {
    "id": 160,
    "title": "find js files in src/",
    "created": "2021-11-08T23:23:08Z",
    "modified": "2022-01-21T19:00:30Z",
    "code": [
      "find . -maxdepth 3 -type f -name \"*.js\" \\( -path \"*/src/*\" -and ! -regex \"*(node_modules|.git)*\" \\) -print",
      ""
    ],
    "example": [
      "$ find . -maxdepth 3 -type f -name \"*.js\" \\( -path \"*/src/*\" -and ! -regex \"*(node_modules|.git)*\" \\) -print"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 159,
    "title": "Check and assign variables",
    "created": "2021-11-08T19:49:50Z",
    "modified": "2022-01-03T06:12:41Z",
    "code": [
      "echo \"${VAR1:=default}\""
    ],
    "example": [
      "$ echo \"${VAR1:=default}\"",
      "default",
      "$ echo \"$VAR1\"",
      "default"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 158,
    "title": "yum - get installed security updates",
    "created": "2021-11-07T11:51:43Z",
    "modified": "2022-01-21T19:15:26Z",
    "code": [
      "yum updateinfo list security installed"
    ],
    "example": "",
    "output": "",
    "description": [
      "To get a list of the currently installed security updates "
    ],
    "language": "bash",
    "tags": [],
    "url": "https://access.redhat.com/solutions/10021"
  },
  {
    "id": 157,
    "title": "ssh-keygen - generate public key from prviate key",
    "created": "2021-11-05T21:37:54Z",
    "modified": "2022-03-17T00:30:13Z",
    "code": [
      "ssh-keygen -y -f ~/.ssh/windows_login"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "devops"
    ],
    "url": "https://blog.tinned-software.net/generate-public-ssh-key-from-private-ssh-key/"
  },
  {
    "id": 156,
    "title": "docker history",
    "created": "2021-11-04T22:58:17Z",
    "modified": "2022-01-10T15:56:14Z",
    "code": [
      "dockerprettyhist() {",
      "  local imageid=${1:-44187ed3a967}",
      "  docker history --no-trunc $imageid |",
      "    tac | tr -s ' ' | cut -d \" \" -f 5- |",
      "    sed 's,^/bin/sh -c #(nop) ,,g' | sed 's,^/bin/sh -c,RUN,g' |",
      "    sed 's, && ,\\n  & ,g' |",
      "    sed 's,\\s*[0-9]*[\\.]*[0-9]*\\s*[kMG]*B\\s*$,\\n,g' |",
      "    head -n -1",
      "  echo \"\"",
      "}"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "docker"
    ]
  },
  {
    "id": 155,
    "title": "yum list docker-engine --showduplicates",
    "created": "2021-11-04T13:56:21Z",
    "modified": "2021-12-30T19:45:31Z",
    "code": [
      "yum list docker-engine --showduplicates"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 154,
    "title": "umask - get umask for current process",
    "created": "2021-11-04T00:28:59Z",
    "modified": "2022-03-17T00:30:46Z",
    "code": [
      "grep '^Umask:' \"/proc/$$/status\""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://unix.stackexchange.com/a/354303"
  },
  {
    "id": 153,
    "title": "getfactl - get user, group, and perm ",
    "created": "2021-11-04T00:06:00Z",
    "modified": "2022-01-07T18:14:32Z",
    "code": [
      "getfacl linux"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 152,
    "title": "add user to group",
    "created": "2021-11-03T23:36:59Z",
    "modified": "2022-01-10T15:56:31Z",
    "code": [
      "usermod -a -G wheel annie_tran"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 151,
    "title": "realpath - get relative paths",
    "created": "2021-11-03T22:45:29Z",
    "modified": "2022-03-17T00:31:20Z",
    "code": [
      "realpath --relative-to=$DIR1 $DIR2"
    ],
    "example": [
      "$ realpath --relative-to=/home/annie_tran /tmp",
      "../../tmp",
      "",
      "$ realpath --relative-to=/tmp /home/annie_tran",
      "../home/annie_tran"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 149,
    "title": "ansible-playbook in crontab",
    "created": "2021-11-03T18:02:57Z",
    "modified": "2022-01-07T18:15:21Z",
    "code": [
      "*/15 * * * *    if ! out=`ansible-playbook yourplaybook.yaml`; then echo $out; fi",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "plain",
    "tags": [
      "ansible"
    ],
    "url": "https://github.com/ansible/ansible/issues/1210#issuecomment-172298551"
  },
  {
    "id": 148,
    "title": "Print border",
    "created": "2021-11-02T17:23:10Z",
    "modified": "2022-01-07T18:17:11Z",
    "code": [
      "printf '%*.0s\\n' 10 \"\" | tr \" \" \"#\""
    ],
    "example": [
      "REPEAT=10; printf '%*.0s\\n' $REPEAT\"\" | tr \" \" \"#\""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 147,
    "title": "get latest kernel version",
    "created": "2021-10-21T20:33:31Z",
    "modified": "2022-01-10T15:56:56Z",
    "code": [
      "rpm -q kernel|awk -F- '{print $3}'|awk -F. '{print $1}'|sort -n|tail -1"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 146,
    "title": "awx curl",
    "created": "2021-10-20T22:24:01Z",
    "modified": "2021-12-30T19:52:16Z",
    "code": [
      "curl -f -k -s -v -H \"Content-Type: application/json\" -X PUT -d @_ldap.json --user $TOWER_USERNAME:$TOWER_PASSWORD \"https://$TOWER_HOST/api/v2/settings/ldap/\""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "ansible"
    ]
  },
  {
    "id": 145,
    "title": "system boot menu entries",
    "created": "2021-10-18T17:52:54Z",
    "modified": "2022-03-03T20:45:07Z",
    "code": [
      "awk -F\\' '$1==\"menuentry \" {print i++ \" : \" $2}' /etc/grub2.cfg"
    ],
    "example": [
      "$ awk -F\\' '$1==\"menuentry \" {print i++ \" : \" $2}' /etc/grub2.cfg"
    ],
    "output": "",
    "description": [
      "To list all the menu entries that will be displayed at system boot"
    ],
    "language": "bash",
    "tags": [],
    "url": "https://wiki.centos.org/HowTos/Grub2"
  },
  {
    "id": 144,
    "title": "get latest kernel",
    "created": "2021-10-18T16:29:31Z",
    "modified": "2022-01-10T15:57:04Z",
    "code": [
      "awk -F\\' /^menuentry/{print\\$2} /etc/grub2.cfg | grep -vE \"(uek|rescue)\" | sort | tail -n 1"
    ],
    "example": [
      "$ awk -F\\' /^menuentry/{print\\$2} /etc/grub2.cfg | grep -vE \"(uek|rescue)\" | sort | tail -n 1",
      "Oracle Linux Server 7.9, with Linux 3.10.0-1160.36.2.el7.x86_64",
      "",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "admin"
    ]
  },
  {
    "id": 143,
    "title": "get installed kernels",
    "created": "2021-10-18T16:25:00Z",
    "modified": "2022-01-10T15:57:13Z",
    "code": [
      "awk -F\\' /^menuentry/{print\\$2} /etc/grub2.cfg"
    ],
    "example": [
      "$ awk -F\\' /^menuentry/{print\\$2} /etc/grub2.cfg",
      "Oracle Linux Server 7.9, with Unbreakable Enterprise Kernel 5.4.17-2102.202.5.el7uek.x86_64",
      "Oracle Linux Server 7.9, with Unbreakable Enterprise Kernel 4.1.12-61.1.18.el7uek.x86_64",
      "Oracle Linux Server 7.9, with Linux 3.10.0-1160.36.2.el7.x86_64",
      "Oracle Linux Server 7.9, with Linux 3.10.0-1160.15.2.el7.x86_64",
      "Oracle Linux Server 7.9, with Linux 0-rescue-21e762519e7246a4b97b5fa8e94a7ed1",
      "",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "admin"
    ]
  },
  {
    "id": 142,
    "title": "awx job_template",
    "created": "2021-10-13T16:49:11Z",
    "modified": "2021-12-30T19:52:24Z",
    "code": [
      "awx job_template list --all -f human --filter 'id, name, playbook, modified, status'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "ansible"
    ]
  },
  {
    "id": 141,
    "title": "get laptop service tag",
    "created": "2021-10-08T21:33:35Z",
    "modified": "2022-03-24T22:14:06Z",
    "code": [
      "Get-WmiObject win32_SystemEnclosure | select serialnumber",
      "",
      "# another way:",
      "Get-WMIObject -Class Win32_Bios"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": [
      "example"
    ],
    "url": "https://exchangepedia.com/2007/02/getting-example-service-tag-using-powershell.html"
  },
  {
    "id": 140,
    "title": "Get all powershell modules",
    "created": "2021-10-07T20:39:39Z",
    "modified": "2022-02-22T16:32:41Z",
    "code": [
      "get-module -listavailable"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": []
  },
  {
    "id": 139,
    "title": "Uptime of a process",
    "created": "2021-10-04T23:41:29Z",
    "modified": "2022-01-10T15:57:55Z",
    "code": [
      "ps -o etimes -p $PID"
    ],
    "example": [
      "ps -o etimes -p 1"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://superuser.com/a/1352711"
  },
  {
    "id": 138,
    "title": "sha256",
    "created": "2021-10-04T19:45:12Z",
    "modified": "2022-01-10T18:38:39Z",
    "code": [
      "sha256() {",
      "  if which sha256sum >/dev/null 2>&1; then",
      "    sha256sum \"$1\" | awk '{ print $1 }'",
      "  else",
      "    shasum -a256 \"$1\" | awk '{ print $1 }'",
      "  fi",
      "}"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://github.com/containerd/containerd/blob/main/test/utils.sh"
  },
  {
    "id": 137,
    "title": "get ip address",
    "created": "2021-10-02T04:34:57Z",
    "modified": "2022-03-03T21:10:49Z",
    "code": [
      "/usr/sbin/ip a | grep inet"
    ],
    "example": [
      "$ ip a | grep inet",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "network"
    ],
    "url": "https://github.com/kuritaka/ansible-examples/blob/master/playbooks/shell_test.yml"
  },
  {
    "id": 136,
    "title": "Get group members",
    "created": "2021-10-01T08:23:08Z",
    "modified": "2022-10-13T00:09:40Z",
    "code": [
      "Get-ADGroupMember -Identity \"dbsecuritygroup\" -Recursive"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": [
      "ldap"
    ]
  },
  {
    "id": 135,
    "title": "awx-manage shell_plus",
    "created": "2021-09-29T18:50:59Z",
    "modified": "2022-03-10T02:05:09Z",
    "code": [
      "from awx.main.utils import decrypt_field",
      "",
      "cred_names=[\"ad-svc-mongodb-nonprod\",\"ad-svc-mongodb-prod\",\"ad-svc-oracle-nonprod\",\"ad-svc-oracle-prod\",\"ad-svc-postgres-nonprod\",\"ad-svc-postgres-prod\",\"ad-svc-sql-nonprod\",\"ad-svc-sql-prod\"]",
      "",
      "for svc in cred_names:",
      "    cred = Credential.objects.get(name=svc)",
      "    print(svc)",
      "    print(decrypt_field(cred, \"password\"))",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "python",
    "tags": [
      "ansible"
    ]
  },
  {
    "id": 134,
    "title": "get all service accounts owned by user",
    "created": "2021-09-29T16:44:53Z",
    "modified": "2022-10-13T00:18:35Z",
    "code": [
      "Get-ADUser -Filter \"employeeType -eq 'Service' -and OwnerID -eq 123456\" -Properties * | FT Name,PasswordLastSet"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": []
  },
  {
    "id": 132,
    "title": "generate random password openssl",
    "created": "2021-09-26T06:42:09Z",
    "modified": "2022-01-19T00:09:39Z",
    "code": [
      "openssl rand -base64 20"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 131,
    "title": "python to encode and decode",
    "created": "2021-09-25T06:23:58Z",
    "modified": "2022-03-03T17:01:29Z",
    "code": [
      "# encode",
      "python -m base64 -e <<< \"sample string\"",
      "",
      "# decode",
      "python -m base64 -d <<< \"dGhpcyBpcyBlbmNvZGVkCg==\""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 130,
    "title": "find world writable files",
    "created": "2021-09-22T08:48:59Z",
    "modified": "2021-12-30T19:47:16Z",
    "code": [
      "find / -type d -path \"/misc*\" -prune -o -type d -perm /o=w -print",
      "",
      "find / -xdev -type d \\( -perm -0002 -a ! -perm -1000 \\) -print"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 129,
    "title": "password generator",
    "created": "2021-09-22T02:12:08Z",
    "modified": "2022-03-03T21:05:57Z",
    "code": [
      "mkpasswd -l 15 -d 3 -C 5"
    ],
    "example": [
      "$ mkpasswd -l 20 -d 5 -C 3",
      "p10i5nzya3Ebdlj,8XLf",
      ""
    ],
    "output": "",
    "description": [
      "The -l flag defines the length of the password.  The default is 9.  The following example  creates  a  20",
      "character password.",
      "",
      "    mkpasswd -l 20",
      "",
      "The  -d  flag  defines the minimum number of digits that must be in the password.  The default is 2.  The",
      "following example creates a password with at least 3 digits.",
      "",
      "    mkpasswd -d 3",
      "",
      "The -c flag defines the minimum number of lowercase alphabetic characters that must be in  the  password.",
      "The default is 2.",
      "",
      "The  -C  flag defines the minimum number of uppercase alphabetic characters that must be in the password.",
      "The default is 2.",
      "",
      "The -s flag defines the minimum number of special characters that must be in the password.   The  default",
      "is 1."
    ],
    "language": "bash",
    "tags": []
  },
  {
    "id": 128,
    "title": "pmem (vscode mimics ps)",
    "created": "2021-09-21T17:43:41Z",
    "modified": "2022-01-10T16:02:12Z",
    "code": [
      "ps -ax -o pid=,ppid=,pcpu=,pmem=,command="
    ],
    "example": [
      "$ ps -ax -o pid=,ppid=,pcpu=,pmem=,command= | grep -v '\\['"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://example-my.sharepoint.com/home/ansible/.vscode-server/bin/379476f0e13988d90fab105c5c19e7abc8b1dea8/out/vs/base/node/ps.sh"
  },
  {
    "id": 127,
    "title": "remove trailing whitespace",
    "created": "2021-09-15T23:02:38Z",
    "modified": "2022-01-10T18:39:34Z",
    "code": [
      "awk '{$1=$1};1'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://unix.stackexchange.com/a/205854"
  },
  {
    "id": 126,
    "title": "/proc files",
    "created": "2021-09-15T21:53:10Z",
    "modified": "2022-01-19T00:09:46Z",
    "code": [
      "cat /etc/redhat-release",
      "cat /etc/debian_version",
      "cat /etc/os-release",
      "cat /etc/issue",
      "cat /etc/sysconfig/kernel",
      "cat /proc/uptime",
      "cat /proc/loadavg",
      "cat /proc/vmstat",
      "cat /proc/devices",
      "cat /proc/diskstats",
      "cat /proc/cmdline",
      "cat /proc/mdstat",
      "cat /proc/meminfo",
      "cat /proc/swaps",
      "cat /proc/filesystems",
      "cat /proc/mounts",
      "cat /proc/interrupts",
      "cat /boot/grub/grub.conf",
      "cat /proc/version",
      "cat /proc/modules",
      ""
    ],
    "example": "",
    "output": "",
    "description": [
      "FILES",
      "- /etc/services: The services translation file",
      "- /proc: Mount point for the proc filesystem, which gives access to kernel status information via the following files.",
      "- /proc/net/dev: device information",
      "- /proc/net/raw: raw socket information",
      "- /proc/net/tcp: TCP socket information",
      "- /proc/net/udp: UDP socket information",
      "- /proc/net/udplite: UDPLite socket information",
      "- /proc/net/igmp: IGMP multicast information",
      "- /proc/net/unix: Unix domain socket information",
      "- /proc/net/ipx: IPX socket information",
      "- /proc/net/ax25: AX25 socket information",
      "- /proc/net/appletalk: DDP (appletalk) socket information",
      "- /proc/net/nr: NET/ROM socket information",
      "- /proc/net/route: IP routing information",
      "- /proc/net/ax25_route: AX25 routing information",
      "- /proc/net/ipx_route: IPX routing information",
      "- /proc/net/nr_nodes: NET/ROM nodelist",
      "- /proc/net/nr_neigh: NET/ROM neighbours",
      "- /proc/net/ip_masquerade: masqueraded connections",
      "- /proc/net/snmp: statistics"
    ],
    "language": "bash",
    "tags": []
  },
  {
    "id": 125,
    "title": "print files with timestamp",
    "created": "2021-09-15T19:07:05Z",
    "modified": "2022-01-19T00:09:53Z",
    "code": [
      " find . -type f -printf '%TFT%TT %p\\n'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://stackoverflow.com/a/44415319"
  },
  {
    "id": 124,
    "title": "awk - remove duplicates without sorting",
    "created": "2021-09-15T17:08:17Z",
    "modified": "2022-05-12T19:27:48Z",
    "code": [
      "awk '!x[$0]++'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://stackoverflow.com/a/11532197"
  },
  {
    "id": 123,
    "title": "Use awk to display text and insert blank line before",
    "created": "2021-09-13T15:31:41Z",
    "modified": "2022-01-19T00:10:24Z",
    "code": [
      "cat file.txt | awk -F '\\t' '{print \"\\n\"$2,$3}' OFS='\\n'"
    ],
    "example": [
      "$ cat Downloads/servicess.txt | awk -F '\\t' '{print \"\\n\"$2,$3}' OFS='\\n'",
      "",
      "IPsec Policy Agent",
      "Internet Protocol security (IPsec) supports network-level peer authentication, data origin authentication, data integrity, data confidentiality (encryption), and replay protection.  This service enforces IPsec policies created through the IP Security Policies snap-in or the command-line tool \"netsh ipsec\".  If you stop this service, you may experience network connectivity issues if your policy requires that connections use IPsec.  Also,remote management of Windows Defender Firewall is not available when this service is stopped.",
      "",
      "Network Connection Broker",
      "Brokers connections that allow Windows Store Apps to receive notifications from the internet.",
      "",
      "Sensor Monitoring Service",
      "Monitors various sensors in order to expose data and adapt to system and user state.  If this service is stopped or disabled, the display brightness will not adapt to lighting conditions. Stopping this service may affect other system functionality and features as well."
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 122,
    "title": "repeat string N times",
    "created": "2021-09-11T06:43:21Z",
    "modified": "2022-03-03T21:10:29Z",
    "code": [
      "printf '=%.0s' {1..80}",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "text"
    ]
  },
  {
    "id": 121,
    "title": "get all processes for user",
    "created": "2021-09-11T06:29:56Z",
    "modified": "2022-01-19T00:11:13Z",
    "code": [
      "ps -U $USER -u $USER u"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 120,
    "title": "get arguments after first",
    "created": "2021-09-11T00:08:22Z",
    "modified": "2022-01-19T00:11:21Z",
    "code": [
      "echo \"${@:2}\"",
      "echo \"${*:2}\"",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://stackoverflow.com/a/9057392"
  },
  {
    "id": 119,
    "title": "get runas user",
    "created": "2021-09-10T23:53:36Z",
    "modified": "2022-01-19T00:11:27Z",
    "code": [
      "sudo --list | grep 'NOPASSWD: ALL' |  awk -F'[)(]' '{print $2}'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 118,
    "title": "string substring",
    "created": "2021-09-10T19:56:46Z",
    "modified": "2022-03-03T21:10:16Z",
    "code": [
      "STR=\"Hello world\"",
      "echo ${STR:6:5}   # \"world\"",
      "echo ${STR: -5:5}  # \"world\""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "text"
    ]
  },
  {
    "id": 117,
    "title": "string slicing",
    "created": "2021-09-10T19:56:06Z",
    "modified": "2022-03-03T21:10:21Z",
    "code": [
      "name=\"John\"",
      "echo ${name}",
      "echo ${name/J/j}    #=> \"john\" (substitution)",
      "echo ${name:0:2}    #=> \"Jo\" (slicing)",
      "echo ${name::2}     #=> \"Jo\" (slicing)",
      "echo ${name::-1}    #=> \"Joh\" (slicing)",
      "echo ${name:(-1)}   #=> \"n\" (slicing from right)",
      "echo ${name:(-2):1} #=> \"h\" (slicing from right)",
      "echo ${food:-Cake}  #=> $food or \"Cake"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "text"
    ]
  },
  {
    "id": 116,
    "title": "set color",
    "created": "2021-09-10T19:50:11Z",
    "modified": "2022-01-19T00:13:14Z",
    "code": [
      "SETCOLOR_SUCCESS=\"echo -en \\\\033[0;32m\"",
      "SETCOLOR_FAILURE=\"echo -en \\\\033[0;31m\"",
      "SETCOLOR_WARNING=\"echo -en \\\\033[0;33m\"",
      "SETCOLOR_RESET=\"echo -en \\\\033[0;39m\"",
      ""
    ],
    "example": "",
    "output": "",
    "description": [
      "# terminal sequence to set color to a 'success' color (currently: green)",
      "SETCOLOR_SUCCESS=\"echo -en \\\\033[0;32m\"",
      "",
      "# terminal sequence to set color to a 'failure' color (currently: red)",
      "SETCOLOR_FAILURE=\"echo -en \\\\033[0;31m\"",
      "# terminal sequence to set color to a 'warning' color (currently: yellow)",
      "SETCOLOR_WARNING=\"echo -en \\\\033[0;33m\"",
      "# terminal sequence to reset to the default color.",
      "SETCOLOR_NORMAL=\"echo -en \\\\033[0;39m\"",
      ""
    ],
    "language": "bash",
    "tags": []
  },
  {
    "id": 115,
    "title": "ss -  investigate sockets",
    "created": "2021-09-10T16:43:43Z",
    "modified": "2021-12-30T19:47:46Z",
    "code": [
      "ss -a"
    ],
    "example": [
      "USAGE EXAMPLES",
      "",
      "# Display all TCP sockets.",
      "ss -t -a",
      "",
      "# Display all TCP sockets with process SELinux security contexts.",
      "ss -t -a -Z",
      "",
      "# Display all UDP sockets.",
      "ss -u -a",
      "",
      "# Display all established ssh connections.",
      "ss -o state established '( dport = :ssh or sport = :ssh )'",
      "",
      "# Find all local processes connected to X server.",
      "ss -x src /tmp/.X11-unix/*",
      "",
      "# List all the tcp sockets in state FIN-WAIT-1 for our apache to network 193.233.7/24 and look at their timers.",
      "ss -o state fin-wait-1 '( sport = :http or sport = :https )' dst 193.233.7/24",
      "",
      "# List sockets in all states from all socket tables but TCP.",
      "ss -a -A 'all,!tcp'"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 114,
    "title": "sqlplus - set password",
    "created": "2021-09-10T06:09:43Z",
    "modified": "2022-02-22T16:33:48Z",
    "code": [
      "ORACLE_PWD=$1",
      "ORACLE_SID=\"`grep $ORACLE_HOME /etc/oratab | cut -d: -f1`\"",
      "ORACLE_PDB=\"`ls -dl $ORACLE_BASE/oradata/$ORACLE_SID/*/ | grep -v pdbseed | awk '{print $9}' | cut -d/ -f6`\"",
      "ORAENV_ASK=NO",
      "source oraenv",
      "",
      "sqlplus / as sysdba << EOF",
      "      ALTER USER SYS IDENTIFIED BY \"$ORACLE_PWD\";",
      "      ALTER USER SYSTEM IDENTIFIED BY \"$ORACLE_PWD\";",
      "      ALTER SESSION SET CONTAINER=$ORACLE_PDB;",
      "      ALTER USER PDBADMIN IDENTIFIED BY \"$ORACLE_PWD\";",
      "      exit;",
      "EOF",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "db"
    ],
    "url": "https://github.com/oracle/vagrant-projects/blob/main/OracleDatabase/19.3.0/scripts/setPassword.sh"
  },
  {
    "id": 113,
    "title": "awk - get value only",
    "created": "2021-09-10T02:44:20Z",
    "modified": "2022-01-19T15:47:48Z",
    "code": [
      "awk -F= '/^BUILDTYPE=/ {print tolower($2)}' /etc/example.cfg"
    ],
    "example": [
      "$ awk -F= '/^BUILDTYPE=/ {print tolower($2)}' /etc/example.cfg",
      "it",
      "",
      "$ cat /etc/example.cfg",
      "ONCALLSHORT=\"svc_prdvmaas\"",
      "BUSINESSSHORT=\"svc_prdvmaas\"",
      "XINSTALLED=0",
      "STAFF_EMAIL=svc_prdvmaas@example.com",
      "PRODUCTION=PRD",
      "ENVIRONMENT=PRD",
      "SUPPORTGROUP=AMER",
      "SMTPGATEWAY=smtp-out.us.example.com",
      "HOSTNAME=awxserver02.us.example.com",
      "BUILDTYPE=IT",
      "APPLICATIONID=1003150"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "example"
    ]
  },
  {
    "id": 112,
    "title": "view process id",
    "created": "2021-09-10T00:27:36Z",
    "modified": "2022-01-19T15:47:55Z",
    "code": [
      "bash -c 'echo $$ ; ls -l /proc/self ; echo foo'"
    ],
    "example": [
      "$ bash -c 'echo $$ ; ls -l /proc/self ; echo foo ; echo $$'",
      "68800",
      "lrwxrwxrwx 1 root root 0 Jun 28 05:35 /proc/self -> 68801",
      "foo",
      "68800",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://unix.stackexchange.com/a/296852"
  },
  {
    "id": 111,
    "title": "exec cmd",
    "created": "2021-09-10T00:25:17Z",
    "modified": "2022-01-19T15:47:59Z",
    "code": [
      "bash -c 'echo $$ ; exec ls -l /proc/self ; echo foo'"
    ],
    "example": [
      "$ bash -c 'echo $$ ; exec ls -l /proc/self ; echo foo'",
      "4315",
      "lrwxrwxrwx 1 root root 0 Aug 17 09:15 /proc/self -> 4315",
      ""
    ],
    "output": "",
    "description": [
      "What exec cmd does, is exactly the same as just running cmd, except that the current shell is replaced with the command, instead of a separate process being run."
    ],
    "language": "bash",
    "tags": [],
    "url": "https://unix.stackexchange.com/a/296852"
  },
  {
    "id": 110,
    "title": "generate random password",
    "created": "2021-09-09T23:46:59Z",
    "modified": "2022-01-19T00:16:34Z",
    "code": [
      "tr -dc 'a-zA-Z0-9' < /dev/urandom | head -c 32"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "admin"
    ]
  },
  {
    "id": 108,
    "title": "run sudosu",
    "created": "2021-09-09T23:30:08Z",
    "modified": "2022-01-19T15:48:05Z",
    "code": [
      "eval \"sudo $(sudo --list | grep -ws User -A 1000 | sed 's/,/\\n/g' | sed 's/:/:\\n/g' | grep '/bin/su' | sort | tail -n 1)\"",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 107,
    "title": "get allowed sudo commands",
    "created": "2021-09-09T22:26:06Z",
    "modified": "2022-01-19T15:48:10Z",
    "code": [
      "sudo --list | grep -ws User -A 1000 | sed 's/,/\\n/g' | sed 's/:/:\\n/g' | grep -E '^\\s+?/' | sed -e 's/^[[:space:]]*//'"
    ],
    "example": [
      "$ sudo --list | grep -ws User -A 1000 | sed 's/,/\\n/g' | sed 's/:/:\\n/g' | grep -E '^\\s+?/' | sed -e 's/^[[:space:]]*//'",
      "/bin/docker",
      "/bin/su",
      "/usr/local/bin/gitlab-runner"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "admin"
    ]
  },
  {
    "id": 106,
    "title": "get git status for all worktree repos in git",
    "created": "2021-09-02T15:36:15Z",
    "modified": "2022-01-19T15:48:18Z",
    "code": [
      "find . -maxdepth 3 -name .git -type d -print -exec git -C {} status \\;"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "git"
    ]
  },
  {
    "id": 105,
    "title": "find zombie processes",
    "created": "2021-08-31T18:52:13Z",
    "modified": "2022-01-19T15:48:23Z",
    "code": [
      "ps -elf | grep Z"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://bencane.com/2012/07/02/when-zombies-invade-linux-what-are-zombie-processes-and-what-to-do-about-them/"
  },
  {
    "id": 104,
    "title": "extract in a different directory",
    "created": "2021-08-27T23:27:43Z",
    "modified": "2022-01-19T15:48:29Z",
    "code": [
      "tar xvf filename.tar -C /home/username/",
      "",
      "# extract to current directory",
      "tar xvf filename.tar"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://help.dreamhost.com/hc/en-us/articles/115002768331-UNIX-commands-Decompressing-files"
  },
  {
    "id": 103,
    "title": "compress directory using tar",
    "created": "2021-08-27T23:26:58Z",
    "modified": "2022-01-19T00:17:13Z",
    "code": [
      "tar cjvf image_backup.tar.bz2 dirname",
      "",
      "tar zcvf image_backup.tar.gz dirname"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 102,
    "title": "get top memory/cpu hog",
    "created": "2021-08-26T08:34:04Z",
    "modified": "2022-01-19T15:48:39Z",
    "code": [
      "# get top memory hog",
      "ps -eo user,pid,size,pcpu,cmd --sort=-size",
      "",
      "# get top CPU hog",
      "ps -eo user,pid,size,pcpu,cmd --sort=-pcpu"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://github.com/ansible/product-demos/blob/master/playbooks/infrastructure/debug_info.yml"
  },
  {
    "id": 101,
    "title": "Get systemctl property",
    "created": "2021-08-26T07:24:52Z",
    "modified": "2022-03-03T21:08:00Z",
    "code": [
      "systemctl show -p WantedBy grafana-agent.service",
      "",
      "# view all",
      "systemctl show grafana-agent.service"
    ],
    "example": [
      "$ systemctl show -p WantedBy docker.service",
      "WantedBy=multi-user.target",
      "",
      "$ systemctl show -p MemoryCurrent docker.service",
      "MemoryCurrent=147226624",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "service"
    ]
  },
  {
    "id": 100,
    "title": "docker volume - inspect all",
    "created": "2021-08-25T18:24:45Z",
    "modified": "2022-01-19T00:16:57Z",
    "code": [
      "docker volume inspect $(docker volume ls | awk '{print $2}' |  tail -n +2)"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "docker"
    ]
  },
  {
    "id": 99,
    "title": "generating crypto quote",
    "created": "2021-08-18T00:46:46Z",
    "modified": "2022-02-03T21:30:35Z",
    "code": [
      "$ special='! @ # % ^ & * ( ) _ + = [ ] { } < > . / ?'",
      "$ abc=$(echo {a..z} {A..Z} {0..9} \"$special\" | tr -d ' ')",
      "$ key=$(echo \"$abc\" | sed 's,\\(.\\),\\1\\n,g' | shuf | tr -d '\\n')",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 98,
    "title": "git diff tags",
    "created": "2021-08-13T00:31:46Z",
    "modified": "2022-01-19T15:49:08Z",
    "code": [
      " git diff --minimal -w -b 17.0.1 17.1.0 installer"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "git"
    ]
  },
  {
    "id": 97,
    "title": "sed - only print after matching pattern",
    "created": "2021-08-11T21:55:17Z",
    "modified": "2022-01-19T15:49:22Z",
    "code": [
      "sed -n '/^\\[mongo:children.*/,$p'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 96,
    "title": "sed - delete rows after pattern ",
    "created": "2021-08-11T21:54:54Z",
    "modified": "2022-01-19T15:49:35Z",
    "code": [
      "cat playbooks/hosts/prod.ini | sed -e '/^\\[mongo:children/,+5000d'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 95,
    "title": "sed replace files",
    "created": "2021-08-10T14:38:04Z",
    "modified": "2022-01-19T15:49:43Z",
    "code": [
      "find . -type f -name \"*.html\" -print -exec sed -i -e 's/\"\\/\\//\"/g' {} \\;"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 94,
    "title": "sort .bash_history",
    "created": "2021-08-09T17:52:39Z",
    "modified": "2022-01-19T15:49:51Z",
    "code": [
      "cat .bash_history | grep -vE \"^#[0-9]+\" | sort | uniq -c | sort -k 1 -n | less",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 93,
    "title": "self sign cert (generate private key, csr, and crt)",
    "created": "2021-07-31T04:50:38Z",
    "modified": "2022-01-19T00:17:26Z",
    "code": [
      "openssl req -new -newkey rsa:4096 -nodes -keyout \"private.key\" -out \"$(hostname -f).csr\" -subj \"/C=US/ST=Texas/L=Round Rock/O=example/OU=Digital/CN=$(hostname -f)\"",
      "",
      "openssl x509 -signkey private.key -in $(hostname -f).csr -req -days 365 -out $(hostname).crt"
    ],
    "example": [
      "openssl req -x509 -out localhost.crt -keyout localhost.key \\",
      "  -newkey rsa:2048 -nodes -sha256 \\",
      "  -subj '/CN=localhost' -extensions EXT -config <( \\",
      "   printf \"[dn]\\nCN=localhost\\n[req]\\ndistinguished_name = dn\\n[EXT]\\nsubjectAltName=DNS:localhost\\nkeyUsage=digitalSignature\\nextendedKeyUsage=serverAuth\")"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://letsencrypt.org/docs/certificates-for-localhost/"
  },
  {
    "id": 92,
    "title": "git pager",
    "created": "2021-07-30T17:03:33Z",
    "modified": "2021-12-30T19:44:10Z",
    "code": [
      "# Tells 'less' not to paginate if less than a page",
      "export LESS=\"-F -X $LESS\"",
      "",
      "git config --global --replace-all core.pager \"less -F -X\""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "git"
    ],
    "url": "https://stackoverflow.com/a/2183920"
  },
  {
    "id": 91,
    "title": "Get services with search string",
    "created": "2021-07-30T10:13:42Z",
    "modified": "2022-03-03T21:08:17Z",
    "code": [
      "Get-Service -Displayname \"*network*\"",
      "",
      "Get-Service | Where-Object {$_.Status -eq \"Running\"}",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": [],
    "url": "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-service?view=powershell-7.1"
  },
  {
    "id": 90,
    "title": "get all available data about a process",
    "created": "2021-07-30T10:12:34Z",
    "modified": "2022-01-18T17:11:23Z",
    "code": [
      "Get-Process atom | Format-List *"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": [
      "powershell"
    ],
    "url": "https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-process?view=powershell-7.1"
  },
  {
    "id": 89,
    "title": "prune unwritable files from find",
    "created": "2021-07-29T17:03:52Z",
    "modified": "2021-12-30T19:44:10Z",
    "code": [
      "find /repository/images/database -type d ! -writable -prune -o -type f -group $USER -print -exec chown -c $USER.dbcore {} \\;"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 88,
    "title": "get ldap group related to ADUser",
    "created": "2021-07-28T15:47:23Z",
    "modified": "2021-12-30T19:55:20Z",
    "code": [
      "Get-ADUser -Identity Annie_Tran -Properties * | Select -ExpandProperty MemberOf"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": [
      "powershell"
    ]
  },
  {
    "id": 87,
    "title": "get AD User (powershell)",
    "created": "2021-07-28T15:42:59Z",
    "modified": "2021-12-30T19:55:29Z",
    "code": [
      "Get-ADUser -Identity Annie_Tran -Properties *"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "powershell",
    "tags": [
      "powershell"
    ]
  },
  {
    "id": 86,
    "title": "psql table size",
    "created": "2021-07-27T04:59:01Z",
    "modified": "2022-07-20T04:10:47Z",
    "code": [
      "psql -U awx -d awx -c \"\\dt+\" -P pager=off |",
      "  awk -F \"|\" '{print $2,$5}' |",
      "  grep \"_\" |",
      "  sort -k2 -rh |",
      "  tee /tmp/awx_table_size.txt"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "db"
    ]
  },
  {
    "id": 84,
    "title": "print all commands in $PATH (windows bash)",
    "created": "2021-07-27T00:15:24Z",
    "modified": "2021-12-30T19:44:10Z",
    "code": [
      "printcommands() {",
      "  for i in $(echo \"$PATH\" | sed 's/:/\\n/g' | grep -v ' '); do",
      "    echo \"#######################################################\"",
      "    echo \"$i\"",
      "    echo \"#######################################################\"",
      "    echo \"$(find $i -maxdepth 2 -type f ! -name '*.dll' 2>&1 | grep -E \"\\/[a-z0-9]*$|*.exe$\" | grep -v license)\"",
      "    echo \"\"",
      "  done",
      "}",
      "",
      "printcommands | tee /tmp/window-commands.txt",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 83,
    "title": "type",
    "created": "2021-07-23T19:09:29Z",
    "modified": "2021-12-30T19:44:10Z",
    "code": [
      "$ LC_ALL=C type foo",
      "bash: type: foo: not found",
      "",
      "$ LC_ALL=C type ls",
      "ls is aliased to `ls --color=auto'",
      "",
      "$ which type",
      "",
      "$ LC_ALL=C type type",
      "type is a shell builtin",
      "",
      "$ LC_ALL=C type -t rvm",
      "function",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://stackoverflow.com/a/85903"
  },
  {
    "id": 82,
    "title": "ansible list all hosts",
    "created": "2021-07-21T17:59:41Z",
    "modified": "2021-12-30T19:44:10Z",
    "code": [
      "ansible all --list-hosts"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "ansible"
    ]
  },
  {
    "id": 81,
    "title": "encrypt/decrypt gpg",
    "created": "2021-07-21T14:59:17Z",
    "modified": "2021-12-30T19:44:10Z",
    "code": [
      "encrypt () { gpg -ac --no-options \"$1\"; }",
      "decrypt () { gpg --no-options \"$1\"; }"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "admin"
    ]
  },
  {
    "id": 80,
    "title": "ansible - transfer a file directly to many servers:",
    "created": "2021-07-20T04:40:32Z",
    "modified": "2021-12-30T19:44:10Z",
    "code": [
      "ansible all -m copy -a \"src=ansible.cfg dest=/tmp/\""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "ansible"
    ],
    "url": "https://docs.ansible.com/ansible/2.8/user_guide/intro_adhoc.html"
  },
  {
    "id": 79,
    "title": "See the list of available plugins",
    "created": "2021-07-16T07:15:47Z",
    "modified": "2021-12-30T19:44:10Z",
    "code": [
      "ansible-doc -t become -l"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "ansible"
    ]
  },
  {
    "id": 78,
    "title": "generate ed25519 private key",
    "created": "2021-07-15T18:32:34Z",
    "modified": "2021-12-30T19:44:10Z",
    "code": [
      "openssl genpkey -algorithm ed25519"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 77,
    "title": "rsync",
    "created": "2021-07-14T16:54:27Z",
    "modified": "2021-12-30T19:44:10Z",
    "code": [
      "rsync -avr -o -g filename.txt user@hostname.us.example.com:/home/annie_tran"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 76,
    "title": "create csr request",
    "created": "2021-07-13T20:01:54Z",
    "modified": "2021-12-30T19:44:10Z",
    "code": [
      "openssl req -new -newkey rsa:4096 -nodes -keyout \"private.key\" -out \"$(hostname -f).csr\" -subj \"/C=US/ST=Texas/L=Round Rock/O=example/OU=Digital/CN=$(hostname -f)\""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "admin"
    ]
  },
  {
    "id": 75,
    "title": "print markdown docs not in node_modules",
    "created": "2021-07-13T19:31:08Z",
    "modified": "2021-12-30T19:44:10Z",
    "code": [
      "find . -type f -name \"*.md\" ! -path \"*node_modules*\" -print"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 74,
    "title": "get most used commands",
    "created": "2021-07-12T21:00:56Z",
    "modified": "2021-12-30T19:44:10Z",
    "code": [
      "history | cut -d ' ' -f6- | sort | uniq -c | sort -k1 -nr"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 73,
    "title": "print commands from sudo log",
    "created": "2021-07-12T20:47:34Z",
    "modified": "2021-12-30T19:44:10Z",
    "code": [
      "cat /var/log/sudo.log | grep \"LANG=C;LANGUAGE=en\" | cut -d';' -f3 | sort -u "
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "admin"
    ]
  },
  {
    "id": 72,
    "title": "view UDP and TCP ports",
    "created": "2021-07-12T20:41:55Z",
    "modified": "2021-12-30T19:44:10Z",
    "code": [
      "lsof -n -i TCP -i UDP"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "admin"
    ]
  },
  {
    "id": 71,
    "title": "output all yml",
    "created": "2021-07-09T21:23:00Z",
    "modified": "2021-12-30T19:44:10Z",
    "code": [
      "tmppath=\"/tmp/$(date +%F)/ansible-roles\"",
      "mkdir -p $tmppath",
      "for d in $(find $PWD -mindepth 1 -maxdepth 1 -type d); do",
      "  echo \"$d\"",
      "  savename=\"${d//${PWD}\\//}\"",
      "  find \"$d\" -type f -name \"*.yml\" -print -exec cat {} \\; | sed -e 's@'\"$(echo \"$d\")\"'@'\"$(echo \"\\n# file: $d\")\"'@g' | tee \"$tmppath/${savename//[^a-zA-Z0-9.]/_}\"",
      "done"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 70,
    "title": "encrypt string with ansible-vault",
    "created": "2021-07-09T19:51:39Z",
    "modified": "2021-12-30T19:44:10Z",
    "code": [
      "echo -n 'letmein' | ansible-vault encrypt_string --vault-id dev@a_password_file --stdin-name 'db_password'"
    ],
    "example": "",
    "output": "",
    "description": [
      "To encrypt the string ‘letmein’ read from stdin, add the vault ID ‘dev’ using the ‘dev’ vault password stored in a_password_file, and name the variable ‘db_password"
    ],
    "language": "bash",
    "tags": [],
    "url": "https://docs.ansible.com/ansible/latest/user_guide/vault.html"
  },
  {
    "id": 69,
    "title": "list all ip rules",
    "created": "2021-07-09T02:17:59Z",
    "modified": "2022-03-03T21:09:04Z",
    "code": [
      "iptables --list-rules -v"
    ],
    "example": [
      "$ iptables --list-rules",
      "-P INPUT ACCEPT",
      "-P FORWARD DROP",
      "-P OUTPUT ACCEPT",
      "-N DOCKER",
      "-N DOCKER-ISOLATION-STAGE-1",
      "-N DOCKER-ISOLATION-STAGE-2",
      "-N DOCKER-USER",
      "-A FORWARD -j DOCKER-USER",
      "-A FORWARD -j DOCKER-ISOLATION-STAGE-1",
      "-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT",
      "-A FORWARD -o docker0 -j DOCKER",
      "-A FORWARD -i docker0 ! -o docker0 -j ACCEPT",
      "-A FORWARD -i docker0 -o docker0 -j ACCEPT",
      "-A FORWARD -o br-a86456b5e096 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT",
      "-A FORWARD -o br-a86456b5e096 -j DOCKER",
      "-A FORWARD -i br-a86456b5e096 ! -o br-a86456b5e096 -j ACCEPT",
      "-A FORWARD -i br-a86456b5e096 -o br-a86456b5e096 -j ACCEPT",
      "-A DOCKER -d 172.31.0.5/32 ! -i br-a86456b5e096 -o br-a86456b5e096 -p tcp -m tcp --dport 8052 -j ACCEPT",
      "-A DOCKER -d 172.31.0.5/32 ! -i br-a86456b5e096 -o br-a86456b5e096 -p tcp -m tcp --dport 443 -j ACCEPT",
      "-A DOCKER-ISOLATION-STAGE-1 -i docker0 ! -o docker0 -j DOCKER-ISOLATION-STAGE-2",
      "-A DOCKER-ISOLATION-STAGE-1 -i br-a86456b5e096 ! -o br-a86456b5e096 -j DOCKER-ISOLATION-STAGE-2",
      "-A DOCKER-ISOLATION-STAGE-1 -j RETURN",
      "-A DOCKER-ISOLATION-STAGE-2 -o docker0 -j DROP",
      "-A DOCKER-ISOLATION-STAGE-2 -o br-a86456b5e096 -j DROP",
      "-A DOCKER-ISOLATION-STAGE-2 -j RETURN",
      "-A DOCKER-USER -j RETURN",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "network"
    ],
    "url": "https://sites.google.com/site/mrxpalmeiras/linux/iptables-basics"
  },
  {
    "id": 68,
    "title": "get matching prefix",
    "created": "2021-07-09T00:04:27Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "getsame() {",
      "  string1=${1:?}",
      "  string2=${2:?}",
      "  first_diff_char=$(cmp <(echo \"$string1\") <(echo \"$string2\") | cut -d \" \" -f 5 | tr -d \",\")",
      "  echo ${string1:0:$((first_diff_char - 1))}",
      "}"
    ],
    "example": [
      "$ path1=kv/SERVICE_ACCOUNT/SQLSERVER",
      "$ path2=kv/SERVICE_ACCOUNT/MSSQL",
      "$ getsame $path1 $path2",
      "kv/SERVICE_ACCOUNT/"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://stackoverflow.com/a/6973595/7460613"
  },
  {
    "id": 67,
    "title": "greedy *",
    "created": "2021-07-08T01:06:33Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "echo foo | sed 's/o*/EEE/'"
    ],
    "example": [
      "$ echo foo | sed 's/o*/EEE/'",
      "EEEfoo"
    ],
    "output": "",
    "description": [
      "The '*' metacharacter represents zero or more instances of the",
      "   previous expression. The '*' metacharacter looks for the leftmost",
      "   possible match first and will match zero characters. Thus,"
    ],
    "language": "bash",
    "tags": []
  },
  {
    "id": 66,
    "title": "hack for exporting env variables",
    "created": "2021-07-08T00:33:18Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "export $(cat /path/to/file.txt | grep -vE \"^(#|export)\" | grep \".\")"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 65,
    "title": "get modification date for files in directory",
    "created": "2021-07-06T21:09:04Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "for pb in $(find . -maxdepth 1 -type f -name \"*.yml\"); do",
      "  mod=$(stat -c %y $pb)",
      "  echo -e \"${mod%%\\ *}, ${pb##\\.\\/}\"",
      "done",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "coreutils"
    ]
  },
  {
    "id": 64,
    "title": "view workstation details",
    "created": "2021-06-30T13:47:02Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "net config workstation"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "example"
    ]
  },
  {
    "id": 63,
    "title": "Recursively get full path name",
    "created": "2021-06-22T20:34:02Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "ls -RA --ignore=\"\\.*\" /misc/software/database/awx | awk '",
      "/:$/&&f{s=$0;f=0}",
      "/:$/&&!f{sub(/:$/,\"\");s=$0;f=1;next}",
      "NF&&f{ print s\"/\"$0 }'"
    ],
    "example": "",
    "output": "",
    "description": [
      "`--ignore=\"\\.*\"` removes paths like ./ ../"
    ],
    "language": "bash",
    "tags": [
      "coreutils"
    ]
  },
  {
    "id": 62,
    "title": "coreutils",
    "created": "2021-06-22T00:19:34Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "# Output of entire files",
      "cat tac nl od base64",
      "",
      "# Formatting file contents",
      "fmt pr fold",
      "",
      "# Output of parts of files",
      "head tail split csplit",
      "",
      "# Summarizing files",
      "wc sum cksum md5sum sha1sum sha2",
      "",
      "# Operating on sorted files",
      "sort shuf uniq comm ptx tsort",
      "",
      "# Operating on fields",
      "cut paste join",
      "",
      "# Operating on characters",
      "tr expand unexpand",
      "",
      "# Directory listing",
      "ls dir vdir dircolors",
      "",
      "# Basic operations",
      "cp dd install mv rm shred",
      "",
      "# Special file types",
      "mkdir rmdir unlink mkfifo mknod ln link readlink",
      "",
      "# Changing file attributes",
      "chgrp chmod chown touch",
      "",
      "# Disk usage",
      "df du stat sync truncate",
      "",
      "# Printing text",
      "echo printf yes",
      "",
      "# Conditions",
      "false true test expr",
      "",
      "# Redirection",
      "tee",
      "",
      "# File name manipulation",
      "dirname basename pathchk mktemp realpath",
      "",
      "# Working context",
      "pwd stty printenv tty",
      "",
      "# User information",
      "id logname whoami groups users who",
      "",
      "# System context",
      "date arch nproc uname hostname hostid uptime",
      "",
      "# SELinux context",
      "chcon runcon",
      "",
      "# Modified command invocation",
      "chroot env nice nohup stdbuf timeout",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 61,
    "title": "get sorted size of directories in current working directory",
    "created": "2021-06-19T08:57:57Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "du -h --max-depth=1 | sort -h"
    ],
    "example": "",
    "output": "",
    "description": [
      "du: estimates file space usage recursively for directories",
      "-h: human readable",
      "--max-depth=1: so you only check for the directories within the current directory",
      "",
      "sort -hr: sorts it decreasingly"
    ],
    "language": "bash",
    "tags": []
  },
  {
    "id": 60,
    "title": "Resolve warning that bridge-nf-call-iptables is disabled",
    "created": "2021-06-19T07:09:25Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "modprobe br_netfilter",
      "sysctl net.bridge.bridge-nf-call-iptables=1",
      "sysctl net.bridge.bridge-nf-call-ip6tables=1"
    ],
    "example": [
      "$ docker info",
      "...",
      "",
      "WARNING: bridge-nf-call-iptables is disabled",
      "WARNING: bridge-nf-call-ip6tables is disabled",
      ""
    ],
    "output": "",
    "description": [
      "Warning messages may be displayed by Docker Engine when a user performs some actions, such as running docker info if the system kernel on a host system is configured to disable the net.bridge.bridge-nf-call-iptables and net.bridge.bridge-nf-call-ip6tables options. For example, the user may see an error similar to:",
      "",
      "WARNING: bridge-nf-call-iptables is disabled",
      "WARNING: bridge-nf-call-ip6tables is disabled",
      "This is expected behavior. These settings control whether packets traversing a network bridge are processed by iptables rules on the host system. Typically, enabling these options is not desirable as this can cause guest container traffic to be blocked by iptables rules that are intended for the host. This could cause unpredictable behavior for containers that do not expect traffic to be firewalled at the host level.",
      "",
      "If you accept and understand the implications of enabling these options or you have no iptables rules set on the host, you can enable these options to remove the warning messages. To temporarily enable these options:",
      "",
      "# sysctl net.bridge.bridge-nf-call-iptables=1",
      "# sysctl net.bridge.bridge-nf-call-ip6tables=1",
      "To make these options permanent, edit /etc/sysctl.conf and add the lines:",
      "",
      "net.bridge.bridge-nf-call-iptables = 1",
      "net.bridge.bridge-nf-call-ip6tables = 1",
      ""
    ],
    "language": "bash",
    "tags": [
      "docker"
    ],
    "url": "https://docs.oracle.com/en/operating-systems/oracle-linux/docker/docker-issues.html#docker-issue-28396501"
  },
  {
    "id": 59,
    "title": "Get size of mounted filesystems",
    "created": "2021-06-18T16:19:38Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "df --block-size=1 | numfmt --field 2 --header --to=iec"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 58,
    "title": "alias for easy column extraction",
    "created": "2021-06-16T20:25:21Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "alias c1=\"awk '{print \\$1}'\"",
      "alias c2=\"awk '{print \\$2}'\"",
      "alias c3=\"awk '{print \\$3}'\"",
      "alias c4=\"awk '{print \\$4}'\"",
      "alias c5=\"awk '{print \\$5}'\"",
      "alias c6=\"awk '{print \\$6}'\"",
      "alias c7=\"awk '{print \\$7}'\"",
      "alias c8=\"awk '{print \\$8}'\"",
      "alias c9=\"awk '{print \\$9}'\""
    ],
    "example": [
      "demo=' a1 a2 a3",
      "b1 b2 b3",
      "c1 c2 c3'",
      "",
      "echo \"$demo\" | c1",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "gnu"
    ]
  },
  {
    "id": 57,
    "title": "view service account owner",
    "created": "2021-06-16T14:34:11Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "net user /domain svc_npdboraos"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "example"
    ]
  },
  {
    "id": 56,
    "title": "fetch all git tags",
    "created": "2021-06-10T16:26:06Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "git fetch --all --tags"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "git"
    ],
    "url": "https://devconnected.com/how-to-checkout-git-tags/"
  },
  {
    "id": 55,
    "title": "get free space on directory",
    "created": "2021-06-08T00:04:52Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "df -Ph . "
    ],
    "example": [
      "df -Ph . | tail -1 | awk '{print $4}'",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 54,
    "title": "get free space in directory",
    "created": "2021-06-07T16:04:43Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "df -Ph . "
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "coreutils"
    ],
    "url": "https://unix.stackexchange.com/a/6014"
  },
  {
    "id": 53,
    "title": "hack for unsourcing env variables",
    "created": "2021-06-04T17:17:09Z",
    "modified": "2022-01-19T16:16:53Z",
    "code": [
      "unset $(cat /path/to/file.txt | grep -vE \"^(#|export)\" | grep \".\" | cut -d = -f -1)"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 52,
    "title": "echo shell commands as they are executed",
    "created": "2021-06-04T12:34:10Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "exe() { echo \"\\$ $@\" ; \"$@\" ; }"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://stackoverflow.com/a/23342259/7460613"
  },
  {
    "id": 51,
    "title": "print all the columns after a particular number using awk",
    "created": "2021-06-03T18:23:30Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "ps -ef | awk -v m=\"\\x01\" -v N=\"8\" '{$N=m$N ;print substr($0, index($0,m)+1)}'",
      ""
    ],
    "example": [
      "ps -ef | awk -v m=\"\\x01\" -v N=\"8\" '{$N=m$N ;print substr($0, index($0,m)+1)}'",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://stackoverflow.com/a/23118210"
  },
  {
    "id": 50,
    "title": "set timeout for script ",
    "created": "2021-06-03T18:09:47Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "/bin/timeout -s 2 10 /path/to/your/script.sh"
    ],
    "example": [
      "crontab -l",
      "* * * * * /bin/timeout -s 2 10 /path/to/your/script.sh"
    ],
    "output": "",
    "description": [
      "* /bin/timeout: the command.",
      "* -s 2: the signal to send when the timer has exceeded, it can be a number or the name. Equally valid would have been -s SIGINT (more on the kill signals below)",
      "* 10: the duration the script can run, before the kill signal described above is sent to it."
    ],
    "language": "bash",
    "tags": [],
    "url": "https://ma.ttias.be/limit-runtime-cronjob-script/"
  },
  {
    "id": 49,
    "title": "git make files executable",
    "created": "2021-05-28T17:01:12Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "find . -type f -name \"*.sh\" | xargs -I {} git add --chmod=+x {}"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 48,
    "title": "curl yum repo",
    "created": "2021-05-20T02:13:26Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "curl -sL https://dl.yarnpkg.com/rpm/yarn.repo | tee /etc/yum.repos.d/yarn.repo",
      "yum install yarn"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "file"
    ]
  },
  {
    "id": 47,
    "title": "set env variables",
    "created": "2021-05-14T17:56:27Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "export $(egrep -v '^#' \"path/to/file\" | xargs)"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 46,
    "title": "umask create file with permissions",
    "created": "2021-05-06T23:59:24Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "(umask 077; touch file)  # creates a 600 (rw-------) file",
      "(umask 002; touch file)  # creates a 664 (rw-rw-r--) file"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 45,
    "title": "pip show for all pip installed",
    "created": "2021-05-06T19:24:05Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "pip show $(pip list | awk '{print $1}' | grep -v - | xargs) | less"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "python"
    ]
  },
  {
    "id": 44,
    "title": "capturing group grep",
    "created": "2021-05-06T15:51:59Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "shopt -s extglob",
      "shopt -s nullglob",
      "shopt -s nocaseglob",
      "",
      "ls +(.*) | while read file; do",
      "  echo $file",
      "  set -- $file",
      "  [[ ! -z $2 ]] && echo \"$1$2\"",
      "done"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://stackoverflow.com/questions/1891797/capturing-groups-from-a-grep-regex"
  },
  {
    "id": 43,
    "title": "docker history dockerfile",
    "created": "2021-05-06T00:36:44Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "docker history --no-trunc <imageid> | tac | tr -s ' ' | cut -d \" \" -f 5- | sed 's,^/bin/sh -c #(nop) ,,g' | sed 's,^/bin/sh -c,RUN,g' | sed 's, && ,\\n  & ,g' | sed 's,\\s*[0-9]*[\\.]*[0-9]*\\s*[kMG]*B\\s*$,,g' | head -n -1"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "docker"
    ]
  },
  {
    "id": 42,
    "title": "docker save images",
    "created": "2021-05-05T11:08:21Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "dockerimagedir=\"docker-images-$(date +%F)\"",
      "",
      "mkdir -p dockerimagedir",
      "docker save $(docker images -q) -o \"$dockerimagedir/$(hostname -a).tar\"",
      "docker images | sed '1d' | awk '{print $1 \" \" $2 \" \" $3}' >  \"$dockerimagedir/docker-images.list\"",
      "",
      "rsync -avr  -o -g $dockerimagedir servicedb@awxserver02.us.example.com:/home/servicedb",
      "",
      "docker load -i /path/to/save/mydockersimages.tar",
      "",
      "while read REPOSITORY TAG IMAGE_ID",
      "do",
      "        echo \"== Tagging $REPOSITORY $TAG $IMAGE_ID ==\"",
      "        docker tag \"$IMAGE_ID\" \"$REPOSITORY:$TAG\"",
      "done < \"$dockerimagedir/docker-images.list\""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "docker"
    ],
    "url": "https://stackoverflow.com/a/37650072"
  },
  {
    "id": 41,
    "title": "pip install requirements one line",
    "created": "2021-05-05T03:22:19Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      " pip install --upgrade  $(cat requirements.txt | grep -o \"^[^#].*\")"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "python"
    ]
  },
  {
    "id": 40,
    "title": "print env variables that start with S",
    "created": "2021-04-27T22:31:37Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "env | grep -o '^S[^=]*'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://stackoverflow.com/a/43126805"
  },
  {
    "id": 39,
    "title": "Parse a .env (dotenv) file directly using bash",
    "created": "2021-04-27T16:42:30Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "export $(egrep -v '^#' .env | xargs)"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://gist.github.com/judy2k/7656bfe3b322d669ef75364a46327836"
  },
  {
    "id": 38,
    "title": "extract title from html",
    "created": "2021-04-21T00:24:26Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "echo -e $html | grep -Eo \"<title>(.*)</title>\""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 37,
    "title": "rsync with exclude",
    "created": "2021-04-20T20:56:26Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "rsync -avr --exclude={'dbv2-awx','*.rpm'} -o -g /home/servicedb servicedb@awxserver02.us.example.com:/home/servicedb/01",
      "",
      "rsync -avr --exclude={'dbv2-awx','ansible'} -o -g db annie_tran@auspslpltinf1.us.example.com:/home/annie_tran",
      "",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 36,
    "title": "view signed certs",
    "created": "2021-04-20T20:37:37Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "find /etc/pki -type f ! -name \"*cacerts*\" -print -exec cat {} \\; | less"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "info"
    ]
  },
  {
    "id": 35,
    "title": "hash directory ",
    "created": "2021-04-14T00:18:25Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "find . -type f -print0 | sort -z | xargs -r0 sha256sum  sha256SumOutput",
      ""
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 34,
    "title": "print name + content",
    "created": "2021-04-13T23:55:19Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "find . -type f -print -exec cat {} \\; "
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "info"
    ]
  },
  {
    "id": 32,
    "title": "diff project structures for git branches",
    "created": "2021-04-06T15:58:48Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "diff --side-by-side --color=always --width=200 --suppress-common-lines \\",
      "  <(git ls-tree -r branch01--name-only) \\",
      "  <(git ls-tree -r branch02 --name-only)",
      ""
    ],
    "example": [
      "diff -y --color=always --width=180 --suppress-common-lines <(git ls-tree -r 17.0.1 --name-only) <(git ls-tree -r 17.1.0 --name-only)"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 31,
    "title": "download & save as json",
    "created": "2021-04-02T15:09:18Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "wget <url> -O file_name.json"
    ],
    "example": [
      "wget https://example.service-now.com/api/now/ui/date_time/legacy -O snow_date.json"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "file"
    ],
    "url": "https://stackoverflow.com/a/3040917/7460613"
  },
  {
    "id": 30,
    "title": "a fancier lsof -i",
    "created": "2021-03-31T00:20:09Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "lsof -P -i -n"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 29,
    "title": "get list of most used commands",
    "created": "2021-03-31T00:14:14Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "COLUMN=4",
      "history | awk '{a[$COLUMN]++}END{for(i in a){print a[i] \" \" i}}' | sort -rn | head"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 28,
    "title": "Graph # of connections for each hosts.",
    "created": "2021-03-31T00:03:08Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "netstat -an | grep ESTABLISHED | awk '{print $5}' | awk -F: '{print $1}' | sort | uniq -c | awk '{ printf(\"%s\\t%s\\t\",$2,$1) ; for (i = 0; i < $1; i++) {printf(\"*\")}; print \"\" }'"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "network"
    ],
    "url": "https://www.commandlinefu.com/commands/view/2012/graph-of-connections-for-each-hosts"
  },
  {
    "id": 27,
    "title": "ps examples",
    "created": "2021-03-30T23:09:43Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "ps aux",
      "ps -e"
    ],
    "example": [
      "",
      "# To see every process on the system using standard syntax:",
      "    ps -e",
      "    ps -ef",
      "    ps -eF",
      "    ps -ely",
      "",
      "# To see every process on the system using BSD syntax:",
      "    ps ax",
      "    ps axu",
      "",
      "# To print a process tree:",
      "    ps -ejH",
      "    ps axjf",
      "",
      "# To get info about threads:",
      "    ps -eLf",
      "    ps axms",
      "",
      "# To get security info:",
      "    ps -eo euser,ruser,suser,fuser,f,comm,label",
      "    ps axZ",
      "    ps -eM",
      "",
      "# To see every process running as root (real & effective ID) in user format:",
      "    ps -U root -u root u",
      "",
      "# To see every process with a user-defined format:",
      "    ps -eo pid,tid,class,rtprio,ni,pri,psr,pcpu,stat,wchan:14,comm",
      "    ps axo stat,euid,ruid,tty,tpgid,sess,pgrp,ppid,pid,pcpu,comm",
      "    ps -Ao pid,tt,user,fname,tmout,f,wchan",
      "",
      "# Print only the process IDs of syslogd:",
      "    ps -C syslogd -o pid=",
      "",
      "# Print only the name of PID 42:",
      "    ps -q 42 -o comm=",
      ""
    ],
    "output": "",
    "description": [
      "       KEY   LONG         DESCRIPTION",
      "       c     cmd          simple name of executable",
      "       C     pcpu         cpu utilization",
      "       f     flags        flags as in long format F field",
      "       g     pgrp         process group ID",
      "       G     tpgid        controlling tty process group ID",
      "       j     cutime       cumulative user time",
      "       J     cstime       cumulative system time",
      "       k     utime        user time",
      "       m     min_flt      number of minor page faults",
      "       M     maj_flt      number of major page faults",
      "       n     cmin_flt     cumulative minor page faults",
      "       N     cmaj_flt     cumulative major page faults",
      "       o     session      session ID",
      "",
      "       p     pid          process ID",
      "       P     ppid         parent process ID",
      "       r     rss          resident set size",
      "       R     resident     resident pages",
      "       s     size         memory size in kilobytes",
      "       S     share        amount of shared pages",
      "       t     tty          the device number of the controlling tty",
      "       T     start_time   time process was started",
      "       U     uid          user ID number",
      "       u     user         user name",
      "       v     vsize        total VM size in KiB",
      "       y     priority     kernel scheduling priority"
    ],
    "language": "bash",
    "tags": []
  },
  {
    "id": 26,
    "title": "print filename + content of sudo privileges",
    "created": "2021-03-30T20:31:15Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "find /etc/sudoers.d/ -type f -print -exec cat {} \\; | less"
    ],
    "example": "",
    "output": "",
    "description": [
      "Print filename before printing contents of file. ",
      "Same as `cat ./*.txt` but with filename"
    ],
    "language": "bash",
    "tags": [
      "coreutils"
    ]
  },
  {
    "id": 25,
    "title": "create html toc",
    "created": "2021-03-27T02:40:07Z",
    "modified": "2021-12-30T19:44:09Z",
    "code": [
      "cat <<EOF >index.html",
      "<html>",
      "<body>",
      "<ul>",
      "$(find . | grep html | sed 's/\\.\\///g' | sed 's/^\\([^ ]*\\)/<li><a href=\"\\1\">\\1<\\/a><\\/li>/')",
      "</ul>",
      "</body>",
      "</html>",
      "EOF"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 24,
    "title": "urldecode",
    "created": "2021-03-27T00:19:47Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "sed \"s@+@ @g;s@%@\\\\\\\\x@g\" | xargs -0 printf \"%b\""
    ],
    "example": [
      "alias urldecode='sed \"s@+@ @g;s@%@\\\\\\\\x@g\" | xargs -0 printf \"%b\"'",
      "",
      "echo \"http%3A%2F%2Fwww\" | urldecode",
      "http://www"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "coreutils"
    ]
  },
  {
    "id": 23,
    "title": "recursively download files from web",
    "created": "2021-03-27T00:16:31Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "wget --no-parent -r https://url.com"
    ],
    "example": [
      "wget --no-parent -r http://images-http.us.example.com/images/repository/apps/git/git29_for_OL7.x/"
    ],
    "output": "",
    "description": [
      "recursively download a page ",
      "creates the "
    ],
    "language": "bash",
    "tags": [
      "file"
    ]
  },
  {
    "id": 22,
    "title": "creating a user with pass",
    "created": "2021-03-26T18:34:51Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "useradd -p $(openssl passwd -1 $PASS) $USER"
    ],
    "example": [
      "USER=noreply",
      "PASS=password",
      "useradd -p $(openssl passwd -1 $PASS) $USER"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "coreutils"
    ],
    "url": "https://stackoverflow.com/a/2328528"
  },
  {
    "id": 21,
    "title": "sending email",
    "created": "2021-03-26T17:57:58Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "mail -s \"$(echo -e \"SAR files\\nContent-Type: text/html\")\" annie_tran@example.com <allsar.txt",
      ""
    ],
    "example": [
      "mail -s \"Test\" -a vatp2s_hc_WED_vm_sizing.html annie_tran@example.com </dev/null",
      "",
      "mail -s \"`hostname`\" -a `ls -lrt *.html |tail -1|head -n 1 |awk '{printf $9}'` annie_tran@example.com </dev/null",
      "",
      "mail -s \"`hostname`\" -a `ls -lrt *.txt |tail -1|head -n 1 |awk '{printf $9}'` annie_tran@example.com </dev/null",
      "",
      "mail -s \"`hostname`\" -a <file> annie_tran@example.com </dev/null",
      "",
      "mail -s \"$(echo -e \"This is Subject\\nContent-Type: text/html\")\" annie_tran@example.com <omegap_hc_TUE_sum.html",
      "",
      "mail -s \"$(echo -e \"SAR files\\nContent-Type: text/html\")\" annie_tran@example.com <allsar.txt",
      "",
      "mail -s \"`hostname`\" -a /home/annie_tran/email-test.txt annie_tran@example.com </dev/null"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "coreutils"
    ]
  },
  {
    "id": 20,
    "title": "Get active internet connections and domain sockets",
    "created": "2021-03-25T15:42:51Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "netstat -pW"
    ],
    "example": "",
    "output": "",
    "description": [
      "-p displays",
      "-W print wide (no trim)"
    ],
    "language": "bash",
    "tags": [
      "network"
    ]
  },
  {
    "id": 19,
    "title": "unwrap text file (useful for logs)",
    "created": "2021-03-23T17:17:47Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "sed ':a;N;$!{/\\n$/!ba}; s/[[:blank:]]*\\n[[:blank:]]*/ /g' textfile.txt"
    ],
    "example": [
      "# unwrap sudo.log file",
      "sed ':a;N;$!{/\\n$/!ba}; s/[[:blank:]]*\\n[[:blank:]]*/ /g' /var/log/sudo.log | sed 's/COMMAND/\\nCOMMAND/g'"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "root"
    ],
    "url": "https://unix.stackexchange.com/a/291047"
  },
  {
    "id": 18,
    "title": "clear pycache",
    "created": "2021-03-23T02:21:46Z",
    "modified": "2022-04-06T21:30:41Z",
    "code": [
      "find . | grep -E \"(__pycache__|\\.pyc|\\.pyo$)\" | xargs rm -rf"
    ],
    "example": [
      "alias pyclear='find . | grep -E \"(__pycache__|\\.pyc|\\.pyo$)\" | xargs rm -rf'",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "python"
    ]
  },
  {
    "id": 17,
    "title": "print = across the screen",
    "created": "2021-03-14T19:01:21Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "printf '=%.0s' $(seq 1 $(tput cols))"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [],
    "url": "https://stackoverflow.com/a/60087216"
  },
  {
    "id": 16,
    "title": "Update multiple repos (no rev)",
    "created": "2021-03-13T04:12:37Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "find . -maxdepth 3 -name .git -type d | cut -d '/' -f1,2 | xargs -I {} git -C {} pull"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "system"
    ]
  },
  {
    "id": 15,
    "title": "view file structure (tree)",
    "created": "2021-03-12T22:08:24Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "ls -R | grep \":$\" | sed -e 's/:$//' -e 's/[^-][^\\/]*\\//--/g' -e 's/^/   /' -e 's/-/|/'"
    ],
    "example": [
      "$ ls -R | grep \":$\" | sed -e 's/:$//' -e 's/[^-][^\\/]*\\//--/g' -e 's/^/   /' -e 's/-/|/'",
      "   .",
      "   |-inventory",
      "   |-roles",
      "   |---dummy",
      "   |-----defaults",
      "   |-----files",
      "   |-----handlers",
      "   |-----meta",
      "   |-----tasks",
      "   |-----templates",
      "   |-----tests",
      "   |-----vars",
      ""
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "system"
    ],
    "url": "https://centerkey.com/tree/"
  },
  {
    "id": 14,
    "title": "List full paths for recursive files with grep and awk",
    "created": "2021-03-10T23:55:33Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "ls -R /path | awk '",
      "/:$/&&f{s=$0;f=0}",
      "/:$/&&!f{sub(/:$/,\"\");s=$0;f=1;next}",
      "NF&&f{ print s\"/\"$0 }' | grep docx"
    ],
    "example": [
      "ls -R . | awk '",
      "/:$/&&f{s=$0;f=0}",
      "/:$/&&!f{sub(/:$/,\"\");s=$0;f=1;next}",
      "NF&&f{ print s\"/\"$0 }' | grep docx"
    ],
    "output": "",
    "description": [
      "ls command: get a recursive full-path listing, one line per file",
      ""
    ],
    "language": "bash",
    "tags": [
      "system"
    ],
    "url": "https://stackoverflow.com/a/1767559"
  },
  {
    "id": 13,
    "title": "Updating Multiple Repos With One Command",
    "created": "2021-03-09T20:28:39Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "find . -maxdepth 3 -name .git -type d | rev | cut -c 6- | rev | xargs -I {} git -C {} pull"
    ],
    "example": "",
    "output": "",
    "description": [
      "This command will find all git repos in your current directory with a max depth of 3. Afterwards it will perform a git pull on the current branch for each of those repositories."
    ],
    "language": "bash",
    "tags": [
      "git"
    ],
    "url": "https://medium.com/@codenameyau/updating-multiple-repos-with-one-command-9768c8cdfe46"
  },
  {
    "id": 11,
    "title": "append group to a user",
    "created": "2021-03-03T20:06:00Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "usermod -aG wheel username"
    ],
    "example": [
      "usermod -aG wheel annie_tran"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "root"
    ],
    "url": "https://www.digitalocean.com/community/tutorials/how-to-create-a-sudo-user-on-centos-quickstart"
  },
  {
    "id": 10,
    "title": "view os-release",
    "created": "2021-03-03T19:39:58Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "cat /etc/os-release"
    ],
    "example": [
      "$ cat /etc/os-release",
      "",
      "NAME=\"Oracle Linux Server\"",
      "VERSION=\"8.3\"",
      "ID=\"ol\"",
      "ID_LIKE=\"fedora\"",
      "VARIANT=\"Server\"",
      "VARIANT_ID=\"server\"",
      "VERSION_ID=\"8.3\"",
      "PLATFORM_ID=\"platform:el8\"",
      "PRETTY_NAME=\"Oracle Linux Server 8.3\"",
      "ANSI_COLOR=\"0;31\"",
      "CPE_NAME=\"cpe:/o:oracle:linux:8:3:server\"",
      "HOME_URL=\"https://linux.oracle.com/\"",
      "BUG_REPORT_URL=\"https://bugzilla.oracle.com/\"",
      "",
      "ORACLE_BUGZILLA_PRODUCT=\"Oracle Linux 8\"",
      "ORACLE_BUGZILLA_PRODUCT_VERSION=8.3",
      "ORACLE_SUPPORT_PRODUCT=\"Oracle Linux\"",
      "ORACLE_SUPPORT_PRODUCT_VERSION=8.3"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "system"
    ]
  },
  {
    "id": 9,
    "title": "cf",
    "created": "2021-02-24T09:16:13Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "cf login -a https://api.sr2.pcf.example.com"
    ],
    "example": "",
    "output": "",
    "description": [
      "Sustaining team has the following PCF Environments (change api to apps if you want to access the panel)",
      "",
      "PROD",
      "PC1: https://api.sausmpc01.pcf.example.com",
      "S3B: https://api.sausmsc01.pcf.example.com",
      "NON-PROD",
      "http://api.sr2.pcf.example.com",
      "PCF Org"
    ],
    "language": "bash",
    "tags": [
      "network"
    ],
    "url": "https://confluence.example.com/display/SAL/%5BDevops%5D+PCF+-+example+IT+Cloud+Foundry"
  },
  {
    "id": 8,
    "title": "rpm",
    "created": "2021-02-24T07:40:51Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "RPMURL='https://...'",
      "rpm -ivh $RPMURL"
    ],
    "example": [
      "rpm -ivh http://images-http.us.example.com/images/repository/linux/apps/cloudfoundry/cf-cli-installer_6.51.0_x86-64.rpm"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "pkg"
    ],
    "url": "http://images-http.us.example.com/images/repository/linux/apps/"
  },
  {
    "id": 7,
    "title": "test openssl connection",
    "created": "2021-02-24T07:24:41Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "openssl s_client -connect github.com:443 -msg"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "network"
    ],
    "url": "https://github.com/libressl-portable/portable/issues/369"
  },
  {
    "id": 6,
    "title": "display information about the CPU architecture",
    "created": "2021-02-24T07:10:02Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "lscpu"
    ],
    "example": "",
    "output": "",
    "description": [
      "To test whether your Linux computer has a 32-bit or 64-bit CPU and to see what version of Linux is installed, open your terminal, type the following command at the prompt, and then hit Enter:"
    ],
    "language": "bash",
    "tags": [
      "coreutils"
    ],
    "url": "https://www.howtogeek.com/198615/how-to-check-if-your-linux-system-is-32-bit-or-64-bit/"
  },
  {
    "id": 5,
    "title": "start firewalld",
    "created": "2021-02-23T19:52:28Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "sudo dnf install -y curl policycoreutils openssh-server perl",
      "sudo systemctl enable sshd",
      "sudo systemctl start sshd",
      "# Check if opening the firewall is needed with: sudo systemctl status firewalld",
      "sudo firewall-cmd --permanent --add-service=http",
      "sudo firewall-cmd --permanent --add-service=https",
      "sudo systemctl reload firewalld",
      ""
    ],
    "example": [
      "systemctl status firewalld",
      "service firewalld start",
      "#service firewalld stop"
    ],
    "output": "",
    "description": [
      "On CentOS 8 (and RedHat 8), the commands below will also open HTTP, HTTPS and SSH access in the system firewall."
    ],
    "language": "bash",
    "tags": [
      "network"
    ],
    "url": "https://about.gitlab.com/install/#centos-8"
  },
  {
    "id": 4,
    "title": "find and kill processes",
    "created": "2021-02-23T16:37:25Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "STRING_MATCH=\"\"",
      "lsof -i | grep $STRING_MATCH |  awk '{print $2}' | xargs kill"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "system"
    ]
  },
  {
    "id": 3,
    "title": "host",
    "created": "2021-02-23T14:53:31Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "host -w hostname"
    ],
    "example": [
      "$ host -w awxnlsusandbox.amer.example.com",
      "AWXNLSUSANDBOX.amer.example.com has address 10.179.177.76"
    ],
    "output": "",
    "description": "",
    "language": "bash",
    "tags": []
  },
  {
    "id": 2,
    "title": "pstree",
    "created": "2021-02-23T05:14:57Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "pstree"
    ],
    "example": [
      "$ pstree"
    ],
    "output": "",
    "description": [
      "The pstree command shows running processes as a tree. The tree is rooted at either pid or init if pid is omitted. If a username is specified, all process trees rooted at processes owned by that user are shown."
    ],
    "language": "bash",
    "tags": []
  },
  {
    "id": 1,
    "title": "generate RSA key",
    "created": "2021-02-23T05:07:43Z",
    "modified": "2021-12-30T19:44:08Z",
    "code": [
      "openssl genpkey -out fd.key -algorithm RSA -pkeyopt rsa_keygen_bits:2048 -aes-128-cbc"
    ],
    "example": "",
    "output": "",
    "description": "",
    "language": "bash",
    "tags": [
      "network"
    ],
    "url": "https://www.feistyduck.com/library/openssl-cookbook/online/ch-openssl.html"
  }
]
