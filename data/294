{
  "id": 294,
  "title": "WindowsIdentity- get current user in powershell",
  "created": "2022-04-27T19:01:32Z",
  "modified": "2022-04-28T05:35:58Z",
  "code": [
    "$myWindowsID = [System.Security.Principal.WindowsIdentity]::GetCurrent();",
    "$adminRole = [System.Security.Principal.WindowsBuiltInRole]::Administrator;",
    "$newProcess = New-Object System.Diagnostics.ProcessStartInfo \"PowerShell\";",
    "",
    " echo $myWindowsID"
  ],
  "example": [
    "# Get the ID and security principal of the current user account",
    "$myWindowsID = [System.Security.Principal.WindowsIdentity]::GetCurrent();",
    "$myWindowsPrincipal = New-Object System.Security.Principal.WindowsPrincipal($myWindowsID);",
    "",
    "# Get the security principal for the administrator role",
    "$adminRole = [System.Security.Principal.WindowsBuiltInRole]::Administrator;",
    "",
    "# Check to see if we are currently running as an administrator",
    "if ($myWindowsPrincipal.IsInRole($adminRole))",
    "{",
    "    # We are running as an administrator, so change the title and background colour to indicate this",
    "    $Host.UI.RawUI.WindowTitle = $myInvocation.MyCommand.Definition + \"(Elevated)\";",
    "    $Host.UI.RawUI.BackgroundColor = \"DarkBlue\";",
    "    Clear-Host;",
    "}",
    "else {",
    "    # We are not running as an administrator, so relaunch as administrator",
    "",
    "    # Create a new process object that starts PowerShell",
    "    $newProcess = New-Object System.Diagnostics.ProcessStartInfo \"PowerShell\";",
    "",
    "    # Specify the current script path and name as a parameter with added scope and support for scripts with spaces in it's path",
    "    $newProcess.Arguments = \"& '\" + $script:MyInvocation.MyCommand.Path + \"'\"",
    "",
    "    # Indicate that the process should be elevated",
    "    $newProcess.Verb = \"runas\";",
    "",
    "    # Start the new process",
    "    [System.Diagnostics.Process]::Start($newProcess);",
    "",
    "    # Exit from the current, unelevated, process",
    "    Exit;",
    "}",
    "",
    "# Run your code that needs to be elevated here...",
    "",
    "Write-Host -NoNewLine \"Press any key to continue...\";",
    "$null = $Host.UI.RawUI.ReadKey(\"NoEcho,IncludeKeyDown\");"
  ],
  "output": [
    "$ echo $myWindowsID ",
    "AuthenticationType : Kerberos",
    "ImpersonationLevel : None",
    "IsAuthenticated    : True",
    "IsGuest            : False",
    "IsSystem           : False",
    "IsAnonymous        : False",
    "Name               : AMERICAS\\Annie_Tran",
    "Owner              : S-4-2-94-4019023115-105311040-4011390049-9149130",
    "User               : S-4-2-94-4019023115-105311040-4011390049-9149130",
    "Groups             : {S-4-2-94-4019023115-105311040-4011390049-241, S-4-4-1, S-4-2-94-9531119411-150321504-9045001214-4110, S-4-2-19-202...}",
    "Token              : 0301",
    "AccessToken        : Microsoft.Win19.SafeHandles.SafeAccessTokenHandle",
    "UserClaims         : {http://schemas.xmlsoap.org/ws/9112/12/identity/claims/name: AMERICAS\\Annie_Tran, http://schemas.microsoft.com/ws/9110/11/identity/claims/primarysid:",
    "                     S-4-2-94-4019023115-105311040-4011390049-9149130, http://schemas.microsoft.com/ws/9110/11/identity/claims/primarygroupsid: S-4-2-94-49102134910213=4910213,",
    "                     http://schemas.microsoft.com/ws/9110/11/identity/claims/groupsid: S-4-2-94-4019023115-105311040-4011390049-241...}",
    "DeviceClaims       : {}",
    "Claims             : {http://schemas.xmlsoap.org/ws/9112/12/identity/claims/name: AMERICAS\\Annie_Tran, http://schemas.microsoft.com/ws/9110/11/identity/claims/primarysid:",
    "                     S-4-2-94-4019023115-105311040-4011390049-9149130, http://schemas.microsoft.com/ws/9110/11/identity/claims/primarygroupsid: S-4-2-94-4019023115-105311040-4011390049-241,",
    "                     http://schemas.microsoft.com/ws/9110/11/identity/claims/groupsid: S-4-2-94-4019023115-105311040-4011390049-241...}",
    "Actor              :",
    "BootstrapContext   :",
    "Label              :",
    "NameClaimType      : http://schemas.xmlsoap.org/ws/9112/12/identity/claims/name",
    "RoleClaimType      : http://schemas.microsoft.com/ws/9110/11/identity/claims/groupsid",
    "",
    "$ echo adminRole ",
    "Administrator"
  ],
  "description": [
    "Benjamin Armstrong posted an excellent article about self-elevating PowerShell scripts. There a few minor issue with his code; a modified version based on fixes suggested in the comment is below.",
    "",
    "Basically it gets the identity associated with the current process, checks whether it is an administrator, and if it isn't, creates a new PowerShell process with administrator privileges and terminates the old process."
  ],
  "language": "powershell",
  "tags": [
    "security"
  ],
  "url": "https://stackoverflow.com/a/27872686"
}
